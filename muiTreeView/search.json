[{"path":"https://felixluginbuhl.com/muiTreeView/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Felix Luginbuhl. Author, maintainer. MUI. Contributor, copyright holder.           MUI template <https://mui.com/>","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Luginbuhl F (2025). muiTreeView: 'MUI X Tree View' 'shiny' Apps 'Quarto'. R package version 0.1.0, https://felixluginbuhl.com/muiTreeView.","code":"@Manual{,   title = {muiTreeView: 'MUI X Tree View' for 'shiny' Apps and 'Quarto'},   author = {Felix Luginbuhl},   year = {2025},   note = {R package version 0.1.0},   url = {https://felixluginbuhl.com/muiTreeView}, }"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"muitreeview","dir":"","previous_headings":"","what":"MUI X Tree View for shiny Apps and Quarto","title":"MUI X Tree View for shiny Apps and Quarto","text":"muiTreeView gives access MUI X Tree View React components, lets users navigate hierarchical lists data nested levels can expanded collapsed.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"MUI X Tree View for shiny Apps and Quarto","text":"can install development version muiTreeView like :","code":"remotes::install_github(\"lgnbhl/muiTreeView\")"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"basic-examples","dir":"","previous_headings":"","what":"Basic examples","title":"MUI X Tree View for shiny Apps and Quarto","text":"","code":"library(muiTreeView)"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"mui-rich-tree-view","dir":"","previous_headings":"Basic examples","what":"MUI Rich Tree View","title":"MUI X Tree View for shiny Apps and Quarto","text":"Use RichTreeView() createTree() helper function:","code":"df <- data.frame(   pkg = c(\"muiTreeView\", \"muiTreeView\", \"muiTreeView\"),   functions = c(\"SimpleTreeView\", \"RichTreeView\", \"RichTreeView\"),   args = c(\"items\", \"items\", \"onItemSelectionToggle\") )  treeItems <- createTree(df)  RichTreeView(   items = treeItems )"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"multi-selection-and-checkbox","dir":"","previous_headings":"Basic examples","what":"Multi selection and checkbox","title":"MUI X Tree View for shiny Apps and Quarto","text":"can activate checkbox selection checkboxSelection = TRUE multi selection multiSelect = TRUE:","code":"RichTreeView(   items = treeItems,   checkboxSelection = TRUE,   multiSelect = TRUE # FALSE for single select )"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"add-data-with-createtree","dir":"","previous_headings":"Basic examples","what":"Add data with createTree()","title":"MUI X Tree View for shiny Apps and Quarto","text":"helper function createTree() transforms dataframe can used RichTreeView(). can provide vector column names select choose level order tree nodes, example: createTree() creates also unique IDs node joining name label random integer dash. createTree() adapted shinyWidgets::create_tree(), want thank authors shinyWidgets amazing work!","code":"df <- data.frame(   pkg = c(\"muiTreeView\", \"muiTreeView\", \"muiTreeView\"),   functions = c(\"SimpleTreeView\", \"RichTreeView\", \"RichTreeView\"),   args = c(\"items\", \"items\", \"onItemSelectionToggle\") )  treeItems <- createTree(df, c(\"functions\", \"pkg\"))  str(treeItems, max.level = 3) #> List of 2 #>  $ :List of 3 #>   ..$ label   : chr \"SimpleTreeView\" #>   ..$ id      : chr \"SimpleTreeView-4185118\" #>   ..$ children:List of 1 #>   .. ..$ :List of 2 #>  $ :List of 3 #>   ..$ label   : chr \"RichTreeView\" #>   ..$ id      : chr \"RichTreeView-7923291\" #>   ..$ children:List of 1 #>   .. ..$ :List of 2 df <- data.frame(   pkg = c(\"muiTreeView\", \"muiTreeView\", \"muiTreeView\"),   functions = c(\"SimpleTreeView\", \"RichTreeView\", \"RichTreeView\"),   args = c(\"items\", \"items\", \"onItemSelectionToggle\") )  treeItems <- createTree(df, c(\"functions\", \"pkg\")) # treeItems <- list( #   list( #     label = \"muiTreeView\", id = \"muiTreeView-1\", #     children = list( #       list( #         label = \"SimpleTreeView\", id = \"SimpleTreeView-2\", #         children = list( #           list(label = \"items\", id = \"items-3\") #         ) #       ), #       list( #         label = \"RichTreeView\", id = \"RichTreeView-4\", #         children = list( #           list(label = \"items\", id = \"items-5\"), #           list(label = \"onItemClick\", id = \"onItemClick-6\") #         ) #       ) #     ) #   ) # )  RichTreeView(   items = treeItems )"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"rich-tree-view-node-expanded","dir":"","previous_headings":"Basic examples","what":"Rich Tree View node expanded","title":"MUI X Tree View for shiny Apps and Quarto","text":"can expand default one multiple nodes defaultExpandedItems argument providing related IDs.","code":"df <- data.frame(   pkg = c(\"muiTreeView\", \"muiTreeView\", \"muiTreeView\"),   functions = c(\"SimpleTreeView\", \"RichTreeView\", \"RichTreeView\"),   args = c(\"items\", \"items\", \"onItemSelectionToggle\") )  treeItems <- createTree(df)  RichTreeView(   items = treeItems,   defaultExpandedItems = list(treeItems[[1]]$id) # always in list() )"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"usage-with-shiny","dir":"","previous_headings":"","what":"Usage with Shiny","title":"MUI X Tree View for shiny Apps and Quarto","text":"can get user item clicked Shiny using onItemSelectionToggle argument (info ), creating “itemSelection” input shiny.react::setInput(). “itemSelection” input returns label name followed dash “-” random integer, can get cleaned label using gsub(), .e. gsub(pattern = \"\\\\-.*$\", replacement = \"\", x = input$itemSelection)","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"track-latest-item-clicked","dir":"","previous_headings":"Usage with Shiny","what":"Track latest item clicked","title":"MUI X Tree View for shiny Apps and Quarto","text":"","code":"library(shiny)  df <- data.frame(   pkg = c(\"muiTreeView\", \"muiTreeView\", \"muiTreeView\"),   functions = c(\"SimpleTreeView\", \"RichTreeView\", \"RichTreeView\"),   args = c(\"items\", \"items\", \"onItemSelectionToggle\") )  treeItems <- createTree(df)  ui <- tagList(   reactOutput(\"tree\"),   verbatimTextOutput(\"info\") )  server <- function(input, output, session) {   output$tree <- renderReact({     RichTreeView(       items = treeItems,       # expand by default a node with its id       defaultExpandedItems = list(treeItems[[1]]$id), # always in list()       onItemSelectionToggle = setInput(         inputId = \"itemSelection\",          jsAccessor = \"[1]\"       )     )   })   output$info <- shiny::renderPrint(     # remove random ID to return only item label name     gsub(pattern = \"\\\\-.*$\", replacement = \"\", x = input$itemSelection)   ) }  shinyApp(ui, server)"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"track-multiple-items-with-checkbox-selection","dir":"","previous_headings":"Usage with Shiny","what":"Track multiple items with checkbox selection","title":"MUI X Tree View for shiny Apps and Quarto","text":"can use reactive values get multiple items selection implementing logic showed official MUI documentation.","code":"library(shiny)  df <- data.frame(   pkg = c(\"muiTreeView\", \"muiTreeView\", \"muiTreeView\"),   functions = c(\"SimpleTreeView\", \"RichTreeView\", \"RichTreeView\"),   args = c(\"items\", \"items\", \"onItemSelectionToggle\") )  treeItems <- createTree(df)  ui <- tagList(   reactOutput(\"tree\"),   verbatimTextOutput(\"info\") )  server <- function(input, output, session) {   output$tree <- renderReact({     RichTreeView(       checkboxSelection = TRUE,       multiSelect = TRUE,       items = treeItems,       # expand by default a node with its id       defaultExpandedItems = list(treeItems[[1]]$id), # always in list()       # By default, selecting a parent item does not select its children.       selectionPropagation = list(         parents = TRUE,          descendants = TRUE       ),       onItemSelectionToggle = shiny.react::setInput(         inputId = \"itemSelection\",          jsAccessor = \"[1]\"       )     )   })      # Reproduce logic from official MUI's documentation   selectedItems <- reactiveValues()   selectedItems$selected <- NULL      observeEvent(input$itemSelection, {     current_selection <- input$itemSelection          if(current_selection %in% selectedItems$selected) {       # Remove if already selected       new_selection <- setdiff(selectedItems$selected, current_selection)     } else {       # Add if not selected       new_selection <- c(selectedItems$selected, current_selection)     }          selectedItems$selected <- new_selection   })      output$info <- shiny::renderPrint(     # remove random ID to return only item label name     gsub(pattern = \"\\\\-.*$\", replacement = \"\", x = selectedItems$selected)   )  }  shinyApp(ui, server)"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"mui-simple-tree-view","dir":"","previous_headings":"Usage with Shiny","what":"MUI Simple Tree View","title":"MUI X Tree View for shiny Apps and Quarto","text":"Use SimpleTreeView() TreeItem():","code":"SimpleTreeView(   TreeItem(     itemId = \"muiTreeView-1\",      label = \"muiTreeView\",     TreeItem(       itemId = \"SimpleTreeView-2\",        label = \"SimpleTreeView\"     ),     TreeItem(       itemId = \"RichTreeView-3\",        label = \"RichTreeView\"     )   ) )"},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"more-features","dir":"","previous_headings":"Usage with Shiny","what":"More features","title":"MUI X Tree View for shiny Apps and Quarto","text":"Explore official MUI Tree View documentation see features can added.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"use-other-mui-products","dir":"","previous_headings":"Usage with Shiny","what":"Use other MUI products","title":"MUI X Tree View for shiny Apps and Quarto","text":"MUI X Tree View developed MUI, company behind popular React framework Material UI. muiTreeView therefore companion R package shinyMaterialUI , provides access Material UI components R.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"bootstrap-conflict","dir":"","previous_headings":"Usage with Shiny","what":"Bootstrap conflict","title":"MUI X Tree View for shiny Apps and Quarto","text":"muiTreeView can enter conflict Bootstrap CSS framework, used default Shiny functions shiny::fluidPage() friends. Bootstrap conflict potentially solved using Shadow DOM.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/index.html","id":"contribute","dir":"","previous_headings":"Usage with Shiny","what":"Contribute","title":"MUI X Tree View for shiny Apps and Quarto","text":"issue, question want contribute pull request, don’t hesitate write https://github.com/lgnbhl/muiTreeView updates follow Felix Luginbuhl LinkedIn.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Felix Luginbuhl Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/component.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation template for remaining components — component","title":"Documentation template for remaining components — component","text":"Documentation template remaining components","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation template for remaining components — component","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation template for remaining components — component","text":"Object `shiny.tag` class suitable use UI Shiny app.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/createTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create choice structure for [RichTreeView()] — createTree","title":"Create choice structure for [RichTreeView()] — createTree","text":"function adapted `shinyWidgets::create_tree()`. big thank authors shinyWidgets creating `create_tree()` function.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/createTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create choice structure for [RichTreeView()] — createTree","text":"","code":"createTree(data, levels = names(data), levels_id = NULL, ...)"},{"path":"https://felixluginbuhl.com/muiTreeView/reference/createTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create choice structure for [RichTreeView()] — createTree","text":"data `data.frame`. levels Variables identifying hierarchical levels, values variables used text displayed. levels_id Variable use ID nodes. Careful! Spaces allowed IDs. ... Addtional arguments.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/createTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create choice structure for [RichTreeView()] — createTree","text":"`list` can used [RichTreeView()].","code":""},{"path":[]},{"path":"https://felixluginbuhl.com/muiTreeView/reference/muiTreeDependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Mui Tree UI JS dependency — muiTreeDependency","title":"Mui Tree UI JS dependency — muiTreeDependency","text":"Mui Tree UI JS dependency","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/muiTreeDependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mui Tree UI JS dependency — muiTreeDependency","text":"","code":"muiTreeDependency()"},{"path":"https://felixluginbuhl.com/muiTreeView/reference/muiTreeDependency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mui Tree UI JS dependency — muiTreeDependency","text":"HTML dependency object.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. shiny.react JS, reactOutput, renderReact, setInput, triggerEvent","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/RichTreeView.html","id":null,"dir":"Reference","previous_headings":"","what":"RichTreeView — RichTreeView","title":"RichTreeView — RichTreeView","text":"https://mui.com/x/api/tree-view/rich-tree-view/","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/RichTreeView.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RichTreeView — RichTreeView","text":"","code":"RichTreeView(...)"},{"path":"https://felixluginbuhl.com/muiTreeView/reference/RichTreeView.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RichTreeView — RichTreeView","text":"... Props pass component.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/RichTreeView.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RichTreeView — RichTreeView","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/RichTreeView.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RichTreeView — RichTreeView","text":"apiRef { current?: { focusItem?: func, getItem?: func, getItemDOMElement?: func, getItemOrderedChildrenIds?: func, getItemTree?: func, getParentId?: func, isItemExpanded?: func, setEditedItem?: func, setIsItemDisabled?: func, setItemExpansion?: func, setItemSelection?: func, updateItemLabel?: func } }  Default - ref object allows Tree View manipulation. Can instantiated useTreeViewApiRef(). checkboxSelection bool  Default FALSE true, Tree View renders checkbox left label allows selecting . classes object  Default - Override extend styles applied component.See CSS classes API details. defaultExpandedItems Array<string>  Default [] Expanded item ids. Used item's expansion controlled. defaultSelectedItems  Default [] Selected item ids. (Uncontrolled) multiSelect true takes array strings; false (default) string. disabledItemsFocusable bool  Default FALSE true, allow focus disabled items. disableSelection bool  Default FALSE true selection disabled. expandedItems Array<string>  Default - Expanded item ids. Used item's expansion controlled. expansionTrigger 'content'| 'iconContainer'  Default 'content' slot triggers item's expansion clicked. getItemChildren func  Default (item) => item.children Used determine children given item.Signature:function(item: R) => Arrayitem item check. getItemId func  Default (item) => item.id Used determine id given item.Signature:function(item: R) => stringitem item check. getItemLabel func  Default (item) => item.label Used determine string label given item.Signature:function(item: R) => stringitem item check. id string  Default - prop used help implement accessibility logic. provide prop. falls back randomly generated id. isItemDisabled func  Default - Used determine given item disabled.Signature:function(item: R) => booleanitem item check. isItemEditable func| bool  Default () => FALSE Determine given item can edited. itemChildrenIndentation number| string  Default 12px Horizontal indentation item children. Examples: 24, \"24px\", \"2rem\", \"2em\". multiSelect bool  Default FALSE true, ctrl shift trigger multiselect. onExpandedItemsChange func  Default - Callback fired Tree Items expanded/collapsed.Signature:function(event: React.SyntheticEvent, itemIds: array) => voidevent DOM event triggered change. Can null change caused publicAPI.setItemExpansion() method.itemIds ids expanded items. onItemClick func  Default - Callback fired content slot given Tree Item clicked.Signature:function(event: React.MouseEvent, itemId: string) => voidevent DOM event triggered change.itemId id focused item. onItemExpansionToggle func  Default - Callback fired Tree Item expanded collapsed.Signature:function(event: React.SyntheticEvent | null, itemId: array, isExpanded: boolean) => voidevent DOM event triggered change. Can null change caused publicAPI.setItemExpansion() method.itemId itemId modified item.isExpanded true item just expanded, false just collapsed. onItemFocus func  Default - Callback fired given Tree Item focused.Signature:function(event: React.SyntheticEvent | null, itemId: string) => voidevent DOM event triggered change. Warning: generic event focus event.itemId id focused item. onItemLabelChange func  Default - Callback fired label item changes.Signature:function(itemId: TreeViewItemId, newLabel: string) => voiditemId id item edited.newLabel new label items. onItemSelectionToggle func  Default - Callback fired Tree Item selected deselected.Signature:function(event: React.SyntheticEvent, itemId: array, isSelected: boolean) => voidevent DOM event triggered change. Can null change caused publicAPI.setItemSelection() method.itemId itemId modified item.isSelected true item just selected, false just deselected. onSelectedItemsChange func  Default - Callback fired Tree Items selected/deselected.Signature:function(event: React.SyntheticEvent, itemIds: Array | string) => voidevent DOM event triggered change. Can null change caused publicAPI.setItemSelection() method.itemIds ids selected items. multiSelect true, array strings; false (default) string. selectedItems  Default - Selected item ids. (Controlled) multiSelect true takes array strings; false (default) string. selectionPropagation { descendants?: bool, parents?: bool }  Default  parents: FALSE, descendants: FALSE  selectionPropagation.descendants set true.- Selecting parent selects descendants automatically. - Deselecting parent deselects descendants automatically.selectionPropagation.parents set true.- Selecting descendants parent selects parent automatically. - Deselecting descendant selected parent deselects parent automatically.works multiSelect true. , expanded items considered (since collapsed item passed Tree View component ) slotProps object  Default  props used component slot. slots object  Default  Overridable component slots.See Slots API details. sx Array<func| object| bool>| func| object  Default - system prop allows defining system overrides well additional CSS styles.See sx page details.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/shinyInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation template for components with `.shinyInput` wrappers — shinyInput","title":"Documentation template for components with `.shinyInput` wrappers — shinyInput","text":"Documentation template components `.shinyInput` wrappers","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/shinyInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation template for components with `.shinyInput` wrappers — shinyInput","text":"inputId ID component. value Starting value. session Object passed `session` argument Shiny server. ... Props pass component. allowed props listed Details section.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/shinyInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation template for components with `.shinyInput` wrappers — shinyInput","text":"Object `shiny.tag` class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/SimpleTreeView.html","id":null,"dir":"Reference","previous_headings":"","what":"SimpleTreeView — SimpleTreeView","title":"SimpleTreeView — SimpleTreeView","text":"https://mui.com/x/api/tree-view/simple-tree-view/","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/SimpleTreeView.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SimpleTreeView — SimpleTreeView","text":"","code":"SimpleTreeView(...)"},{"path":"https://felixluginbuhl.com/muiTreeView/reference/SimpleTreeView.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SimpleTreeView — SimpleTreeView","text":"... Props pass component.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/SimpleTreeView.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SimpleTreeView — SimpleTreeView","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/SimpleTreeView.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SimpleTreeView — SimpleTreeView","text":"apiRef { current?: { focusItem?: func, getItem?: func, getItemDOMElement?: func, getItemOrderedChildrenIds?: func, getItemTree?: func, getParentId?: func, isItemExpanded?: func, setIsItemDisabled?: func, setItemExpansion?: func, setItemSelection?: func } }  Default - ref object allows Tree View manipulation. Can instantiated useTreeViewApiRef(). checkboxSelection bool  Default FALSE true, Tree View renders checkbox left label allows selecting . children node  Default - content component. classes object  Default - Override extend styles applied component.See CSS classes API details. defaultExpandedItems Array<string>  Default [] Expanded item ids. Used item's expansion controlled. defaultSelectedItems  Default [] Selected item ids. (Uncontrolled) multiSelect true takes array strings; false (default) string. disabledItemsFocusable bool  Default FALSE true, allow focus disabled items. disableSelection bool  Default FALSE true selection disabled. expandedItems Array<string>  Default - Expanded item ids. Used item's expansion controlled. expansionTrigger 'content'| 'iconContainer'  Default 'content' slot triggers item's expansion clicked. id string  Default - prop used help implement accessibility logic. provide prop. falls back randomly generated id. itemChildrenIndentation number| string  Default 12px Horizontal indentation item children. Examples: 24, \"24px\", \"2rem\", \"2em\". multiSelect bool  Default FALSE true, ctrl shift trigger multiselect. onExpandedItemsChange func  Default - Callback fired Tree Items expanded/collapsed.Signature:function(event: React.SyntheticEvent, itemIds: array) => voidevent DOM event triggered change. Can null change caused publicAPI.setItemExpansion() method.itemIds ids expanded items. onItemClick func  Default - Callback fired content slot given Tree Item clicked.Signature:function(event: React.MouseEvent, itemId: string) => voidevent DOM event triggered change.itemId id focused item. onItemExpansionToggle func  Default - Callback fired Tree Item expanded collapsed.Signature:function(event: React.SyntheticEvent | null, itemId: array, isExpanded: boolean) => voidevent DOM event triggered change. Can null change caused publicAPI.setItemExpansion() method.itemId itemId modified item.isExpanded true item just expanded, false just collapsed. onItemFocus func  Default - Callback fired given Tree Item focused.Signature:function(event: React.SyntheticEvent | null, itemId: string) => voidevent DOM event triggered change. Warning: generic event focus event.itemId id focused item. onItemSelectionToggle func  Default - Callback fired Tree Item selected deselected.Signature:function(event: React.SyntheticEvent, itemId: array, isSelected: boolean) => voidevent DOM event triggered change. Can null change caused publicAPI.setItemSelection() method.itemId itemId modified item.isSelected true item just selected, false just deselected. onSelectedItemsChange func  Default - Callback fired Tree Items selected/deselected.Signature:function(event: React.SyntheticEvent, itemIds: Array | string) => voidevent DOM event triggered change. Can null change caused publicAPI.setItemSelection() method.itemIds ids selected items. multiSelect true, array strings; false (default) string. selectedItems  Default - Selected item ids. (Controlled) multiSelect true takes array strings; false (default) string. selectionPropagation { descendants?: bool, parents?: bool }  Default  parents: FALSE, descendants: FALSE  selectionPropagation.descendants set true.- Selecting parent selects descendants automatically. - Deselecting parent deselects descendants automatically.selectionPropagation.parents set true.- Selecting descendants parent selects parent automatically. - Deselecting descendant selected parent deselects parent automatically.works multiSelect true. , expanded items considered (since collapsed item passed Tree View component ) slotProps object  Default - props used component slot. slots object  Default - Overridable component slots.See Slots API details. sx Array<func| object| bool>| func| object  Default - system prop allows defining system overrides well additional CSS styles.See sx page details.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItem.html","id":null,"dir":"Reference","previous_headings":"","what":"TreeItem — TreeItem","title":"TreeItem — TreeItem","text":"https://mui.com/x/api/tree-view/tree-item/","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TreeItem — TreeItem","text":"","code":"TreeItem(...)"},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TreeItem — TreeItem","text":"... Props pass component.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TreeItem — TreeItem","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TreeItem — TreeItem","text":"itemId string  Default - id item. Must unique. children  Default - content component. classes object  Default - Override extend styles applied component.See CSS classes API details. disabled bool  Default FALSE true, item disabled. id string  Default - id attribute item. provided, generated. label node  Default - label item. onBlur func  Default - Callback fired item root blurred. onFocus unsupportedProp  Default - prop supported. Use onItemFocus callback tree need monitor item's focus. onKeyDown func  Default - Callback fired key pressed keyboard tree focus. slotProps object  Default  props used component slot. slots object  Default  Overridable component slots.See Slots API details. sx Array<func| object| bool>| func| object  Default - system prop allows defining system overrides well additional CSS styles.See sx page details.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItemIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"TreeItemIcon — TreeItemIcon","title":"TreeItemIcon — TreeItemIcon","text":"https://mui.com/x/api/tree-view/tree-item-icon/","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItemIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TreeItemIcon — TreeItemIcon","text":"","code":"TreeItemIcon(...)"},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItemIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TreeItemIcon — TreeItemIcon","text":"... Props pass component.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItemIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TreeItemIcon — TreeItemIcon","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/reference/TreeItemIcon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TreeItemIcon — TreeItemIcon","text":"slotProps object  Default  props used component slot. slots object  Default  Overridable component slots.See Slots API details.","code":""},{"path":"https://felixluginbuhl.com/muiTreeView/news/index.html","id":"muitreeview-010","dir":"Changelog","previous_headings":"","what":"muiTreeView 0.1.0","title":"muiTreeView 0.1.0","text":"initial commit","code":""}]

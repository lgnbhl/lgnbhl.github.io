{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started","text":""},{"location":"#xlcharts","title":"xlcharts","text":"<p>xlcharts, an R interface to OpenPyXL to create native Excel charts and work with Microsoft Excel files.</p> <p> </p> <ul> <li>Author: F\u00e9lix Luginb\u00fchl (https://felixluginbuhl.com)</li> <li>Source code: https://github.com/lgnbhl/xlcharts</li> <li>Issues: https://github.com/lgnbhl/xlcharts/issues</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>xlcharts was born from the lack of existing R packages to create native Excel charts and make advanced customization on Microsoft Excel files.</p> <p>It is an R wrapper for the OpenPyXL Python library using the reticulate R package under the hood. The xlcharts documentation is a partial replica of the OpenPyXL documentation, where Python code is replaced by R code (when possible).</p> <p>All kudos goes to Eric Gazoni, Charlie Clark and other authors for developing the OpenPyXL Python library.</p> <p>FULL DOCUMENTATION AT www.felixluginbuhl.com/xlcharts</p>"},{"location":"#install","title":"Install","text":"<pre><code>install.packages(\"xlcharts\")\n\n# development version from GitHub:\n#remotes::install_github(\"lgnbhl/xlcharts\")\n</code></pre> <p>As xlcharts is using the OpenPyXL Python library under the hood, you might have to install it manually.</p> <pre><code>reticulate::install_python()\nreticulate::py_require(\"openpyxl\")\n</code></pre>"},{"location":"#create-a-workbook","title":"Create a workbook","text":"<p>To prevent potential formatting issue, we will always load data from an existing Excel file.</p> <p>If you have a dataframe in R, you can simply write it as an Excel file using the <code>write_xlsx()</code> function imported from the writexl R package.</p> <pre><code>library(xlcharts)\n\ntreeData &lt;- data.frame(\n  \"Type\" = c(\"Maple\", \"Oak\", \"Pine\"), \n  \"LeafColor\" = c(\"Red\", \"Green\", \"Green\"), \n  \"Height\" = c(549, 783, 1204)\n  )\n\nwrite_xlsx(x = treeData, path = \"treeData.xlsx\")\n</code></pre> <p></p> <p>Then you can load the Excel workbook in R using <code>load_workbook()</code>.</p> <pre><code>wb &lt;- load_workbook(filename = \"treeData.xlsx\")\n</code></pre> <p>Let\u2019s get the active worksheet of our workbook.</p> <pre><code>ws &lt;- wb |&gt; active()\n</code></pre>"},{"location":"#access-cells","title":"Access cells","text":"<p>You can access and modify cells using double brackets or <code>cell()</code>:</p> <pre><code>ws[[\"C2\"]]$value &lt;- 550\n#ws$cell(row = 2, column = 3, value = 550) # also works\n\nws[[\"C2\"]]$value\n</code></pre> <pre><code>[1] 550\n</code></pre> <p>Ranges of cells can be accessed using slicing:</p> <pre><code>colC &lt;- ws[[\"C\"]]\ncol_range = ws[[\"C:D\"]]\nrow10 &lt;- ws[[10]]\n</code></pre> <p>Get the dimensions:</p> <pre><code>ws$dimensions\n</code></pre> <pre><code>[1] \"A1:C4\"\n</code></pre>"},{"location":"#make-a-bar-chart","title":"Make a bar chart","text":"<p>We need to add references to where the data and categories are in the worksheet.</p> <pre><code>data &lt;- Reference(ws, min_col = 3, min_row = 2, max_row = 4, max_col = 3)\ncategories &lt;- Reference(ws, min_col = 1, min_row = 2, max_row = 4, max_col = 1)\n</code></pre> <p></p> <p>Now we can construct the skeleton of what will be our bar chart.</p> <pre><code>chart &lt;- BarChart(\n  type = \"bar\",\n  title = \"Tree Height\",\n  legend = NULL\n) |&gt;\n  x_axis(title = \"Height (cm)\") |&gt;\n  y_axis(title = \"Tree Type\")\n</code></pre> <p>And pass the data and categories to the chart object.</p> <pre><code>chart |&gt;\n  add_data(data = data) |&gt;\n  set_categories(labels = categories)\n</code></pre> <p>We can add the chart to the worksheet.</p> <pre><code>ws |&gt; add_chart(chart, anchor =  \"E1\")\n</code></pre> <p>And finally save the workbook as an Excel file.</p> <pre><code>wb |&gt; save_workbook(\"treeData.xlsx\")\n</code></pre> <p></p>"},{"location":"#for-advanced-users","title":"For advanced users","text":"<p>The xlcharts R functions give access to OpenPyXL Python classes.</p> <p>Properties and methods can be accessed using the <code>$</code> sign on any object, for example:</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\nwb$save(filename = \"empty.xlsx\")\n</code></pre> <p>The OpenPyXL Python related documentation URL is provided in every R function documentation, where all arguments/parameters are described in more details. Documentation can be accessed using the <code>?</code> sign, for example:</p> <pre><code>?Workbook()\n</code></pre> <p>The xlcharts R package also provides additional R functions (not calling an OpenPyXL Python class) as helpers, to make the R code easier to read and write:</p> <ul> <li><code>active()</code></li> <li><code>x_axis()</code></li> <li><code>y_axis()</code></li> <li><code>set_catagories()</code></li> <li><code>add_data()</code></li> <li><code>add_table()</code></li> <li><code>add_chart()</code></li> </ul> <p>It also provides functions imported from other Python modules:</p> <ul> <li><code>iadd()</code> from the operator Python module.</li> <li><code>deepcopy()</code> from the copy Python module.</li> </ul> <p>Important differences between Python and R:</p> <ul> <li>lists start at 0 with Python, but at 1 with R.</li> <li>instead of single brackets (<code>[]</code>) in Python, use double brackets   (<code>[[]]</code>) with R.</li> </ul> <p>Always keep in mind that Python array indices are zero-based, while R indices are 1-based.</p> <p>Numbers used in arguments/parameters should be integers (use <code>L</code> after the number in R), for example <code>1L</code>, to be correctly evaluated by the OpenPyXL Python library.</p> <p>Unfortunately some OpenPyXL Python classes from different module have similar names. An arbitrary choice has been made to import some from a specific module instead of another. Maybe a condition will be added in a future version of the package (any contribution is very welcomed!). In the meantime, you can access any class as such:</p> <pre><code>openpyxl &lt;- reticulate::import(\"openpyxl\")\nopenpyxl$[OpenPyXL Python class]\n</code></pre>"},{"location":"#contribute","title":"Contribute","text":"<p>Any contribution is very welcomed!</p> <p>If you find this R package helpful, feel free to mention it on social media. You can follow me on LinkedIn for R package updates: Felix Luginbuhl.</p>"},{"location":"CITATION/","title":"Citation","text":"<p>Pour citer le package \u2018xlcharts\u2019 dans une publication, utilisez :</p> <p>Luginbuhl F (2024). xlcharts: Create Native 'Excel' Charts and Work with Microsoft 'Excel' Files. R package version 0.0.2, https://CRAN.R-project.org/package=xlcharts.  </p>"},{"location":"LICENSE/","title":"MIT License","text":"<p>Copyright (c) 2024 Felix Luginbuhl</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"NEWS/","title":"xlcharts 0.0.2","text":"<ul> <li>fix DESCRIPTION dependencies</li> </ul>"},{"location":"NEWS/#xlcharts-001","title":"xlcharts 0.0.1","text":"<ul> <li>available on CRAN</li> </ul>"},{"location":"man/AbsoluteAnchor/","title":"AbsoluteAnchor","text":"<p>Source code</p>"},{"location":"man/AbsoluteAnchor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.spreadsheet_drawing.html</p>"},{"location":"man/AbsoluteAnchor/#usage","title":"Usage","text":"<pre><code>AbsoluteAnchor(pos = NULL, ext = NULL, ...)\n</code></pre>"},{"location":"man/AbsoluteAnchor/#arguments","title":"Arguments","text":"<code>pos</code>  pos  <code>ext</code>  ext  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AbsoluteAnchor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AbsoluteAnchor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAbsoluteAnchor()\n</code></pre>"},{"location":"man/AdjPoint2D/","title":"AdjPoint2D","text":"<p>Source code</p>"},{"location":"man/AdjPoint2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/AdjPoint2D/#usage","title":"Usage","text":"<pre><code>AdjPoint2D(x = NULL, y = NULL, ...)\n</code></pre>"},{"location":"man/AdjPoint2D/#arguments","title":"Arguments","text":"<code>x</code>  x  <code>y</code>  y  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AdjPoint2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AdjPoint2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAdjPoint2D(x = 1L, y = 2L)\n</code></pre>"},{"location":"man/AdjustHandleList/","title":"AdjustHandleList","text":"<p>Source code</p>"},{"location":"man/AdjustHandleList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/AdjustHandleList/#usage","title":"Usage","text":"<pre><code>AdjustHandleList(...)\n</code></pre>"},{"location":"man/AdjustHandleList/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AdjustHandleList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AdjustHandleList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAdjustHandleList()\n</code></pre>"},{"location":"man/Alignment/","title":"Alignment","text":"<p>Source code</p>"},{"location":"man/Alignment/#description","title":"Description","text":"<p>Alignment options for use in styles.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.alignment.html</p>"},{"location":"man/Alignment/#usage","title":"Usage","text":"<pre><code>Alignment(\n  horizontal = NULL,\n  vertical = NULL,\n  textRotation = 0L,\n  wrapText = NULL,\n  shrinkToFit = NULL,\n  indent = 0L,\n  relativeIndent = 0L,\n  justifyLastLine = NULL,\n  readingOrder = 0L,\n  text_rotation = NULL,\n  wrap_text = NULL,\n  shrink_to_fit = NULL,\n  mergeCell = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Alignment/#arguments","title":"Arguments","text":"<code>horizontal</code>  horizontal  <code>vertical</code>  vertical  <code>textRotation</code>  textRotation  <code>wrapText</code>  wrapText  <code>shrinkToFit</code>  shrinkToFit  <code>indent</code>  indent  <code>relativeIndent</code>  relativeIndent  <code>justifyLastLine</code>  justifyLastLine  <code>readingOrder</code>  readingOrder  <code>text_rotation</code>  text_rotation  <code>wrap_text</code>  wrap_text  <code>shrink_to_fit</code>  shrink_to_fit  <code>mergeCell</code>  mergeCell  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Alignment/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Alignment/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAlignment()\n</code></pre>"},{"location":"man/AlphaBiLevelEffect/","title":"AlphaBiLevelEffect","text":"<p>Source code</p>"},{"location":"man/AlphaBiLevelEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/AlphaBiLevelEffect/#usage","title":"Usage","text":"<pre><code>AlphaBiLevelEffect(thresh = NULL, ...)\n</code></pre>"},{"location":"man/AlphaBiLevelEffect/#arguments","title":"Arguments","text":"<code>thresh</code>  thresh  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AlphaBiLevelEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AlphaBiLevelEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAlphaBiLevelEffect(thresh = 1L)\n</code></pre>"},{"location":"man/AlphaCeilingEffect/","title":"AlphaCeilingEffect","text":"<p>Source code</p>"},{"location":"man/AlphaCeilingEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/AlphaCeilingEffect/#usage","title":"Usage","text":"<pre><code>AlphaCeilingEffect(...)\n</code></pre>"},{"location":"man/AlphaCeilingEffect/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AlphaCeilingEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AlphaCeilingEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAlphaCeilingEffect()\n</code></pre>"},{"location":"man/AlphaFloorEffect/","title":"AlphaFloorEffect","text":"<p>Source code</p>"},{"location":"man/AlphaFloorEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/AlphaFloorEffect/#usage","title":"Usage","text":"<pre><code>AlphaFloorEffect(...)\n</code></pre>"},{"location":"man/AlphaFloorEffect/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AlphaFloorEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AlphaFloorEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAlphaFloorEffect()\n</code></pre>"},{"location":"man/AlphaInverseEffect/","title":"AlphaInverseEffect","text":"<p>Source code</p>"},{"location":"man/AlphaInverseEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/AlphaInverseEffect/#usage","title":"Usage","text":"<pre><code>AlphaInverseEffect(...)\n</code></pre>"},{"location":"man/AlphaInverseEffect/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AlphaInverseEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AlphaInverseEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAlphaInverseEffect()\n</code></pre>"},{"location":"man/AlphaModulateEffect/","title":"AlphaModulateEffect","text":"<p>Source code</p>"},{"location":"man/AlphaModulateEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/AlphaModulateEffect/#usage","title":"Usage","text":"<pre><code>AlphaModulateEffect(cont = NULL, ...)\n</code></pre>"},{"location":"man/AlphaModulateEffect/#arguments","title":"Arguments","text":"<code>cont</code>  cont  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AlphaModulateEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AlphaModulateEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAlphaModulateEffect(cont = EffectContainer(type = \"tree\"))\n</code></pre>"},{"location":"man/AlphaModulateFixedEffect/","title":"AlphaModulateFixedEffect","text":"<p>Source code</p>"},{"location":"man/AlphaModulateFixedEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/AlphaModulateFixedEffect/#usage","title":"Usage","text":"<pre><code>AlphaModulateFixedEffect(amt = NULL, ...)\n</code></pre>"},{"location":"man/AlphaModulateFixedEffect/#arguments","title":"Arguments","text":"<code>amt</code>  amt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AlphaModulateFixedEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AlphaModulateFixedEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAlphaModulateFixedEffect(amt = 1L)\n</code></pre>"},{"location":"man/AlphaReplaceEffect/","title":"AlphaReplaceEffect","text":"<p>Source code</p>"},{"location":"man/AlphaReplaceEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/AlphaReplaceEffect/#usage","title":"Usage","text":"<pre><code>AlphaReplaceEffect(a = NULL, ...)\n</code></pre>"},{"location":"man/AlphaReplaceEffect/#arguments","title":"Arguments","text":"<code>a</code>  a  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AlphaReplaceEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AlphaReplaceEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAlphaReplaceEffect(a = 1L)\n</code></pre>"},{"location":"man/AnchorClientData/","title":"AnchorClientData","text":"<p>Source code</p>"},{"location":"man/AnchorClientData/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.spreadsheet_drawing.html</p>"},{"location":"man/AnchorClientData/#usage","title":"Usage","text":"<pre><code>AnchorClientData(fLocksWithSheet = NULL, fPrintsWithSheet = NULL, ...)\n</code></pre>"},{"location":"man/AnchorClientData/#arguments","title":"Arguments","text":"<code>fLocksWithSheet</code>  fLocksWithSheet  <code>fPrintsWithSheet</code>  fPrintsWithSheet  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AnchorClientData/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AnchorClientData/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAnchorClientData()\n</code></pre>"},{"location":"man/AnchorMarker/","title":"AnchorMarker","text":"<p>Source code</p>"},{"location":"man/AnchorMarker/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.spreadsheet_drawing.html</p>"},{"location":"man/AnchorMarker/#usage","title":"Usage","text":"<pre><code>AnchorMarker(col = 0L, colOff = 0L, row = 0L, rowOff = 0L, ...)\n</code></pre>"},{"location":"man/AnchorMarker/#arguments","title":"Arguments","text":"<code>col</code>  col  <code>colOff</code>  colOff  <code>row</code>  row  <code>rowOff</code>  rowOff  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AnchorMarker/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AnchorMarker/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAnchorMarker()\n</code></pre>"},{"location":"man/AreaChart/","title":"AreaChart","text":"<p>Source code</p>"},{"location":"man/AreaChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.area_chart.html</p>"},{"location":"man/AreaChart/#usage","title":"Usage","text":"<pre><code>AreaChart(axId = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/AreaChart/#arguments","title":"Arguments","text":"<code>axId</code>  axId  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AreaChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AreaChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAreaChart()\n</code></pre>"},{"location":"man/AreaChart3D/","title":"AreaChart3D","text":"<p>Source code</p>"},{"location":"man/AreaChart3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.area_chart.html</p>"},{"location":"man/AreaChart3D/#usage","title":"Usage","text":"<pre><code>AreaChart3D(gapDepth = NULL, ...)\n</code></pre>"},{"location":"man/AreaChart3D/#arguments","title":"Arguments","text":"<code>gapDepth</code>  gapDepth  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AreaChart3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AreaChart3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAreaChart3D()\n</code></pre>"},{"location":"man/ArrayDescriptor/","title":"ArrayDescriptor","text":"<p>Source code</p>"},{"location":"man/ArrayDescriptor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.cell_style.html</p>"},{"location":"man/ArrayDescriptor/#usage","title":"Usage","text":"<pre><code>ArrayDescriptor(key = NULL, ...)\n</code></pre>"},{"location":"man/ArrayDescriptor/#arguments","title":"Arguments","text":"<code>key</code>  key  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ArrayDescriptor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ArrayDescriptor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nArrayDescriptor()\n</code></pre>"},{"location":"man/ArrayFormula/","title":"ArrayFormula","text":"<p>Source code</p>"},{"location":"man/ArrayFormula/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.formula.html</p>"},{"location":"man/ArrayFormula/#usage","title":"Usage","text":"<pre><code>ArrayFormula(ref, text = NULL, ...)\n</code></pre>"},{"location":"man/ArrayFormula/#arguments","title":"Arguments","text":"<code>ref</code>  ref  <code>text</code>  text  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ArrayFormula/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ArrayFormula/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nArrayFormula(ref = \"A1\")\n</code></pre>"},{"location":"man/AuthorList/","title":"AuthorList","text":"<p>Source code</p>"},{"location":"man/AuthorList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.comments.author.html</p>"},{"location":"man/AuthorList/#usage","title":"Usage","text":"<pre><code>AuthorList(author = list(), ...)\n</code></pre>"},{"location":"man/AuthorList/#arguments","title":"Arguments","text":"<code>author</code>  author  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AuthorList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AuthorList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAuthorList(author = c(\"author1\", \"author2\"))\n</code></pre>"},{"location":"man/AutoFilter/","title":"AutoFilter","text":"<p>Source code</p>"},{"location":"man/AutoFilter/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/AutoFilter/#usage","title":"Usage","text":"<pre><code>AutoFilter(\n  ref = NULL,\n  filterColumn = list(),\n  sortState = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/AutoFilter/#arguments","title":"Arguments","text":"<code>ref</code>  ref  <code>filterColumn</code>  filterColumn  <code>sortState</code>  sortState  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AutoFilter/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AutoFilter/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAutoFilter()\n</code></pre>"},{"location":"man/AutonumberBullet/","title":"AutonumberBullet","text":"<p>Source code</p>"},{"location":"man/AutonumberBullet/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/AutonumberBullet/#usage","title":"Usage","text":"<pre><code>AutonumberBullet(type = NULL, startAt = NULL, ...)\n</code></pre>"},{"location":"man/AutonumberBullet/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>startAt</code>  startAt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AutonumberBullet/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AutonumberBullet/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAutonumberBullet(type = \"hindiNumPeriod\", startAt = 1L)\n</code></pre>"},{"location":"man/AxDataSource/","title":"AxDataSource","text":"<p>Source code</p>"},{"location":"man/AxDataSource/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/AxDataSource/#usage","title":"Usage","text":"<pre><code>AxDataSource(\n  numRef = NULL,\n  numLit = NULL,\n  strRef = NULL,\n  strLit = NULL,\n  multiLvlStrRef = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/AxDataSource/#arguments","title":"Arguments","text":"<code>numRef</code>  numRef  <code>numLit</code>  numLit  <code>strRef</code>  strRef  <code>strLit</code>  strLit  <code>multiLvlStrRef</code>  multiLvlStrRef  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/AxDataSource/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/AxDataSource/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nAxDataSource(numRef = NumRef())\n</code></pre>"},{"location":"man/Backdrop/","title":"Backdrop","text":"<p>Source code</p>"},{"location":"man/Backdrop/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Backdrop/#usage","title":"Usage","text":"<pre><code>Backdrop(anchor = NULL, norm = NULL, up = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/Backdrop/#arguments","title":"Arguments","text":"<code>anchor</code>  anchor  <code>norm</code>  norm  <code>up</code>  up  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Backdrop/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Backdrop/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBackdrop(\n  anchor = Point3D(x = 1L, y = 2L, z = 3L),\n  norm = Vector3D(dx = 1L, dy = 2L, dz = 3L),\n  up = Vector3D(dx = 1L, dy = 2L, dz = 3L)\n)\n</code></pre>"},{"location":"man/BandFormat/","title":"BandFormat","text":"<p>Source code</p>"},{"location":"man/BandFormat/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.surface_chart.html</p>"},{"location":"man/BandFormat/#usage","title":"Usage","text":"<pre><code>BandFormat(idx = 0L, spPr = NULL, ...)\n</code></pre>"},{"location":"man/BandFormat/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>spPr</code>  spPr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BandFormat/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BandFormat/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBandFormat()\n</code></pre>"},{"location":"man/BandFormatList/","title":"BandFormatList","text":"<p>Source code</p>"},{"location":"man/BandFormatList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.surface_chart.html</p>"},{"location":"man/BandFormatList/#usage","title":"Usage","text":"<pre><code>BandFormatList(bandFmt = list(), ...)\n</code></pre>"},{"location":"man/BandFormatList/#arguments","title":"Arguments","text":"<code>bandFmt</code>  bandFmt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BandFormatList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BandFormatList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBandFormatList()\n</code></pre>"},{"location":"man/BarChart/","title":"BarChart","text":"<p>Source code</p>"},{"location":"man/BarChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.bar_chart.html</p>"},{"location":"man/BarChart/#usage","title":"Usage","text":"<pre><code>BarChart(gapWidth = 150L, overlap = NULL, serLines = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/BarChart/#arguments","title":"Arguments","text":"<code>gapWidth</code>  gapWidth  <code>overlap</code>  overlap  <code>serLines</code>  serLines  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BarChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BarChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBarChart()\n</code></pre>"},{"location":"man/BarChart3D/","title":"BarChart3D","text":"<p>Source code</p>"},{"location":"man/BarChart3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.bar_chart.html</p>"},{"location":"man/BarChart3D/#usage","title":"Usage","text":"<pre><code>BarChart3D(\n  gapWidth = 150L,\n  gapDepth = 150L,\n  shape = NULL,\n  serLines = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/BarChart3D/#arguments","title":"Arguments","text":"<code>gapWidth</code>  gapWidth  <code>gapDepth</code>  gapDepth  <code>shape</code>  shape  <code>serLines</code>  serLines  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BarChart3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BarChart3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBarChart3D()\n</code></pre>"},{"location":"man/Bevel/","title":"Bevel","text":"<p>Source code</p>"},{"location":"man/Bevel/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Bevel/#usage","title":"Usage","text":"<pre><code>Bevel(w = NULL, h = NULL, prst = NULL, ...)\n</code></pre>"},{"location":"man/Bevel/#arguments","title":"Arguments","text":"<code>w</code>  w integer  <code>h</code>  h integer  <code>prst</code>  prst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Bevel/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Bevel/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBevel(w = 1L, h = 1L)\n</code></pre>"},{"location":"man/BiLevelEffect/","title":"BiLevelEffect","text":"<p>Source code</p>"},{"location":"man/BiLevelEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/BiLevelEffect/#usage","title":"Usage","text":"<pre><code>BiLevelEffect(thresh = NULL, ...)\n</code></pre>"},{"location":"man/BiLevelEffect/#arguments","title":"Arguments","text":"<code>thresh</code>  thresh  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BiLevelEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BiLevelEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBiLevelEffect(thresh = 1L)\n</code></pre>"},{"location":"man/Blip/","title":"Blip","text":"<p>Source code</p>"},{"location":"man/Blip/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/Blip/#usage","title":"Usage","text":"<pre><code>Blip(\n  cstate = NULL,\n  embed = NULL,\n  link = NULL,\n  noGrp = NULL,\n  noSelect = NULL,\n  noRot = NULL,\n  noChangeAspect = NULL,\n  noMove = NULL,\n  noResize = NULL,\n  noEditPoints = NULL,\n  noAdjustHandles = NULL,\n  noChangeArrowheads = NULL,\n  noChangeShapeType = NULL,\n  extLst = NULL,\n  alphaBiLevel = NULL,\n  alphaCeiling = NULL,\n  alphaFloor = NULL,\n  alphaInv = NULL,\n  alphaMod = NULL,\n  alphaModFix = NULL,\n  alphaRepl = NULL,\n  biLevel = NULL,\n  blur = NULL,\n  clrChange = NULL,\n  clrRepl = NULL,\n  duotone = NULL,\n  fillOverlay = NULL,\n  grayscl = NULL,\n  hsl = NULL,\n  lum = NULL,\n  tint = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Blip/#arguments","title":"Arguments","text":"<code>cstate</code>  cstate  <code>embed</code>  embed  <code>link</code>  link  <code>noGrp</code>  noGrp  <code>noSelect</code>  noSelect  <code>noRot</code>  noRot  <code>noChangeAspect</code>  noChangeAspect  <code>noMove</code>  noMove  <code>noResize</code>  noResize  <code>noEditPoints</code>  noEditPoints  <code>noAdjustHandles</code>  noAdjustHandles  <code>noChangeArrowheads</code>  noChangeArrowheads  <code>noChangeShapeType</code>  noChangeShapeType  <code>extLst</code>  extLst  <code>alphaBiLevel</code>  alphaBiLevel  <code>alphaCeiling</code>  alphaCeiling  <code>alphaFloor</code>  alphaFloor  <code>alphaInv</code>  alphaInv  <code>alphaMod</code>  alphaMod  <code>alphaModFix</code>  alphaModFix  <code>alphaRepl</code>  alphaRepl  <code>biLevel</code>  biLevel  <code>blur</code>  blur  <code>clrChange</code>  clrChange  <code>clrRepl</code>  clrRepl  <code>duotone</code>  duotone  <code>fillOverlay</code>  fillOverlay  <code>grayscl</code>  grayscl  <code>hsl</code>  hsl  <code>lum</code>  lum  <code>tint</code>  tint  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Blip/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Blip/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBlip()\n</code></pre>"},{"location":"man/BlipFillProperties/","title":"BlipFillProperties","text":"<p>Source code</p>"},{"location":"man/BlipFillProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/BlipFillProperties/#usage","title":"Usage","text":"<pre><code>BlipFillProperties(\n  dpi = NULL,\n  rotWithShape = NULL,\n  blip = NULL,\n  tile = NULL,\n  srcRect = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/BlipFillProperties/#arguments","title":"Arguments","text":"<code>dpi</code>  dpi  <code>rotWithShape</code>  rotWithShape  <code>blip</code>  blip  <code>tile</code>  tile  <code>srcRect</code>  srcRect  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BlipFillProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BlipFillProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBlipFillProperties()\n</code></pre>"},{"location":"man/BlurEffect/","title":"BlurEffect","text":"<p>Source code</p>"},{"location":"man/BlurEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/BlurEffect/#usage","title":"Usage","text":"<pre><code>BlurEffect(rad = NULL, grow = NULL, ...)\n</code></pre>"},{"location":"man/BlurEffect/#arguments","title":"Arguments","text":"<code>rad</code>  rad  <code>grow</code>  grow  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BlurEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BlurEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBlurEffect(rad = 0.5)\n</code></pre>"},{"location":"man/BookView/","title":"BookView","text":"<p>Source code</p>"},{"location":"man/BookView/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.views.html</p>"},{"location":"man/BookView/#usage","title":"Usage","text":"<pre><code>BookView(\n  visibility = \"visible\",\n  minimized = FALSE,\n  showHorizontalScroll = TRUE,\n  showVerticalScroll = TRUE,\n  showSheetTabs = TRUE,\n  xWindow = NULL,\n  yWindow = NULL,\n  windowWidth = NULL,\n  windowHeight = NULL,\n  tabRatio = 600L,\n  firstSheet = 0L,\n  activeTab = 0L,\n  autoFilterDateGrouping = TRUE,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/BookView/#arguments","title":"Arguments","text":"<code>visibility</code>  visibility  <code>minimized</code>  minimized  <code>showHorizontalScroll</code>  showHorizontalScroll  <code>showVerticalScroll</code>  showVerticalScroll  <code>showSheetTabs</code>  showSheetTabs  <code>xWindow</code>  xWindow  <code>yWindow</code>  yWindow  <code>windowWidth</code>  windowWidth  <code>windowHeight</code>  windowHeight  <code>tabRatio</code>  tabRatio  <code>firstSheet</code>  firstSheet  <code>activeTab</code>  activeTab  <code>autoFilterDateGrouping</code>  autoFilterDateGrouping  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BookView/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BookView/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBookView()\n</code></pre>"},{"location":"man/Border/","title":"Border","text":"<p>Source code</p>"},{"location":"man/Border/#description","title":"Description","text":"<p>Border positioning for use in styles.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.borders.html</p>"},{"location":"man/Border/#usage","title":"Usage","text":"<pre><code>Border(\n  left = NULL,\n  right = NULL,\n  top = NULL,\n  bottom = NULL,\n  diagonal = NULL,\n  diagonal_direction = NULL,\n  vertical = NULL,\n  horizontal = NULL,\n  diagonalUp = FALSE,\n  diagonalDown = FALSE,\n  outline = TRUE,\n  start = NULL,\n  end = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Border/#arguments","title":"Arguments","text":"<code>left</code>  left  <code>right</code>  right  <code>top</code>  top  <code>bottom</code>  bottom  <code>diagonal</code>  diagonal  <code>diagonal_direction</code>  diagonal_direction  <code>vertical</code>  vertical  <code>horizontal</code>  horizontal  <code>diagonalUp</code>  diagonalUp  <code>diagonalDown</code>  diagonalDown  <code>outline</code>  outline  <code>start</code>  start  <code>end</code>  end  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Border/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Border/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBorder()\n</code></pre>"},{"location":"man/Break/","title":"Break","text":"<p>Source code</p>"},{"location":"man/Break/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.pagebreak.html</p>"},{"location":"man/Break/#usage","title":"Usage","text":"<pre><code>Break(id = 0L, min = 0L, max = 16383L, man = TRUE, pt = NULL, ...)\n</code></pre>"},{"location":"man/Break/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>min</code>  min  <code>max</code>  max  <code>man</code>  man  <code>pt</code>  pt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Break/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Break/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBreak()\n</code></pre>"},{"location":"man/BubbleChart/","title":"BubbleChart","text":"<p>Source code</p>"},{"location":"man/BubbleChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.bubble_chart.html</p>"},{"location":"man/BubbleChart/#usage","title":"Usage","text":"<pre><code>BubbleChart(\n  varyColors = NULL,\n  ser = list(),\n  dLbls = NULL,\n  bubble3D = NULL,\n  bubbleScale = NULL,\n  showNegBubbles = NULL,\n  sizeRepresents = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/BubbleChart/#arguments","title":"Arguments","text":"<code>varyColors</code>  varyColors  <code>ser</code>  ser  <code>dLbls</code>  dLbls  <code>bubble3D</code>  bubble3D  <code>bubbleScale</code>  bubbleScale  <code>showNegBubbles</code>  showNegBubbles  <code>sizeRepresents</code>  sizeRepresents  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/BubbleChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/BubbleChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBubbleChart()\n</code></pre>"},{"location":"man/CalcProperties/","title":"CalcProperties","text":"<p>Source code</p>"},{"location":"man/CalcProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.properties.html</p>"},{"location":"man/CalcProperties/#usage","title":"Usage","text":"<pre><code>CalcProperties(\n  calcId = 124519L,\n  calcMode = NULL,\n  fullCalcOnLoad = TRUE,\n  refMode = NULL,\n  iterate = NULL,\n  iterateCount = NULL,\n  iterateDelta = NULL,\n  fullPrecision = NULL,\n  calcCompleted = NULL,\n  calcOnSave = NULL,\n  concurrentCalc = NULL,\n  concurrentManualCount = NULL,\n  forceFullCalc = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/CalcProperties/#arguments","title":"Arguments","text":"<code>calcId</code>  calcId  <code>calcMode</code>  calcMode  <code>fullCalcOnLoad</code>  fullCalcOnLoad  <code>refMode</code>  refMode  <code>iterate</code>  iterate  <code>iterateCount</code>  iterateCount  <code>iterateDelta</code>  iterateDelta  <code>fullPrecision</code>  fullPrecision  <code>calcCompleted</code>  calcCompleted  <code>calcOnSave</code>  calcOnSave  <code>concurrentCalc</code>  concurrentCalc  <code>concurrentManualCount</code>  concurrentManualCount  <code>forceFullCalc</code>  forceFullCalc  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CalcProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CalcProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCalcProperties()\n</code></pre>"},{"location":"man/Camera/","title":"Camera","text":"<p>Source code</p>"},{"location":"man/Camera/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Camera/#usage","title":"Usage","text":"<pre><code>Camera(prst = NULL, fov = NULL, zoom = NULL, rot = NULL, ...)\n</code></pre>"},{"location":"man/Camera/#arguments","title":"Arguments","text":"<code>prst</code>  prst  <code>fov</code>  fov  <code>zoom</code>  zoom  <code>rot</code>  rot  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Camera/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Camera/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCamera(prst = \"perspectiveLeft\")\n</code></pre>"},{"location":"man/Cell/","title":"Cell","text":"<p>Source code</p>"},{"location":"man/Cell/#description","title":"Description","text":"<p>Describes cell associated properties.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.cell.html</p>"},{"location":"man/Cell/#usage","title":"Usage","text":"<pre><code>Cell(\n  worksheet,\n  row = NULL,\n  column = NULL,\n  value = NULL,\n  style_array = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Cell/#arguments","title":"Arguments","text":"<code>worksheet</code>  worksheet  <code>row</code>  row  <code>column</code>  column  <code>value</code>  value  <code>style_array</code>  style_array  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Cell/#details","title":"Details","text":"<p>Properties of interest include style, type, value, and address.</p>"},{"location":"man/Cell/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Cell/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws &lt;- ws$active\nCell(worksheet = ws, row = 1L, column = 1L)\n</code></pre>"},{"location":"man/CellIsRule/","title":"CellIsRule","text":"<p>Source code</p>"},{"location":"man/CellIsRule/#description","title":"Description","text":"<p>Conditional formatting rule based on cell contents.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/CellIsRule/#usage","title":"Usage","text":"<pre><code>CellIsRule(\n  operator = NULL,\n  formula = list(),\n  stopIfTrue = NULL,\n  font = NULL,\n  border = NULL,\n  fill = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/CellIsRule/#arguments","title":"Arguments","text":"<code>operator</code>  operator  <code>formula</code>  formula as list  <code>stopIfTrue</code>  stopIfTrue  <code>font</code>  font  <code>border</code>  border  <code>fill</code>  fill  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellIsRule/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellIsRule/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellIsRule(operator = \"equal\")\n</code></pre>"},{"location":"man/CellRange/","title":"CellRange","text":"<p>Source code</p>"},{"location":"man/CellRange/#description","title":"Description","text":"<p>Represents a range in a sheet: title and coordinates.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.cell_range.html</p>"},{"location":"man/CellRange/#usage","title":"Usage","text":"<pre><code>CellRange(\n  range_string = NULL,\n  min_col = NULL,\n  min_row = NULL,\n  max_col = NULL,\n  max_row = NULL,\n  title = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/CellRange/#arguments","title":"Arguments","text":"<code>range_string</code>  range_string  <code>min_col</code>  min_col  <code>min_row</code>  min_row  <code>max_col</code>  max_col  <code>max_row</code>  max_row  <code>title</code>  title  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellRange/#details","title":"Details","text":"<p>This object is used to perform operations on ranges, like: - shift, expand or shrink - union/intersection with another sheet range, We can check whether a range is: - equal or not equal to another, - disjoint of another, - contained in another. We can get: - the size of a range. - the range bounds (vertices) - the coordinates, - the string representation,</p>"},{"location":"man/CellRange/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellRange/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellRange(range_string = \"A1\")\n</code></pre>"},{"location":"man/CellSmartTag/","title":"CellSmartTag","text":"<p>Source code</p>"},{"location":"man/CellSmartTag/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.smart_tag.html</p>"},{"location":"man/CellSmartTag/#usage","title":"Usage","text":"<pre><code>CellSmartTag(\n  cellSmartTagPr = list(),\n  type = NULL,\n  deleted = FALSE,\n  xmlBased = FALSE,\n  ...\n)\n</code></pre>"},{"location":"man/CellSmartTag/#arguments","title":"Arguments","text":"<code>cellSmartTagPr</code>  cellSmartTagPr  <code>type</code>  type  <code>deleted</code>  deleted  <code>xmlBased</code>  xmlBased  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellSmartTag/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellSmartTag/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellSmartTag(type = 1L)\n</code></pre>"},{"location":"man/CellSmartTagPr/","title":"CellSmartTagPr","text":"<p>Source code</p>"},{"location":"man/CellSmartTagPr/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.smart_tag.html</p>"},{"location":"man/CellSmartTagPr/#usage","title":"Usage","text":"<pre><code>CellSmartTagPr(key = NULL, val = NULL, ...)\n</code></pre>"},{"location":"man/CellSmartTagPr/#arguments","title":"Arguments","text":"<code>key</code>  key  <code>val</code>  val  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellSmartTagPr/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellSmartTagPr/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellSmartTagPr(key = \"key\", val = \"val\")\n</code></pre>"},{"location":"man/CellSmartTags/","title":"CellSmartTags","text":"<p>Source code</p>"},{"location":"man/CellSmartTags/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.smart_tag.html</p>"},{"location":"man/CellSmartTags/#usage","title":"Usage","text":"<pre><code>CellSmartTags(cellSmartTag = list(), r = NULL, ...)\n</code></pre>"},{"location":"man/CellSmartTags/#arguments","title":"Arguments","text":"<code>cellSmartTag</code>  cellSmartTag  <code>r</code>  r  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellSmartTags/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellSmartTags/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellSmartTags(cellSmartTag = list(), r = \"r\")\n</code></pre>"},{"location":"man/CellStyle/","title":"CellStyle","text":"<p>Source code</p>"},{"location":"man/CellStyle/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.cell_style.html</p>"},{"location":"man/CellStyle/#usage","title":"Usage","text":"<pre><code>CellStyle(\n  numFmtId = 0L,\n  fontId = 0L,\n  fillId = 0L,\n  borderId = 0L,\n  xfId = NULL,\n  quotePrefix = NULL,\n  pivotButton = NULL,\n  applyNumberFormat = NULL,\n  applyFont = NULL,\n  applyFill = NULL,\n  applyBorder = NULL,\n  applyAlignment = NULL,\n  applyProtection = NULL,\n  alignment = NULL,\n  protection = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/CellStyle/#arguments","title":"Arguments","text":"<code>numFmtId</code>  numFmtId  <code>fontId</code>  fontId  <code>fillId</code>  fillId  <code>borderId</code>  borderId  <code>xfId</code>  xfId  <code>quotePrefix</code>  quotePrefix  <code>pivotButton</code>  pivotButton  <code>applyNumberFormat</code>  applyNumberFormat  <code>applyFont</code>  applyFont  <code>applyFill</code>  applyFill  <code>applyBorder</code>  applyBorder  <code>applyAlignment</code>  applyAlignment  <code>applyProtection</code>  applyProtection  <code>alignment</code>  alignment  <code>protection</code>  protection  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellStyle/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellStyle/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellStyle()\n</code></pre>"},{"location":"man/CellStyleList/","title":"CellStyleList","text":"<p>Source code</p>"},{"location":"man/CellStyleList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.cell_style.html</p>"},{"location":"man/CellStyleList/#usage","title":"Usage","text":"<pre><code>CellStyleList(count = NULL, xf = list(), ...)\n</code></pre>"},{"location":"man/CellStyleList/#arguments","title":"Arguments","text":"<code>count</code>  count  <code>xf</code>  xf  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellStyleList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellStyleList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellStyleList()\n</code></pre>"},{"location":"man/CellWatch/","title":"CellWatch","text":"<p>Source code</p>"},{"location":"man/CellWatch/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.cell_watch.html</p>"},{"location":"man/CellWatch/#usage","title":"Usage","text":"<pre><code>CellWatch(r = NULL, ...)\n</code></pre>"},{"location":"man/CellWatch/#arguments","title":"Arguments","text":"<code>r</code>  r  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellWatch/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellWatch/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellWatch(r = \"r\")\n</code></pre>"},{"location":"man/CellWatches/","title":"CellWatches","text":"<p>Source code</p>"},{"location":"man/CellWatches/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.cell_watch.html</p>"},{"location":"man/CellWatches/#usage","title":"Usage","text":"<pre><code>CellWatches(cellWatch = list(), ...)\n</code></pre>"},{"location":"man/CellWatches/#arguments","title":"Arguments","text":"<code>cellWatch</code>  cellWatch  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CellWatches/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CellWatches/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCellWatches()\n</code></pre>"},{"location":"man/CharacterProperties/","title":"CharacterProperties","text":"<p>Source code</p>"},{"location":"man/CharacterProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/CharacterProperties/#usage","title":"Usage","text":"<pre><code>CharacterProperties(\n  kumimoji = NULL,\n  lang = NULL,\n  altLang = NULL,\n  sz = NULL,\n  b = NULL,\n  i = NULL,\n  u = NULL,\n  strike = NULL,\n  kern = NULL,\n  cap = NULL,\n  spc = NULL,\n  normalizeH = NULL,\n  baseline = NULL,\n  noProof = NULL,\n  dirty = NULL,\n  err = NULL,\n  smtClean = NULL,\n  smtId = NULL,\n  bmk = NULL,\n  ln = NULL,\n  highlight = NULL,\n  latin = NULL,\n  ea = NULL,\n  cs = NULL,\n  sym = NULL,\n  hlinkClick = NULL,\n  hlinkMouseOver = NULL,\n  rtl = NULL,\n  extLst = NULL,\n  noFill = NULL,\n  solidFill = NULL,\n  gradFill = NULL,\n  blipFill = NULL,\n  pattFill = NULL,\n  grpFill = NULL,\n  effectLst = NULL,\n  effectDag = NULL,\n  uLnTx = NULL,\n  uLn = NULL,\n  uFillTx = NULL,\n  uFill = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/CharacterProperties/#arguments","title":"Arguments","text":"<code>kumimoji</code>  kumimoji  <code>lang</code>  lang  <code>altLang</code>  altLang  <code>sz</code>  sz  <code>b</code>  b  <code>i</code>  i  <code>u</code>  u  <code>strike</code>  strike  <code>kern</code>  kern  <code>cap</code>  cap  <code>spc</code>  spc  <code>normalizeH</code>  normalizeH  <code>baseline</code>  baseline  <code>noProof</code>  noProof  <code>dirty</code>  dirty  <code>err</code>  err  <code>smtClean</code>  smtClean  <code>smtId</code>  smtId  <code>bmk</code>  bmk  <code>ln</code>  ln  <code>highlight</code>  highlight  <code>latin</code>  latin  <code>ea</code>  ea  <code>cs</code>  cs  <code>sym</code>  sym  <code>hlinkClick</code>  hlinkClick  <code>hlinkMouseOver</code>  hlinkMouseOver  <code>rtl</code>  rtl  <code>extLst</code>  extLst  <code>noFill</code>  noFill  <code>solidFill</code>  solidFill  <code>gradFill</code>  gradFill  <code>blipFill</code>  blipFill  <code>pattFill</code>  pattFill  <code>grpFill</code>  grpFill  <code>effectLst</code>  effectLst  <code>effectDag</code>  effectDag  <code>uLnTx</code>  uLnTx  <code>uLn</code>  uLn  <code>uFillTx</code>  uFillTx  <code>uFill</code>  uFill  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CharacterProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CharacterProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCharacterProperties()\n</code></pre>"},{"location":"man/ChartContainer/","title":"ChartContainer","text":"<p>Source code</p>"},{"location":"man/ChartContainer/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.chartspace.html</p>"},{"location":"man/ChartContainer/#usage","title":"Usage","text":"<pre><code>ChartContainer(\n  title = NULL,\n  autoTitleDeleted = NULL,\n  pivotFmts = list(),\n  view3D = NULL,\n  floor = NULL,\n  sideWall = NULL,\n  backWall = NULL,\n  plotArea = NULL,\n  legend = NULL,\n  plotVisOnly = TRUE,\n  dispBlanksAs = \"gap\",\n  showDLblsOverMax = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ChartContainer/#arguments","title":"Arguments","text":"<code>title</code>  title  <code>autoTitleDeleted</code>  autoTitleDeleted  <code>pivotFmts</code>  pivotFmts  <code>view3D</code>  view3D  <code>floor</code>  floor  <code>sideWall</code>  sideWall  <code>backWall</code>  backWall  <code>plotArea</code>  plotArea  <code>legend</code>  legend  <code>plotVisOnly</code>  plotVisOnly  <code>dispBlanksAs</code>  dispBlanksAs  <code>showDLblsOverMax</code>  showDLblsOverMax  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ChartContainer/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ChartContainer/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartContainer()\n</code></pre>"},{"location":"man/ChartLines/","title":"ChartLines","text":"<p>Source code</p>"},{"location":"man/ChartLines/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.axis.html</p>"},{"location":"man/ChartLines/#usage","title":"Usage","text":"<pre><code>ChartLines(spPr = NULL, ...)\n</code></pre>"},{"location":"man/ChartLines/#arguments","title":"Arguments","text":"<code>spPr</code>  spPr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ChartLines/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ChartLines/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartLines()\n</code></pre>"},{"location":"man/ChartRelation/","title":"ChartRelation","text":"<p>Source code</p>"},{"location":"man/ChartRelation/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.relation.html</p>"},{"location":"man/ChartRelation/#usage","title":"Usage","text":"<pre><code>ChartRelation(id, ...)\n</code></pre>"},{"location":"man/ChartRelation/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ChartRelation/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ChartRelation/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartRelation(id = \"id\")\n</code></pre>"},{"location":"man/ChartSpace/","title":"ChartSpace","text":"<p>Source code</p>"},{"location":"man/ChartSpace/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.chartspace.html</p>"},{"location":"man/ChartSpace/#usage","title":"Usage","text":"<pre><code>ChartSpace(\n  date1904 = NULL,\n  lang = NULL,\n  roundedCorners = NULL,\n  style = NULL,\n  clrMapOvr = NULL,\n  pivotSource = NULL,\n  protection = NULL,\n  chart = NULL,\n  spPr = NULL,\n  txPr = NULL,\n  externalData = NULL,\n  printSettings = NULL,\n  userShapes = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ChartSpace/#arguments","title":"Arguments","text":"<code>date1904</code>  date1904  <code>lang</code>  lang  <code>roundedCorners</code>  roundedCorners  <code>style</code>  style  <code>clrMapOvr</code>  clrMapOvr  <code>pivotSource</code>  pivotSource  <code>protection</code>  protection  <code>chart</code>  chart  <code>spPr</code>  spPr  <code>txPr</code>  txPr  <code>externalData</code>  externalData  <code>printSettings</code>  printSettings  <code>userShapes</code>  userShapes  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ChartSpace/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ChartSpace/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartSpace(chart = ChartContainer())\n</code></pre>"},{"location":"man/Chartsheet/","title":"Chartsheet","text":"<p>Source code</p>"},{"location":"man/Chartsheet/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chartsheet.chartsheet.html</p>"},{"location":"man/Chartsheet/#usage","title":"Usage","text":"<pre><code>Chartsheet(\n  sheetPr = NULL,\n  sheetViews = NULL,\n  sheetProtection = NULL,\n  customSheetViews = NULL,\n  pageMargins = NULL,\n  pageSetup = NULL,\n  headerFooter = NULL,\n  drawing = NULL,\n  drawingHF = NULL,\n  picture = NULL,\n  webPublishItems = NULL,\n  extLst = NULL,\n  parent = NULL,\n  title = \"\",\n  sheet_state = \"visible\",\n  ...\n)\n</code></pre>"},{"location":"man/Chartsheet/#arguments","title":"Arguments","text":"<code>sheetPr</code>  sheetPr  <code>sheetViews</code>  sheetViews  <code>sheetProtection</code>  sheetProtection  <code>customSheetViews</code>  customSheetViews  <code>pageMargins</code>  pageMargins  <code>pageSetup</code>  pageSetup  <code>headerFooter</code>  headerFooter  <code>drawing</code>  drawing  <code>drawingHF</code>  drawingHF  <code>picture</code>  picture  <code>webPublishItems</code>  webPublishItems  <code>extLst</code>  extLst  <code>parent</code>  parent  <code>title</code>  title  <code>sheet_state</code>  sheet_state  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Chartsheet/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Chartsheet/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartsheet()\n</code></pre>"},{"location":"man/ChartsheetProperties/","title":"ChartsheetProperties","text":"<p>Source code</p>"},{"location":"man/ChartsheetProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chartsheet.properties.html</p>"},{"location":"man/ChartsheetProperties/#usage","title":"Usage","text":"<pre><code>ChartsheetProperties(published = NULL, codeName = NULL, tabColor = NULL, ...)\n</code></pre>"},{"location":"man/ChartsheetProperties/#arguments","title":"Arguments","text":"<code>published</code>  published  <code>codeName</code>  codeName  <code>tabColor</code>  tabColor  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ChartsheetProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ChartsheetProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartsheetProperties()\n</code></pre>"},{"location":"man/ChartsheetProtection/","title":"ChartsheetProtection","text":"<p>Source code</p>"},{"location":"man/ChartsheetProtection/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chartsheet.protection.html</p>"},{"location":"man/ChartsheetProtection/#usage","title":"Usage","text":"<pre><code>ChartsheetProtection(\n  content = NULL,\n  objects = NULL,\n  hashValue = NULL,\n  spinCount = NULL,\n  saltValue = NULL,\n  algorithmName = NULL,\n  password = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ChartsheetProtection/#arguments","title":"Arguments","text":"<code>content</code>  content  <code>objects</code>  objects  <code>hashValue</code>  hashValue  <code>spinCount</code>  spinCount  <code>saltValue</code>  saltValue  <code>algorithmName</code>  algorithmName  <code>password</code>  password  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ChartsheetProtection/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ChartsheetProtection/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartsheetProtection()\n</code></pre>"},{"location":"man/ChartsheetView/","title":"ChartsheetView","text":"<p>Source code</p>"},{"location":"man/ChartsheetView/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chartsheet.views.html</p>"},{"location":"man/ChartsheetView/#usage","title":"Usage","text":"<pre><code>ChartsheetView(\n  tabSelected = NULL,\n  zoomScale = NULL,\n  workbookViewId = 0L,\n  zoomToFit = TRUE,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ChartsheetView/#arguments","title":"Arguments","text":"<code>tabSelected</code>  tabSelected  <code>zoomScale</code>  zoomScale  <code>workbookViewId</code>  workbookViewId  <code>zoomToFit</code>  zoomToFit  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ChartsheetView/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ChartsheetView/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartsheetView()\n</code></pre>"},{"location":"man/ChartsheetViewList/","title":"ChartsheetViewList","text":"<p>Source code</p>"},{"location":"man/ChartsheetViewList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chartsheet.views.html</p>"},{"location":"man/ChartsheetViewList/#usage","title":"Usage","text":"<pre><code>ChartsheetViewList(sheetView = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/ChartsheetViewList/#arguments","title":"Arguments","text":"<code>sheetView</code>  sheetView  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ChartsheetViewList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ChartsheetViewList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nChartsheetViewList()\n</code></pre>"},{"location":"man/ColBreak/","title":"ColBreak","text":"<p>Source code</p>"},{"location":"man/ColBreak/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.pagebreak.html</p>"},{"location":"man/ColBreak/#usage","title":"Usage","text":"<pre><code>ColBreak(count = NULL, manualBreakCount = NULL, brk = list(), ...)\n</code></pre>"},{"location":"man/ColBreak/#arguments","title":"Arguments","text":"<code>count</code>  count  <code>manualBreakCount</code>  manualBreakCount  <code>brk</code>  brk  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColBreak/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColBreak/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColBreak()\n</code></pre>"},{"location":"man/ColRange/","title":"ColRange","text":"<p>Source code</p>"},{"location":"man/ColRange/#description","title":"Description","text":"<p>Represent a range of at least one column</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.print_settings.html</p>"},{"location":"man/ColRange/#usage","title":"Usage","text":"<pre><code>ColRange(range_string = NULL, min_col = NULL, max_col = NULL, ...)\n</code></pre>"},{"location":"man/ColRange/#arguments","title":"Arguments","text":"<code>range_string</code>  range_string  <code>min_col</code>  min_col  <code>max_col</code>  max_col  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColRange/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColRange/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColRange(range_string = \"A:B\")\n</code></pre>"},{"location":"man/Color/","title":"Color","text":"<p>Source code</p>"},{"location":"man/Color/#description","title":"Description","text":"<p>Named colors for use in styles.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.colors.html</p>"},{"location":"man/Color/#usage","title":"Usage","text":"<pre><code>Color(\n  rgb = \"00000000\",\n  indexed = NULL,\n  auto = NULL,\n  theme = NULL,\n  tint = 0,\n  index = NULL,\n  type = \"rgb\",\n  ...\n)\n</code></pre>"},{"location":"man/Color/#arguments","title":"Arguments","text":"<code>rgb</code>  rgb  <code>indexed</code>  indexed  <code>auto</code>  auto  <code>theme</code>  theme  <code>tint</code>  tint  <code>index</code>  index  <code>type</code>  type  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Color/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Color/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColor()\n</code></pre>"},{"location":"man/ColorChangeEffect/","title":"ColorChangeEffect","text":"<p>Source code</p>"},{"location":"man/ColorChangeEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/ColorChangeEffect/#usage","title":"Usage","text":"<pre><code>ColorChangeEffect(useA = NULL, clrFrom = NULL, clrTo = NULL, ...)\n</code></pre>"},{"location":"man/ColorChangeEffect/#arguments","title":"Arguments","text":"<code>useA</code>  useA  <code>clrFrom</code>  clrFrom  <code>clrTo</code>  clrTo  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColorChangeEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColorChangeEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\n# issue using xlcharts::Color() function as built from\n# class 'openpyxl.styles.colors.Color' while\n# ColorChangeEffect() arguments require 'openpyxl.drawing.effect.Color'\nopenpyxl &lt;- reticulate::import(\"openpyxl\")\nColorChangeEffect(\n  clrFrom = openpyxl$drawing$effect$Color(),\n  clrTo = openpyxl$drawing$effect$Color()\n)\n</code></pre>"},{"location":"man/ColorChoice/","title":"ColorChoice","text":"<p>Source code</p>"},{"location":"man/ColorChoice/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.colors.html</p>"},{"location":"man/ColorChoice/#usage","title":"Usage","text":"<pre><code>ColorChoice(\n  scrgbClr = NULL,\n  srgbClr = NULL,\n  hslClr = NULL,\n  sysClr = NULL,\n  schemeClr = NULL,\n  prstClr = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ColorChoice/#arguments","title":"Arguments","text":"<code>scrgbClr</code>  scrgbClr  <code>srgbClr</code>  srgbClr  <code>hslClr</code>  hslClr  <code>sysClr</code>  sysClr  <code>schemeClr</code>  schemeClr  <code>prstClr</code>  prstClr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColorChoice/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColorChoice/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColorChoice()\n</code></pre>"},{"location":"man/ColorFilter/","title":"ColorFilter","text":"<p>Source code</p>"},{"location":"man/ColorFilter/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/ColorFilter/#usage","title":"Usage","text":"<pre><code>ColorFilter(dxfId = NULL, cellColor = NULL, ...)\n</code></pre>"},{"location":"man/ColorFilter/#arguments","title":"Arguments","text":"<code>dxfId</code>  dxfId  <code>cellColor</code>  cellColor  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColorFilter/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColorFilter/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColorFilter()\n</code></pre>"},{"location":"man/ColorList/","title":"ColorList","text":"<p>Source code</p>"},{"location":"man/ColorList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.colors.html</p>"},{"location":"man/ColorList/#usage","title":"Usage","text":"<pre><code>ColorList(indexedColors = list(), mruColors = list(), ...)\n</code></pre>"},{"location":"man/ColorList/#arguments","title":"Arguments","text":"<code>indexedColors</code>  indexedColors  <code>mruColors</code>  mruColors  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColorList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColorList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColorList()\n</code></pre>"},{"location":"man/ColorMapping/","title":"ColorMapping","text":"<p>Source code</p>"},{"location":"man/ColorMapping/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.colors.html</p>"},{"location":"man/ColorMapping/#usage","title":"Usage","text":"<pre><code>ColorMapping(\n  bg1 = \"lt1\",\n  tx1 = \"dk1\",\n  bg2 = \"lt2\",\n  tx2 = \"dk2\",\n  accent1 = \"accent1\",\n  accent2 = \"accent2\",\n  accent3 = \"accent3\",\n  accent4 = \"accent4\",\n  accent5 = \"accent5\",\n  accent6 = \"accent6\",\n  hlink = \"hlink\",\n  folHlink = \"folHlink\",\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ColorMapping/#arguments","title":"Arguments","text":"<code>bg1</code>  bg1  <code>tx1</code>  tx1  <code>bg2</code>  bg2  <code>tx2</code>  tx2  <code>accent1</code>  accent1  <code>accent2</code>  accent2  <code>accent3</code>  accent3  <code>accent4</code>  accent4  <code>accent5</code>  accent5  <code>accent6</code>  accent6  <code>hlink</code>  hlink  <code>folHlink</code>  folHlink  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColorMapping/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColorMapping/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColorMapping()\n</code></pre>"},{"location":"man/ColorReplaceEffect/","title":"ColorReplaceEffect","text":"<p>Source code</p>"},{"location":"man/ColorReplaceEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/ColorReplaceEffect/#usage","title":"Usage","text":"<pre><code>ColorReplaceEffect(...)\n</code></pre>"},{"location":"man/ColorReplaceEffect/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColorReplaceEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColorReplaceEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColorReplaceEffect()\n</code></pre>"},{"location":"man/ColorScale/","title":"ColorScale","text":"<p>Source code</p>"},{"location":"man/ColorScale/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/ColorScale/#usage","title":"Usage","text":"<pre><code>ColorScale(cfvo = NULL, color = NULL, ...)\n</code></pre>"},{"location":"man/ColorScale/#arguments","title":"Arguments","text":"<code>cfvo</code>  cfvo  <code>color</code>  color  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColorScale/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColorScale/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nfirst &lt;- FormatObject(type = 'min')\nlast &lt;- FormatObject(type = 'max')\n# colors match the format objects:\ncolors &lt;- list(Color('AA0000'), Color('00AA00'))\ncs2 &lt;- ColorScale(cfvo = list(first, last), color = colors)\n</code></pre>"},{"location":"man/ColorScaleRule/","title":"ColorScaleRule","text":"<p>Source code</p>"},{"location":"man/ColorScaleRule/#description","title":"Description","text":"<p>Backwards compatibility</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/ColorScaleRule/#usage","title":"Usage","text":"<pre><code>ColorScaleRule(\n  start_type = NULL,\n  start_value = NULL,\n  start_color = NULL,\n  mid_type = NULL,\n  mid_value = NULL,\n  mid_color = NULL,\n  end_type = NULL,\n  end_value = NULL,\n  end_color = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ColorScaleRule/#arguments","title":"Arguments","text":"<code>start_type</code>  start_type  <code>start_value</code>  start_value  <code>start_color</code>  start_color  <code>mid_type</code>  mid_type  <code>mid_value</code>  mid_value  <code>mid_color</code>  mid_color  <code>end_type</code>  end_type  <code>end_value</code>  end_value  <code>end_color</code>  end_color  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColorScaleRule/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColorScaleRule/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nColorScaleRule(\nstart_type='percentile', start_value=10, start_color='FFAA0000',\nmid_type='percentile', mid_value=50, mid_color='FF0000AA',\nend_type='percentile', end_value=90, end_color='FF00AA00')\n</code></pre>"},{"location":"man/ColumnDimension/","title":"ColumnDimension","text":"<p>Source code</p>"},{"location":"man/ColumnDimension/#description","title":"Description","text":"<p>Information about the display properties of a column.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.dimensions.html</p>"},{"location":"man/ColumnDimension/#usage","title":"Usage","text":"<pre><code>ColumnDimension(\n  worksheet,\n  index = \"A\",\n  width = 13L,\n  bestFit = FALSE,\n  hidden = FALSE,\n  outlineLevel = 0L,\n  outline_level = NULL,\n  collapsed = FALSE,\n  style = NULL,\n  min = NULL,\n  max = NULL,\n  customWidth = FALSE,\n  visible = NULL,\n  auto_size = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ColumnDimension/#arguments","title":"Arguments","text":"<code>worksheet</code>  worksheet  <code>index</code>  index  <code>width</code>  width  <code>bestFit</code>  bestFit  <code>hidden</code>  hidden  <code>outlineLevel</code>  outlineLevel  <code>outline_level</code>  outline_level  <code>collapsed</code>  collapsed  <code>style</code>  style  <code>min</code>  min  <code>max</code>  max  <code>customWidth</code>  customWidth  <code>visible</code>  visible  <code>auto_size</code>  auto_size  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ColumnDimension/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ColumnDimension/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws &lt;- wb$active\nColumnDimension(worksheet = ws)\n</code></pre>"},{"location":"man/Comment/","title":"Comment","text":"<p>Source code</p>"},{"location":"man/Comment/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.comments.comments.html</p>"},{"location":"man/Comment/#usage","title":"Usage","text":"<pre><code>Comment(text, author, height = 79L, width = 144L, ...)\n</code></pre>"},{"location":"man/Comment/#arguments","title":"Arguments","text":"<code>text</code>  text  <code>author</code>  author  <code>height</code>  height  <code>width</code>  width  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Comment/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Comment/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nComment(text = \"text\", author = \"author\")\n</code></pre>"},{"location":"man/CommentRecord/","title":"CommentRecord","text":"<p>Source code</p>"},{"location":"man/CommentRecord/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.comments.comment_sheet.html</p>"},{"location":"man/CommentRecord/#usage","title":"Usage","text":"<pre><code>CommentRecord(\n  ref = \"\",\n  authorId = 0L,\n  guid = NULL,\n  shapeId = 0L,\n  text = NULL,\n  commentPr = NULL,\n  author = NULL,\n  height = 79L,\n  width = 144L,\n  ...\n)\n</code></pre>"},{"location":"man/CommentRecord/#arguments","title":"Arguments","text":"<code>ref</code>  ref  <code>authorId</code>  authorId  <code>guid</code>  guid  <code>shapeId</code>  shapeId  <code>text</code>  text  <code>commentPr</code>  commentPr  <code>author</code>  author  <code>height</code>  height  <code>width</code>  width  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CommentRecord/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CommentRecord/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCommentRecord()\n</code></pre>"},{"location":"man/CommentSheet/","title":"CommentSheet","text":"<p>Source code</p>"},{"location":"man/CommentSheet/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.comments.comment_sheet.html</p>"},{"location":"man/CommentSheet/#usage","title":"Usage","text":"<pre><code>CommentSheet(authors = NULL, commentList = list(), extLst = NULL, ...)\n</code></pre>"},{"location":"man/CommentSheet/#arguments","title":"Arguments","text":"<code>authors</code>  authors  <code>commentList</code>  commentList  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CommentSheet/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CommentSheet/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCommentSheet(\n  authors = AuthorList(author = c(\"author1\", \"author2\"))\n)\n</code></pre>"},{"location":"man/ConditionalFormatting/","title":"ConditionalFormatting","text":"<p>Source code</p>"},{"location":"man/ConditionalFormatting/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.formatting.html</p>"},{"location":"man/ConditionalFormatting/#usage","title":"Usage","text":"<pre><code>ConditionalFormatting(\n  sqref = list(),\n  pivot = NULL,\n  cfRule = list(),\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ConditionalFormatting/#arguments","title":"Arguments","text":"<code>sqref</code>  sqref  <code>pivot</code>  pivot  <code>cfRule</code>  cfRule  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ConditionalFormatting/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ConditionalFormatting/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nConditionalFormatting()\n</code></pre>"},{"location":"man/ConditionalFormattingList/","title":"ConditionalFormattingList","text":"<p>Source code</p>"},{"location":"man/ConditionalFormattingList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.formatting.html</p>"},{"location":"man/ConditionalFormattingList/#usage","title":"Usage","text":"<pre><code>ConditionalFormattingList(...)\n</code></pre>"},{"location":"man/ConditionalFormattingList/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ConditionalFormattingList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ConditionalFormattingList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nConditionalFormattingList()\n</code></pre>"},{"location":"man/Connection/","title":"Connection","text":"<p>Source code</p>"},{"location":"man/Connection/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.connector.html</p>"},{"location":"man/Connection/#usage","title":"Usage","text":"<pre><code>Connection(id = NULL, idx = NULL, ...)\n</code></pre>"},{"location":"man/Connection/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>idx</code>  idx  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Connection/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Connection/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nConnection(id = 1L, idx = 1L)\n</code></pre>"},{"location":"man/ConnectionSite/","title":"ConnectionSite","text":"<p>Source code</p>"},{"location":"man/ConnectionSite/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/ConnectionSite/#usage","title":"Usage","text":"<pre><code>ConnectionSite(ang = NULL, pos = NULL, ...)\n</code></pre>"},{"location":"man/ConnectionSite/#arguments","title":"Arguments","text":"<code>ang</code>  ang  <code>pos</code>  pos  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ConnectionSite/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ConnectionSite/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nConnectionSite(ang = 1.5, pos = AdjPoint2D(x = 1L, y = 2L))\n</code></pre>"},{"location":"man/ConnectionSiteList/","title":"ConnectionSiteList","text":"<p>Source code</p>"},{"location":"man/ConnectionSiteList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/ConnectionSiteList/#usage","title":"Usage","text":"<pre><code>ConnectionSiteList(cxn = NULL, ...)\n</code></pre>"},{"location":"man/ConnectionSiteList/#arguments","title":"Arguments","text":"<code>cxn</code>  cxn  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ConnectionSiteList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ConnectionSiteList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nConnectionSiteList()\n</code></pre>"},{"location":"man/ConnectorLocking/","title":"ConnectorLocking","text":"<p>Source code</p>"},{"location":"man/ConnectorLocking/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.connector.html</p>"},{"location":"man/ConnectorLocking/#usage","title":"Usage","text":"<pre><code>ConnectorLocking(extLst = NULL, ...)\n</code></pre>"},{"location":"man/ConnectorLocking/#arguments","title":"Arguments","text":"<code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ConnectorLocking/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ConnectorLocking/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nConnectorLocking()\n</code></pre>"},{"location":"man/Control/","title":"Control","text":"<p>Source code</p>"},{"location":"man/Control/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.controls.html</p>"},{"location":"man/Control/#usage","title":"Usage","text":"<pre><code>Control(controlPr = NULL, shapeId = NULL, name = NULL, ...)\n</code></pre>"},{"location":"man/Control/#arguments","title":"Arguments","text":"<code>controlPr</code>  controlPr  <code>shapeId</code>  shapeId  <code>name</code>  name  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Control/#value","title":"Value","text":"<p>An openpyxl Python object.</p> <p>An openpyxl Python object.</p>"},{"location":"man/Control/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nControl(\n  controlPr = ControlProperty(\n    anchor = ObjectAnchor(from = AnchorMarker(), to = AnchorMarker())\n    ),\n  shapeId = 1L\n)\n</code></pre>"},{"location":"man/ControlProperty/","title":"ControlProperty","text":"<p>Source code</p>"},{"location":"man/ControlProperty/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.controls.html</p>"},{"location":"man/ControlProperty/#usage","title":"Usage","text":"<pre><code>ControlProperty(\n  anchor = NULL,\n  locked = TRUE,\n  defaultSize = TRUE,\n  print = TRUE,\n  disabled = FALSE,\n  recalcAlways = FALSE,\n  uiObject = FALSE,\n  autoFill = TRUE,\n  autoLine = TRUE,\n  autoPict = TRUE,\n  macro = NULL,\n  altText = NULL,\n  linkedCell = NULL,\n  listFillRange = NULL,\n  cf = \"pict\",\n  id = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ControlProperty/#arguments","title":"Arguments","text":"<code>anchor</code>  anchor  <code>locked</code>  locked  <code>defaultSize</code>  defaultSize  <code>print</code>  \\_print  <code>disabled</code>  disabled  <code>recalcAlways</code>  recalcAlways  <code>uiObject</code>  uiObject  <code>autoFill</code>  autoFill  <code>autoLine</code>  autoLine  <code>autoPict</code>  autoPict  <code>macro</code>  macro  <code>altText</code>  altText  <code>linkedCell</code>  linkedCell  <code>listFillRange</code>  listFillRange  <code>cf</code>  cf  <code>id</code>  id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ControlProperty/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ControlProperty/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nControlProperty(\n  anchor = ObjectAnchor(from = AnchorMarker(), to = AnchorMarker())\n)\n</code></pre>"},{"location":"man/Controls/","title":"Controls","text":"<p>Source code</p>"},{"location":"man/Controls/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.controls.html</p>"},{"location":"man/Controls/#usage","title":"Usage","text":"<pre><code>Controls(control = list(), ...)\n</code></pre>"},{"location":"man/Controls/#arguments","title":"Arguments","text":"<code>control</code>  control  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Controls/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Controls/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nControls()\n</code></pre>"},{"location":"man/CustomFilter/","title":"CustomFilter","text":"<p>Source code</p>"},{"location":"man/CustomFilter/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/CustomFilter/#usage","title":"Usage","text":"<pre><code>CustomFilter(operator = NULL, val = NULL, ...)\n</code></pre>"},{"location":"man/CustomFilter/#arguments","title":"Arguments","text":"<code>operator</code>  operator  <code>val</code>  val  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CustomFilter/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CustomFilter/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCustomFilter(operator = \"equal\", val = 1L)\n</code></pre>"},{"location":"man/CustomFilters/","title":"CustomFilters","text":"<p>Source code</p>"},{"location":"man/CustomFilters/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/CustomFilters/#usage","title":"Usage","text":"<pre><code>CustomFilters(and = FALSE, customFilter = list(), ...)\n</code></pre>"},{"location":"man/CustomFilters/#arguments","title":"Arguments","text":"<code>and</code>  \\_and  <code>customFilter</code>  customFilter  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CustomFilters/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CustomFilters/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCustomFilters()\n</code></pre>"},{"location":"man/CustomGeometry2D/","title":"CustomGeometry2D","text":"<p>Source code</p>"},{"location":"man/CustomGeometry2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/CustomGeometry2D/#usage","title":"Usage","text":"<pre><code>CustomGeometry2D(\n  avLst = NULL,\n  gdLst = NULL,\n  ahLst = NULL,\n  cxnLst = NULL,\n  rect = NULL,\n  pathLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/CustomGeometry2D/#arguments","title":"Arguments","text":"<code>avLst</code>  avLst  <code>gdLst</code>  gdLst  <code>ahLst</code>  ahLst  <code>cxnLst</code>  cxnLst  <code>rect</code>  rect  <code>pathLst</code>  pathLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CustomGeometry2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CustomGeometry2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCustomGeometry2D(pathLst = Path2DList())\n</code></pre>"},{"location":"man/CustomProperties/","title":"CustomProperties","text":"<p>Source code</p>"},{"location":"man/CustomProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.custom.html</p>"},{"location":"man/CustomProperties/#usage","title":"Usage","text":"<pre><code>CustomProperties(customPr = list(), ...)\n</code></pre>"},{"location":"man/CustomProperties/#arguments","title":"Arguments","text":"<code>customPr</code>  customPr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CustomProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CustomProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCustomProperties()\n</code></pre>"},{"location":"man/CustomProperty/","title":"CustomProperty","text":"<p>Source code</p>"},{"location":"man/CustomProperty/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.custom.html</p>"},{"location":"man/CustomProperty/#usage","title":"Usage","text":"<pre><code>CustomProperty(name = NULL, ...)\n</code></pre>"},{"location":"man/CustomProperty/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CustomProperty/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CustomProperty/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCustomProperty(name = \"name\")\n</code></pre>"},{"location":"man/CustomSplit/","title":"CustomSplit","text":"<p>Source code</p>"},{"location":"man/CustomSplit/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.pie_chart.html</p>"},{"location":"man/CustomSplit/#usage","title":"Usage","text":"<pre><code>CustomSplit(secondPiePt = list(), ...)\n</code></pre>"},{"location":"man/CustomSplit/#arguments","title":"Arguments","text":"<code>secondPiePt</code>  secondPiePt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/CustomSplit/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/CustomSplit/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nCustomSplit()\n</code></pre>"},{"location":"man/DashStop/","title":"DashStop","text":"<p>Source code</p>"},{"location":"man/DashStop/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.line.html</p>"},{"location":"man/DashStop/#usage","title":"Usage","text":"<pre><code>DashStop(d = 0L, sp = 0L, ...)\n</code></pre>"},{"location":"man/DashStop/#arguments","title":"Arguments","text":"<code>d</code>  d  <code>sp</code>  sp  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DashStop/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DashStop/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDashStop()\n</code></pre>"},{"location":"man/DashStopList/","title":"DashStopList","text":"<p>Source code</p>"},{"location":"man/DashStopList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.line.html</p>"},{"location":"man/DashStopList/#usage","title":"Usage","text":"<pre><code>DashStopList(ds = list(), ...)\n</code></pre>"},{"location":"man/DashStopList/#arguments","title":"Arguments","text":"<code>ds</code>  ds  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DashStopList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DashStopList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDashStopList()\n</code></pre>"},{"location":"man/DataBar/","title":"DataBar","text":"<p>Source code</p>"},{"location":"man/DataBar/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/DataBar/#usage","title":"Usage","text":"<pre><code>DataBar(\n  minLength = NULL,\n  maxLength = NULL,\n  showValue = NULL,\n  cfvo = NULL,\n  color = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DataBar/#arguments","title":"Arguments","text":"<code>minLength</code>  minLength  <code>maxLength</code>  maxLength  <code>showValue</code>  showValue  <code>cfvo</code>  cfvo  <code>color</code>  color  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DataBar/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataBar/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nfirst &lt;- FormatObject(type='min')\nsecond &lt;- FormatObject(type='max')\nDataBar(cfvo = list(first, second), color = \"638EC6\")\n</code></pre>"},{"location":"man/DataBarRule/","title":"DataBarRule","text":"<p>Source code</p>"},{"location":"man/DataBarRule/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/DataBarRule/#usage","title":"Usage","text":"<pre><code>DataBarRule(\n  start_type = NULL,\n  start_value = NULL,\n  end_type = NULL,\n  end_value = NULL,\n  color = NULL,\n  showValue = NULL,\n  minLength = NULL,\n  maxLength = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DataBarRule/#arguments","title":"Arguments","text":"<code>start_type</code>  start_type  <code>start_value</code>  start_value  <code>end_type</code>  end_type  <code>end_value</code>  end_value  <code>color</code>  color  <code>showValue</code>  showValue  <code>minLength</code>  minLength  <code>maxLength</code>  maxLength  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs"},{"location":"man/DataBarRule/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataBarRule/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDataBarRule(start_type='percentile', start_value=10, end_type='percentile', end_value='90',\ncolor=\"FF638EC6\", showValue= NULL, minLength=NULL, maxLength=NULL)\n</code></pre>"},{"location":"man/DataLabel/","title":"DataLabel","text":"<p>Source code</p>"},{"location":"man/DataLabel/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.label.html</p>"},{"location":"man/DataLabel/#usage","title":"Usage","text":"<pre><code>DataLabel(idx = 0L, ...)\n</code></pre>"},{"location":"man/DataLabel/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DataLabel/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataLabel/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDataLabel()\n</code></pre>"},{"location":"man/DataLabelList/","title":"DataLabelList","text":"<p>Source code</p>"},{"location":"man/DataLabelList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.label.html</p>"},{"location":"man/DataLabelList/#usage","title":"Usage","text":"<pre><code>DataLabelList(dLbl = list(), delete = NULL, ...)\n</code></pre>"},{"location":"man/DataLabelList/#arguments","title":"Arguments","text":"<code>dLbl</code>  dLbl  <code>delete</code>  delete  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DataLabelList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataLabelList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDataLabelList()\n</code></pre>"},{"location":"man/DataPoint/","title":"DataPoint","text":"<p>Source code</p>"},{"location":"man/DataPoint/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.marker.html</p>"},{"location":"man/DataPoint/#usage","title":"Usage","text":"<pre><code>DataPoint(\n  idx = NULL,\n  invertIfNegative = NULL,\n  marker = NULL,\n  bubble3D = NULL,\n  explosion = NULL,\n  spPr = NULL,\n  pictureOptions = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DataPoint/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>invertIfNegative</code>  invertIfNegative  <code>marker</code>  marker  <code>bubble3D</code>  bubble3D  <code>explosion</code>  explosion  <code>spPr</code>  spPr  <code>pictureOptions</code>  pictureOptions  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DataPoint/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataPoint/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDataPoint(idx = 1L)\n</code></pre>"},{"location":"man/DataTable/","title":"DataTable","text":"<p>Source code</p>"},{"location":"man/DataTable/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.plotarea.html</p>"},{"location":"man/DataTable/#usage","title":"Usage","text":"<pre><code>DataTable(\n  showHorzBorder = NULL,\n  showVertBorder = NULL,\n  showOutline = NULL,\n  showKeys = NULL,\n  spPr = NULL,\n  txPr = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DataTable/#arguments","title":"Arguments","text":"<code>showHorzBorder</code>  showHorzBorder  <code>showVertBorder</code>  showVertBorder  <code>showOutline</code>  showOutline  <code>showKeys</code>  showKeys  <code>spPr</code>  spPr  <code>txPr</code>  txPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DataTable/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataTable/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDataTable()\n</code></pre>"},{"location":"man/DataTableFormula/","title":"DataTableFormula","text":"<p>Source code</p>"},{"location":"man/DataTableFormula/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.formula.html</p>"},{"location":"man/DataTableFormula/#usage","title":"Usage","text":"<pre><code>DataTableFormula(\n  ref,\n  ca = FALSE,\n  dt2D = FALSE,\n  dtr = FALSE,\n  r1 = NULL,\n  r2 = NULL,\n  del1 = FALSE,\n  del2 = FALSE,\n  ...\n)\n</code></pre>"},{"location":"man/DataTableFormula/#arguments","title":"Arguments","text":"<code>ref</code>  ref  <code>ca</code>  ca  <code>dt2D</code>  dt2D  <code>dtr</code>  dtr  <code>r1</code>  r1  <code>r2</code>  r2  <code>del1</code>  del1  <code>del2</code>  del2  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DataTableFormula/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataTableFormula/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDataTableFormula(ref = \"A1\")\n</code></pre>"},{"location":"man/DataValidation/","title":"DataValidation","text":"<p>Source code</p>"},{"location":"man/DataValidation/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.datavalidation.html</p>"},{"location":"man/DataValidation/#usage","title":"Usage","text":"<pre><code>DataValidation(\n  type = NULL,\n  formula1 = NULL,\n  formula2 = NULL,\n  showErrorMessage = FALSE,\n  showInputMessage = FALSE,\n  showDropDown = FALSE,\n  allowBlank = FALSE,\n  sqref = list(),\n  promptTitle = NULL,\n  errorStyle = NULL,\n  error = NULL,\n  prompt = NULL,\n  errorTitle = NULL,\n  imeMode = NULL,\n  operator = NULL,\n  allow_blank = FALSE,\n  ...\n)\n</code></pre>"},{"location":"man/DataValidation/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>formula1</code>  formula1  <code>formula2</code>  formula2  <code>showErrorMessage</code>  showErrorMessage  <code>showInputMessage</code>  showInputMessage  <code>showDropDown</code>  showDropDown  <code>allowBlank</code>  allowBlank  <code>sqref</code>  sqref  <code>promptTitle</code>  promptTitle  <code>errorStyle</code>  errorStyle  <code>error</code>  error  <code>prompt</code>  prompt  <code>errorTitle</code>  errorTitle  <code>imeMode</code>  imeMode  <code>operator</code>  operator  <code>allow_blank</code>  allow_blank  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DataValidation/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataValidation/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDataValidation()\n</code></pre>"},{"location":"man/DataValidationList/","title":"DataValidationList","text":"<p>Source code</p>"},{"location":"man/DataValidationList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.datavalidation.html</p>"},{"location":"man/DataValidationList/#usage","title":"Usage","text":"<pre><code>DataValidationList(\n  disablePrompts = NULL,\n  xWindow = NULL,\n  yWindow = NULL,\n  count = NULL,\n  dataValidation = list(),\n  ...\n)\n</code></pre>"},{"location":"man/DataValidationList/#arguments","title":"Arguments","text":"<code>disablePrompts</code>  disablePrompts  <code>xWindow</code>  xWindow  <code>yWindow</code>  yWindow  <code>count</code>  count  <code>dataValidation</code>  dataValidation  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DataValidationList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DataValidationList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDataValidationList()\n</code></pre>"},{"location":"man/DateAxis/","title":"DateAxis","text":"<p>Source code</p>"},{"location":"man/DateAxis/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.axis.html</p>"},{"location":"man/DateAxis/#usage","title":"Usage","text":"<pre><code>DateAxis(\n  auto = NULL,\n  lblOffset = NULL,\n  baseTimeUnit = NULL,\n  majorUnit = NULL,\n  majorTimeUnit = NULL,\n  minorUnit = NULL,\n  minorTimeUnit = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DateAxis/#arguments","title":"Arguments","text":"<code>auto</code>  auto  <code>lblOffset</code>  lblOffset  <code>baseTimeUnit</code>  baseTimeUnit  <code>majorUnit</code>  majorUnit  <code>majorTimeUnit</code>  majorTimeUnit  <code>minorUnit</code>  minorUnit  <code>minorTimeUnit</code>  minorTimeUnit  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DateAxis/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DateAxis/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDateAxis()\n</code></pre>"},{"location":"man/DateGroupItem/","title":"DateGroupItem","text":"<p>Source code</p>"},{"location":"man/DateGroupItem/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/DateGroupItem/#usage","title":"Usage","text":"<pre><code>DateGroupItem(\n  year = NULL,\n  month = NULL,\n  day = NULL,\n  hour = NULL,\n  minute = NULL,\n  second = NULL,\n  dateTimeGrouping = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DateGroupItem/#arguments","title":"Arguments","text":"<code>year</code>  year  <code>month</code>  month  <code>day</code>  day  <code>hour</code>  hour  <code>minute</code>  minute  <code>second</code>  second  <code>dateTimeGrouping</code>  dateTimeGrouping  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DateGroupItem/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DateGroupItem/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDateGroupItem(year = 2024, dateTimeGrouping = \"year\")\n</code></pre>"},{"location":"man/DefinedName/","title":"DefinedName","text":"<p>Source code</p>"},{"location":"man/DefinedName/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.defined_name.html</p>"},{"location":"man/DefinedName/#usage","title":"Usage","text":"<pre><code>DefinedName(\n  name = NULL,\n  comment = NULL,\n  customMenu = NULL,\n  description = NULL,\n  help = NULL,\n  statusBar = NULL,\n  localSheetId = NULL,\n  hidden = NULL,\n  vbProcedure = NULL,\n  xlm = NULL,\n  functionGroupId = NULL,\n  shortcutKey = NULL,\n  publishToServer = NULL,\n  workbookParameter = NULL,\n  attr_text = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DefinedName/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>comment</code>  comment  <code>customMenu</code>  customMenu  <code>description</code>  description  <code>help</code>  help  <code>statusBar</code>  statusBar  <code>localSheetId</code>  localSheetId  <code>hidden</code>  hidden  <code>vbProcedure</code>  vbProcedure  <code>xlm</code>  xlm  <code>functionGroupId</code>  functionGroupId  <code>shortcutKey</code>  shortcutKey  <code>publishToServer</code>  publishToServer  <code>workbookParameter</code>  workbookParameter  <code>attr_text</code>  attr_text  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DefinedName/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DefinedName/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDefinedName(name = \"name\")\n</code></pre>"},{"location":"man/DefinedNameList/","title":"DefinedNameList","text":"<p>Source code</p>"},{"location":"man/DefinedNameList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.defined_name.html</p>"},{"location":"man/DefinedNameList/#usage","title":"Usage","text":"<pre><code>DefinedNameList(definedName = list(), ...)\n</code></pre>"},{"location":"man/DefinedNameList/#arguments","title":"Arguments","text":"<code>definedName</code>  definedName  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DefinedNameList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DefinedNameList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDefinedNameList()\n</code></pre>"},{"location":"man/DifferentialStyle/","title":"DifferentialStyle","text":"<p>Source code</p>"},{"location":"man/DifferentialStyle/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.differential.html</p>"},{"location":"man/DifferentialStyle/#usage","title":"Usage","text":"<pre><code>DifferentialStyle(\n  font = NULL,\n  numFmt = NULL,\n  fill = NULL,\n  alignment = NULL,\n  border = NULL,\n  protection = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DifferentialStyle/#arguments","title":"Arguments","text":"<code>font</code>  font  <code>numFmt</code>  numFmt  <code>fill</code>  fill  <code>alignment</code>  alignment  <code>border</code>  border  <code>protection</code>  protection  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DifferentialStyle/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DifferentialStyle/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDifferentialStyle()\n</code></pre>"},{"location":"man/DifferentialStyleList/","title":"DifferentialStyleList","text":"<p>Source code</p>"},{"location":"man/DifferentialStyleList/#description","title":"Description","text":"<p>Dedupable container for differential styles.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.differential.html</p>"},{"location":"man/DifferentialStyleList/#usage","title":"Usage","text":"<pre><code>DifferentialStyleList(dxf = list(), count = NULL, ...)\n</code></pre>"},{"location":"man/DifferentialStyleList/#arguments","title":"Arguments","text":"<code>dxf</code>  dxf  <code>count</code>  count  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DifferentialStyleList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DifferentialStyleList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDifferentialStyleList()\n</code></pre>"},{"location":"man/Dimension/","title":"Dimension","text":"<p>Source code</p>"},{"location":"man/Dimension/#description","title":"Description","text":"<p>Information about the display properties of a row or column.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.dimensions.html</p>"},{"location":"man/Dimension/#usage","title":"Usage","text":"<pre><code>Dimension(\n  index,\n  hidden,\n  outlineLevel,\n  collapsed,\n  worksheet,\n  visible = TRUE,\n  style = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Dimension/#arguments","title":"Arguments","text":"<code>index</code>  index  <code>hidden</code>  hidden  <code>outlineLevel</code>  outlineLevel  <code>collapsed</code>  collapsed  <code>worksheet</code>  worksheet  <code>visible</code>  visible  <code>style</code>  style  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Dimension/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Dimension/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDimension(index = 1L, hidden = NULL,\noutlineLevel = NULL, collapsed = NULL, worksheet = NULL)\n</code></pre>"},{"location":"man/DimensionHolder/","title":"DimensionHolder","text":"<p>Source code</p>"},{"location":"man/DimensionHolder/#description","title":"Description","text":"<p>Allow columns to be grouped</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.dimensions.html</p>"},{"location":"man/DimensionHolder/#usage","title":"Usage","text":"<pre><code>DimensionHolder(worksheet, reference = \"index\", default_factory = NULL, ...)\n</code></pre>"},{"location":"man/DimensionHolder/#arguments","title":"Arguments","text":"<code>worksheet</code>  worksheet  <code>reference</code>  reference  <code>default_factory</code>  default_factory  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DimensionHolder/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DimensionHolder/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws &lt;- wb$active\nDimensionHolder(worksheet = ws)\n</code></pre>"},{"location":"man/DisplayUnitsLabel/","title":"DisplayUnitsLabel","text":"<p>Source code</p>"},{"location":"man/DisplayUnitsLabel/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.axis.html</p>"},{"location":"man/DisplayUnitsLabel/#usage","title":"Usage","text":"<pre><code>DisplayUnitsLabel(layout = NULL, tx = NULL, spPr = NULL, txPr = NULL, ...)\n</code></pre>"},{"location":"man/DisplayUnitsLabel/#arguments","title":"Arguments","text":"<code>layout</code>  layout  <code>tx</code>  tx  <code>spPr</code>  spPr  <code>txPr</code>  txPr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DisplayUnitsLabel/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DisplayUnitsLabel/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDisplayUnitsLabel()\n</code></pre>"},{"location":"man/DisplayUnitsLabelList/","title":"DisplayUnitsLabelList","text":"<p>Source code</p>"},{"location":"man/DisplayUnitsLabelList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.axis.html</p>"},{"location":"man/DisplayUnitsLabelList/#usage","title":"Usage","text":"<pre><code>DisplayUnitsLabelList(...)\n</code></pre>"},{"location":"man/DisplayUnitsLabelList/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DisplayUnitsLabelList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DisplayUnitsLabelList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDisplayUnitsLabelList()\n</code></pre>"},{"location":"man/DocumentProperties/","title":"DocumentProperties","text":"<p>Source code</p>"},{"location":"man/DocumentProperties/#description","title":"Description","text":"<p>High-level properties of the document.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.packaging.core.html</p>"},{"location":"man/DocumentProperties/#usage","title":"Usage","text":"<pre><code>DocumentProperties(\n  category = NULL,\n  contentStatus = NULL,\n  keywords = NULL,\n  lastModifiedBy = NULL,\n  lastPrinted = NULL,\n  revision = NULL,\n  version = NULL,\n  created = NULL,\n  creator = \"openpyxl\",\n  description = NULL,\n  identifier = NULL,\n  language = NULL,\n  modified = NULL,\n  subject = NULL,\n  title = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DocumentProperties/#arguments","title":"Arguments","text":"<code>category</code>  category  <code>contentStatus</code>  contentStatus  <code>keywords</code>  keywords  <code>lastModifiedBy</code>  lastModifiedBy  <code>lastPrinted</code>  lastPrinted  <code>revision</code>  revision  <code>version</code>  version  <code>created</code>  created  <code>creator</code>  creator  <code>description</code>  description  <code>identifier</code>  identifier  <code>language</code>  language  <code>modified</code>  modified  <code>subject</code>  subject  <code>title</code>  title  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DocumentProperties/#details","title":"Details","text":"<p>Defined in ECMA-376 Par2 Annex D</p>"},{"location":"man/DocumentProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DocumentProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDocumentProperties()\n</code></pre>"},{"location":"man/DocumentSecurity/","title":"DocumentSecurity","text":"<p>Source code</p>"},{"location":"man/DocumentSecurity/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.protection.html</p>"},{"location":"man/DocumentSecurity/#usage","title":"Usage","text":"<pre><code>DocumentSecurity(\n  workbookPassword = NULL,\n  workbookPasswordCharacterSet = NULL,\n  revisionsPassword = NULL,\n  revisionsPasswordCharacterSet = NULL,\n  lockStructure = NULL,\n  lockWindows = NULL,\n  lockRevision = NULL,\n  revisionsAlgorithmName = NULL,\n  revisionsHashValue = NULL,\n  revisionsSaltValue = NULL,\n  revisionsSpinCount = NULL,\n  workbookAlgorithmName = NULL,\n  workbookHashValue = NULL,\n  workbookSaltValue = NULL,\n  workbookSpinCount = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DocumentSecurity/#arguments","title":"Arguments","text":"<code>workbookPassword</code>  workbookPassword  <code>workbookPasswordCharacterSet</code>  workbookPasswordCharacterSet  <code>revisionsPassword</code>  revisionsPassword  <code>revisionsPasswordCharacterSet</code>  revisionsPasswordCharacterSet  <code>lockStructure</code>  lockStructure  <code>lockWindows</code>  lockWindows  <code>lockRevision</code>  lockRevision  <code>revisionsAlgorithmName</code>  revisionsAlgorithmName  <code>revisionsHashValue</code>  revisionsHashValue  <code>revisionsSaltValue</code>  revisionsSaltValue  <code>revisionsSpinCount</code>  revisionsSpinCount  <code>workbookAlgorithmName</code>  workbookAlgorithmName  <code>workbookHashValue</code>  workbookHashValue  <code>workbookSaltValue</code>  workbookSaltValue  <code>workbookSpinCount</code>  workbookSpinCount  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DocumentSecurity/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DocumentSecurity/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDocumentSecurity()\n</code></pre>"},{"location":"man/DoughnutChart/","title":"DoughnutChart","text":"<p>Source code</p>"},{"location":"man/DoughnutChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.pie_chart.html</p>"},{"location":"man/DoughnutChart/#usage","title":"Usage","text":"<pre><code>DoughnutChart(firstSliceAng = 0L, holeSize = 10L, extLst = NULL, ...)\n</code></pre>"},{"location":"man/DoughnutChart/#arguments","title":"Arguments","text":"<code>firstSliceAng</code>  firstSliceAng  <code>holeSize</code>  holeSize  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DoughnutChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DoughnutChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDoughnutChart()\n</code></pre>"},{"location":"man/Drawing/","title":"Drawing","text":"<p>Source code</p>"},{"location":"man/Drawing/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.drawing.html</p>"},{"location":"man/Drawing/#usage","title":"Usage","text":"<pre><code>Drawing(id = NULL, ...)\n</code></pre>"},{"location":"man/Drawing/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Drawing/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Drawing/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDrawing()\n</code></pre>"},{"location":"man/DrawingHF/","title":"DrawingHF","text":"<p>Source code</p>"},{"location":"man/DrawingHF/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chartsheet.relation.html</p>"},{"location":"man/DrawingHF/#usage","title":"Usage","text":"<pre><code>DrawingHF(\n  id = NULL,\n  lho = NULL,\n  lhe = NULL,\n  lhf = NULL,\n  cho = NULL,\n  che = NULL,\n  chf = NULL,\n  rho = NULL,\n  rhe = NULL,\n  rhf = NULL,\n  lfo = NULL,\n  lfe = NULL,\n  lff = NULL,\n  cfo = NULL,\n  cfe = NULL,\n  cff = NULL,\n  rfo = NULL,\n  rfe = NULL,\n  rff = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DrawingHF/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>lho</code>  lho  <code>lhe</code>  lhe  <code>lhf</code>  lhf  <code>cho</code>  cho  <code>che</code>  che  <code>chf</code>  chf  <code>rho</code>  rho  <code>rhe</code>  rhe  <code>rhf</code>  rhf  <code>lfo</code>  lfo  <code>lfe</code>  lfe  <code>lff</code>  lff  <code>cfo</code>  cfo  <code>cfe</code>  cfe  <code>cff</code>  cff  <code>rfo</code>  rfo  <code>rfe</code>  rfe  <code>rff</code>  rff  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DrawingHF/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DrawingHF/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDrawingHF()\n</code></pre>"},{"location":"man/DummyWorksheet/","title":"DummyWorksheet","text":"<p>Source code</p>"},{"location":"man/DummyWorksheet/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.reference.html</p>"},{"location":"man/DummyWorksheet/#usage","title":"Usage","text":"<pre><code>DummyWorksheet(title, ...)\n</code></pre>"},{"location":"man/DummyWorksheet/#arguments","title":"Arguments","text":"<code>title</code>  title  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DummyWorksheet/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DummyWorksheet/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDummyWorksheet(title = \"title\")\n</code></pre>"},{"location":"man/DuotoneEffect/","title":"DuotoneEffect","text":"<p>Source code</p>"},{"location":"man/DuotoneEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/DuotoneEffect/#usage","title":"Usage","text":"<pre><code>DuotoneEffect(...)\n</code></pre>"},{"location":"man/DuotoneEffect/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DuotoneEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DuotoneEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDuotoneEffect()\n</code></pre>"},{"location":"man/DynamicFilter/","title":"DynamicFilter","text":"<p>Source code</p>"},{"location":"man/DynamicFilter/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/DynamicFilter/#usage","title":"Usage","text":"<pre><code>DynamicFilter(\n  type = NULL,\n  val = NULL,\n  valIso = NULL,\n  maxVal = NULL,\n  maxValIso = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/DynamicFilter/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>val</code>  val  <code>valIso</code>  valIso  <code>maxVal</code>  maxVal  <code>maxValIso</code>  maxValIso  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/DynamicFilter/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/DynamicFilter/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nDynamicFilter(type = \"thisWeek\")\n</code></pre>"},{"location":"man/EMU_to_cm/","title":"EMU_to_cm","text":"<p>Source code</p>"},{"location":"man/EMU_to_cm/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/EMU_to_cm/#usage","title":"Usage","text":"<pre><code>EMU_to_cm(value, ...)\n</code></pre>"},{"location":"man/EMU_to_cm/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/EMU_to_cm/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/EMU_to_cm/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nEMU_to_cm(value = 100L)\n</code></pre>"},{"location":"man/EMU_to_inch/","title":"EMU_to_inch","text":"<p>Source code</p>"},{"location":"man/EMU_to_inch/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/EMU_to_inch/#usage","title":"Usage","text":"<pre><code>EMU_to_inch(value, ...)\n</code></pre>"},{"location":"man/EMU_to_inch/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/EMU_to_inch/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/EMU_to_inch/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nEMU_to_inch(value = 100L)\n</code></pre>"},{"location":"man/EMU_to_pixels/","title":"EMU_to_pixels","text":"<p>Source code</p>"},{"location":"man/EMU_to_pixels/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/EMU_to_pixels/#usage","title":"Usage","text":"<pre><code>EMU_to_pixels(value, ...)\n</code></pre>"},{"location":"man/EMU_to_pixels/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/EMU_to_pixels/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/EMU_to_pixels/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nEMU_to_pixels(value = 10000L)\n</code></pre>"},{"location":"man/EffectContainer/","title":"EffectContainer","text":"<p>Source code</p>"},{"location":"man/EffectContainer/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/EffectContainer/#usage","title":"Usage","text":"<pre><code>EffectContainer(type = NULL, name = NULL, ...)\n</code></pre>"},{"location":"man/EffectContainer/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>name</code>  name  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/EffectContainer/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/EffectContainer/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nEffectContainer(type = \"sib\")\n</code></pre>"},{"location":"man/EffectList/","title":"EffectList","text":"<p>Source code</p>"},{"location":"man/EffectList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/EffectList/#usage","title":"Usage","text":"<pre><code>EffectList(\n  blur = NULL,\n  fillOverlay = NULL,\n  glow = NULL,\n  innerShdw = NULL,\n  outerShdw = NULL,\n  prstShdw = NULL,\n  reflection = NULL,\n  softEdge = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/EffectList/#arguments","title":"Arguments","text":"<code>blur</code>  blur  <code>fillOverlay</code>  fillOverlay  <code>glow</code>  glow  <code>innerShdw</code>  innerShdw  <code>outerShdw</code>  outerShdw  <code>prstShdw</code>  prstShdw  <code>reflection</code>  reflection  <code>softEdge</code>  softEdge  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/EffectList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/EffectList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nEffectList()\n</code></pre>"},{"location":"man/EmbeddedWAVAudioFile/","title":"EmbeddedWAVAudioFile","text":"<p>Source code</p>"},{"location":"man/EmbeddedWAVAudioFile/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/EmbeddedWAVAudioFile/#usage","title":"Usage","text":"<pre><code>EmbeddedWAVAudioFile(name = NULL, ...)\n</code></pre>"},{"location":"man/EmbeddedWAVAudioFile/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/EmbeddedWAVAudioFile/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/EmbeddedWAVAudioFile/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nEmbeddedWAVAudioFile()\n</code></pre>"},{"location":"man/EmptyCell/","title":"EmptyCell","text":"<p>Source code</p>"},{"location":"man/EmptyCell/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.read_only.html</p>"},{"location":"man/EmptyCell/#usage","title":"Usage","text":"<pre><code>EmptyCell(...)\n</code></pre>"},{"location":"man/EmptyCell/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/EmptyCell/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/EmptyCell/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nEmptyCell()\n</code></pre>"},{"location":"man/ErrorBars/","title":"ErrorBars","text":"<p>Source code</p>"},{"location":"man/ErrorBars/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.error_bar.html</p>"},{"location":"man/ErrorBars/#usage","title":"Usage","text":"<pre><code>ErrorBars(\n  errDir = NULL,\n  errBarType = \"both\",\n  errValType = \"fixedVal\",\n  noEndCap = NULL,\n  plus = NULL,\n  minus = NULL,\n  val = NULL,\n  spPr = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ErrorBars/#arguments","title":"Arguments","text":"<code>errDir</code>  errDir  <code>errBarType</code>  errBarType  <code>errValType</code>  errValType  <code>noEndCap</code>  noEndCap  <code>plus</code>  plus  <code>minus</code>  minus  <code>val</code>  val  <code>spPr</code>  spPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ErrorBars/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ErrorBars/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nErrorBars()\n</code></pre>"},{"location":"man/ExcelReader/","title":"ExcelReader","text":"<p>Source code</p>"},{"location":"man/ExcelReader/#description","title":"Description","text":"<p>Read an Excel package and dispatch the contents to the relevant modules</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.reader.excel.html</p>"},{"location":"man/ExcelReader/#usage","title":"Usage","text":"<pre><code>ExcelReader(\n  fn,\n  read_only = FALSE,\n  keep_vba = FALSE,\n  data_only = FALSE,\n  keep_links = TRUE,\n  rich_text = FALSE,\n  ...\n)\n</code></pre>"},{"location":"man/ExcelReader/#arguments","title":"Arguments","text":"<code>fn</code>  fn  <code>read_only</code>  read_only  <code>keep_vba</code>  keep_vba  <code>data_only</code>  data_only  <code>keep_links</code>  keep_links  <code>rich_text</code>  rich_text  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExcelReader/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExcelReader/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ntmp &lt;- write_xlsx(list(mysheet = iris))\nExcelReader(fn = tmp)\n</code></pre>"},{"location":"man/ExcelWriter/","title":"ExcelWriter","text":"<p>Source code</p>"},{"location":"man/ExcelWriter/#description","title":"Description","text":"<p>Write a workbook object to an Excel file.</p> <p>https://openpyxl.readthedocs.io/en/latest/api/openpyxl.writer.excel.html</p>"},{"location":"man/ExcelWriter/#usage","title":"Usage","text":"<pre><code>ExcelWriter(workbook, archive, ...)\n</code></pre>"},{"location":"man/ExcelWriter/#arguments","title":"Arguments","text":"<code>workbook</code>  workbook  <code>archive</code>  archive  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExcelWriter/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExcelWriter/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nExcelWriter(workbook = wb, archive = wb)\n</code></pre>"},{"location":"man/Extension/","title":"Extension","text":"<p>Source code</p>"},{"location":"man/Extension/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.errors.html</p>"},{"location":"man/Extension/#usage","title":"Usage","text":"<pre><code>Extension(uri = NULL, ...)\n</code></pre>"},{"location":"man/Extension/#arguments","title":"Arguments","text":"<code>uri</code>  uri  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Extension/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Extension/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExtension()\n</code></pre>"},{"location":"man/ExtensionList/","title":"ExtensionList","text":"<p>Source code</p>"},{"location":"man/ExtensionList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.descriptors.excel.html</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.errors.html</p>"},{"location":"man/ExtensionList/#usage","title":"Usage","text":"<pre><code>ExtensionList(ext = list(), ...)\n</code></pre>"},{"location":"man/ExtensionList/#arguments","title":"Arguments","text":"<code>ext</code>  ext  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExtensionList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExtensionList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExtensionList()\n</code></pre>"},{"location":"man/ExternalBook/","title":"ExternalBook","text":"<p>Source code</p>"},{"location":"man/ExternalBook/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.external_link.external.html</p>"},{"location":"man/ExternalBook/#usage","title":"Usage","text":"<pre><code>ExternalBook(\n  sheetNames = NULL,\n  definedNames = list(),\n  sheetDataSet = NULL,\n  id = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ExternalBook/#arguments","title":"Arguments","text":"<code>sheetNames</code>  sheetNames  <code>definedNames</code>  definedNames  <code>sheetDataSet</code>  sheetDataSet  <code>id</code>  id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExternalBook/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExternalBook/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExternalBook()\n</code></pre>"},{"location":"man/ExternalCell/","title":"ExternalCell","text":"<p>Source code</p>"},{"location":"man/ExternalCell/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.external_link.external.html</p>"},{"location":"man/ExternalCell/#usage","title":"Usage","text":"<pre><code>ExternalCell(r = NULL, t = NULL, vm = NULL, v = NULL, ...)\n</code></pre>"},{"location":"man/ExternalCell/#arguments","title":"Arguments","text":"<code>r</code>  r  <code>t</code>  t  <code>vm</code>  vm  <code>v</code>  v  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExternalCell/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExternalCell/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExternalCell(r = \"r\")\n</code></pre>"},{"location":"man/ExternalData/","title":"ExternalData","text":"<p>Source code</p>"},{"location":"man/ExternalData/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.chartspace.html</p>"},{"location":"man/ExternalData/#usage","title":"Usage","text":"<pre><code>ExternalData(autoUpdate = NULL, id = NULL, ...)\n</code></pre>"},{"location":"man/ExternalData/#arguments","title":"Arguments","text":"<code>autoUpdate</code>  autoUpdate  <code>id</code>  id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExternalData/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExternalData/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExternalData(id = \"id\")\n</code></pre>"},{"location":"man/ExternalDefinedName/","title":"ExternalDefinedName","text":"<p>Source code</p>"},{"location":"man/ExternalDefinedName/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.external_link.external.html</p>"},{"location":"man/ExternalDefinedName/#usage","title":"Usage","text":"<pre><code>ExternalDefinedName(name = NULL, refersTo = NULL, sheetId = NULL, ...)\n</code></pre>"},{"location":"man/ExternalDefinedName/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>refersTo</code>  refersTo  <code>sheetId</code>  sheetId  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExternalDefinedName/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExternalDefinedName/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExternalDefinedName(name = \"name\")\n</code></pre>"},{"location":"man/ExternalLink/","title":"ExternalLink","text":"<p>Source code</p>"},{"location":"man/ExternalLink/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.external_link.external.html</p>"},{"location":"man/ExternalLink/#usage","title":"Usage","text":"<pre><code>ExternalLink(\n  externalBook = NULL,\n  ddeLink = NULL,\n  oleLink = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ExternalLink/#arguments","title":"Arguments","text":"<code>externalBook</code>  externalBook  <code>ddeLink</code>  ddeLink  <code>oleLink</code>  oleLink  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExternalLink/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExternalLink/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExternalLink()\n</code></pre>"},{"location":"man/ExternalReference/","title":"ExternalReference","text":"<p>Source code</p>"},{"location":"man/ExternalReference/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.external_reference.html</p>"},{"location":"man/ExternalReference/#usage","title":"Usage","text":"<pre><code>ExternalReference(id, ...)\n</code></pre>"},{"location":"man/ExternalReference/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExternalReference/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExternalReference/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExternalReference(id = \"id\")\n</code></pre>"},{"location":"man/ExternalSheetDataSet/","title":"ExternalSheetDataSet","text":"<p>Source code</p>"},{"location":"man/ExternalSheetDataSet/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.external_link.external.html</p>"},{"location":"man/ExternalSheetDataSet/#usage","title":"Usage","text":"<pre><code>ExternalSheetDataSet(sheetData = NULL, ...)\n</code></pre>"},{"location":"man/ExternalSheetDataSet/#arguments","title":"Arguments","text":"<code>sheetData</code>  sheetData  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExternalSheetDataSet/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExternalSheetDataSet/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExternalSheetDataSet(sheetData = list())\n</code></pre>"},{"location":"man/ExternalSheetNames/","title":"ExternalSheetNames","text":"<p>Source code</p>"},{"location":"man/ExternalSheetNames/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.external_link.external.html</p>"},{"location":"man/ExternalSheetNames/#usage","title":"Usage","text":"<pre><code>ExternalSheetNames(sheetName = list(), ...)\n</code></pre>"},{"location":"man/ExternalSheetNames/#arguments","title":"Arguments","text":"<code>sheetName</code>  sheetName  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ExternalSheetNames/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ExternalSheetNames/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nExternalSheetNames()\n</code></pre>"},{"location":"man/FileSharing/","title":"FileSharing","text":"<p>Source code</p>"},{"location":"man/FileSharing/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.protection.html</p>"},{"location":"man/FileSharing/#usage","title":"Usage","text":"<pre><code>FileSharing(\n  readOnlyRecommended = NULL,\n  userName = NULL,\n  reservationPassword = NULL,\n  algorithmName = NULL,\n  hashValue = NULL,\n  saltValue = NULL,\n  spinCount = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/FileSharing/#arguments","title":"Arguments","text":"<code>readOnlyRecommended</code>  readOnlyRecommended  <code>userName</code>  userName  <code>reservationPassword</code>  reservationPassword  <code>algorithmName</code>  algorithmName  <code>hashValue</code>  hashValue  <code>saltValue</code>  saltValue  <code>spinCount</code>  spinCount  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/FileSharing/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FileSharing/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFileSharing()\n</code></pre>"},{"location":"man/FileVersion/","title":"FileVersion","text":"<p>Source code</p>"},{"location":"man/FileVersion/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.properties.html</p>"},{"location":"man/FileVersion/#usage","title":"Usage","text":"<pre><code>FileVersion(\n  appName = NULL,\n  lastEdited = NULL,\n  lowestEdited = NULL,\n  rupBuild = NULL,\n  codeName = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/FileVersion/#arguments","title":"Arguments","text":"<code>appName</code>  appName  <code>lastEdited</code>  lastEdited  <code>lowestEdited</code>  lowestEdited  <code>rupBuild</code>  rupBuild  <code>codeName</code>  codeName  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/FileVersion/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FileVersion/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFileVersion()\n</code></pre>"},{"location":"man/Fill/","title":"Fill","text":"<p>Source code</p>"},{"location":"man/Fill/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html</p>"},{"location":"man/Fill/#usage","title":"Usage","text":"<pre><code>Fill(...)\n</code></pre>"},{"location":"man/Fill/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Fill/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Fill/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFill()\n</code></pre>"},{"location":"man/FillOverlayEffect/","title":"FillOverlayEffect","text":"<p>Source code</p>"},{"location":"man/FillOverlayEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/FillOverlayEffect/#usage","title":"Usage","text":"<pre><code>FillOverlayEffect(blend = NULL, ...)\n</code></pre>"},{"location":"man/FillOverlayEffect/#arguments","title":"Arguments","text":"<code>blend</code>  blend  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/FillOverlayEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FillOverlayEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFillOverlayEffect(blend = \"darken\")\n</code></pre>"},{"location":"man/FilterColumn/","title":"FilterColumn","text":"<p>Source code</p>"},{"location":"man/FilterColumn/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/FilterColumn/#usage","title":"Usage","text":"<pre><code>FilterColumn(\n  colId = NULL,\n  hiddenButton = FALSE,\n  showButton = TRUE,\n  filters = NULL,\n  top10 = NULL,\n  customFilters = NULL,\n  dynamicFilter = NULL,\n  colorFilter = NULL,\n  iconFilter = NULL,\n  extLst = NULL,\n  blank = NULL,\n  vals = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/FilterColumn/#arguments","title":"Arguments","text":"<code>colId</code>  colId  <code>hiddenButton</code>  hiddenButton  <code>showButton</code>  showButton  <code>filters</code>  filters  <code>top10</code>  top10  <code>customFilters</code>  customFilters  <code>dynamicFilter</code>  dynamicFilter  <code>colorFilter</code>  colorFilter  <code>iconFilter</code>  iconFilter  <code>extLst</code>  extLst  <code>blank</code>  blank  <code>vals</code>  vals  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/FilterColumn/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FilterColumn/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFilterColumn(colId = 1L)\n</code></pre>"},{"location":"man/Filters/","title":"Filters","text":"<p>Source code</p>"},{"location":"man/Filters/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/Filters/#usage","title":"Usage","text":"<pre><code>Filters(\n  blank = NULL,\n  calendarType = NULL,\n  filter = list(),\n  dateGroupItem = list(),\n  ...\n)\n</code></pre>"},{"location":"man/Filters/#arguments","title":"Arguments","text":"<code>blank</code>  blank  <code>calendarType</code>  calendarType  <code>filter</code>  filter  <code>dateGroupItem</code>  dateGroupItem  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Filters/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Filters/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFilters()\n</code></pre>"},{"location":"man/Font/","title":"Font","text":"<p>Source code</p>"},{"location":"man/Font/#description","title":"Description","text":"<p>Font options used in styles.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fonts.html</p>"},{"location":"man/Font/#usage","title":"Usage","text":"<pre><code>Font(\n  name = NULL,\n  sz = NULL,\n  b = NULL,\n  i = NULL,\n  charset = NULL,\n  u = NULL,\n  strike = NULL,\n  color = NULL,\n  scheme = NULL,\n  family = NULL,\n  size = NULL,\n  bold = NULL,\n  italic = NULL,\n  strikethrough = NULL,\n  underline = NULL,\n  vertAlign = NULL,\n  outline = NULL,\n  shadow = NULL,\n  condense = NULL,\n  extend = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Font/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>sz</code>  sz  <code>b</code>  b  <code>i</code>  i  <code>charset</code>  charset  <code>u</code>  u  <code>strike</code>  strike  <code>color</code>  color  <code>scheme</code>  scheme  <code>family</code>  family  <code>size</code>  size  <code>bold</code>  bold  <code>italic</code>  italic  <code>strikethrough</code>  strikethrough  <code>underline</code>  underline  <code>vertAlign</code>  vertAlign  <code>outline</code>  outline  <code>shadow</code>  shadow  <code>condense</code>  condense  <code>extend</code>  extend  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Font/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Font/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFont()\n</code></pre>"},{"location":"man/FontReference/","title":"FontReference","text":"<p>Source code</p>"},{"location":"man/FontReference/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/FontReference/#usage","title":"Usage","text":"<pre><code>FontReference(idx = NULL, ...)\n</code></pre>"},{"location":"man/FontReference/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/FontReference/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FontReference/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFontReference()\n</code></pre>"},{"location":"man/FormatObject/","title":"FormatObject","text":"<p>Source code</p>"},{"location":"man/FormatObject/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/FormatObject/#usage","title":"Usage","text":"<pre><code>FormatObject(type, val = NULL, gte = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/FormatObject/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>val</code>  val  <code>gte</code>  gte  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs"},{"location":"man/FormatObject/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FormatObject/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFormatObject(type = \"num\")\n</code></pre>"},{"location":"man/FormulaRule/","title":"FormulaRule","text":"<p>Source code</p>"},{"location":"man/FormulaRule/#description","title":"Description","text":"<p>Conditional formatting with custom differential style</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/FormulaRule/#usage","title":"Usage","text":"<pre><code>FormulaRule(\n  formula = NULL,\n  stopIfTrue = NULL,\n  font = NULL,\n  border = NULL,\n  fill = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/FormulaRule/#arguments","title":"Arguments","text":"<code>formula</code>  formula  <code>stopIfTrue</code>  stopIfTrue  <code>font</code>  font  <code>border</code>  border  <code>fill</code>  fill  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/FormulaRule/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FormulaRule/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws &lt;- wb$active\nws$conditional_formatting$add('E1:E10',\n  FormulaRule(\n    formula = list('ISBLANK(A1)'),\n    stopIfTrue=TRUE\n  )\n)\n</code></pre>"},{"location":"man/FunctionGroup/","title":"FunctionGroup","text":"<p>Source code</p>"},{"location":"man/FunctionGroup/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.function_group.html</p>"},{"location":"man/FunctionGroup/#usage","title":"Usage","text":"<pre><code>FunctionGroup(name = NULL, ...)\n</code></pre>"},{"location":"man/FunctionGroup/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/FunctionGroup/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FunctionGroup/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFunctionGroup(name = \"name\")\n</code></pre>"},{"location":"man/FunctionGroupList/","title":"FunctionGroupList","text":"<p>Source code</p>"},{"location":"man/FunctionGroupList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.function_group.html</p>"},{"location":"man/FunctionGroupList/#usage","title":"Usage","text":"<pre><code>FunctionGroupList(builtInGroupCount = 16L, functionGroup = list(), ...)\n</code></pre>"},{"location":"man/FunctionGroupList/#arguments","title":"Arguments","text":"<code>builtInGroupCount</code>  builtInGroupCount  <code>functionGroup</code>  functionGroup  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/FunctionGroupList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/FunctionGroupList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nFunctionGroupList()\n</code></pre>"},{"location":"man/GeomGuide/","title":"GeomGuide","text":"<p>Source code</p>"},{"location":"man/GeomGuide/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/GeomGuide/#usage","title":"Usage","text":"<pre><code>GeomGuide(name = NULL, fmla = NULL, ...)\n</code></pre>"},{"location":"man/GeomGuide/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>fmla</code>  fmla  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GeomGuide/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GeomGuide/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGeomGuide(name = \"name\", fmla = \"fmla\")\n</code></pre>"},{"location":"man/GeomGuideList/","title":"GeomGuideList","text":"<p>Source code</p>"},{"location":"man/GeomGuideList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/GeomGuideList/#usage","title":"Usage","text":"<pre><code>GeomGuideList(gd = NULL, ...)\n</code></pre>"},{"location":"man/GeomGuideList/#arguments","title":"Arguments","text":"<code>gd</code>  gd  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GeomGuideList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GeomGuideList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGeomGuideList()\n</code></pre>"},{"location":"man/GeomRect/","title":"GeomRect","text":"<p>Source code</p>"},{"location":"man/GeomRect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/GeomRect/#usage","title":"Usage","text":"<pre><code>GeomRect(l = NULL, t = NULL, r = NULL, b = NULL, ...)\n</code></pre>"},{"location":"man/GeomRect/#arguments","title":"Arguments","text":"<code>l</code>  l  <code>t</code>  t  <code>r</code>  r  <code>b</code>  b  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GeomRect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GeomRect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGeomRect(l = 1L, t = 1L, 1L, 1L)\n</code></pre>"},{"location":"man/GlowEffect/","title":"GlowEffect","text":"<p>Source code</p>"},{"location":"man/GlowEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/GlowEffect/#usage","title":"Usage","text":"<pre><code>GlowEffect(rad = NULL, ...)\n</code></pre>"},{"location":"man/GlowEffect/#arguments","title":"Arguments","text":"<code>rad</code>  rad  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GlowEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GlowEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGlowEffect(rad = 1.5)\n</code></pre>"},{"location":"man/GradientFill/","title":"GradientFill","text":"<p>Source code</p>"},{"location":"man/GradientFill/#description","title":"Description","text":"<p>Fill areas with gradient</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html</p>"},{"location":"man/GradientFill/#usage","title":"Usage","text":"<pre><code>GradientFill(\n  type = \"linear\",\n  degree = 0L,\n  left = 0L,\n  right = 0L,\n  top = 0L,\n  bottom = 0L,\n  stop = list(),\n  ...\n)\n</code></pre>"},{"location":"man/GradientFill/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>degree</code>  degree  <code>left</code>  left  <code>right</code>  right  <code>top</code>  top  <code>bottom</code>  bottom  <code>stop</code>  stop  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GradientFill/#details","title":"Details","text":"<p>Two types of gradient fill are supported: - A type=\u2018linear\u2019 gradient interpolates colours between a set of specified Stops, across the length of an area. The gradient is left-to-right by default, but this orientation can be modified with the degree attribute. A list of Colors can be provided instead and they will be positioned with equal distance between them. - A type=\u2018path\u2019 gradient applies a linear gradient from each edge of the area. Attributes top, right, bottom, left specify the extent of fill from the respective borders. Thus top=\"0.2\" will fill the top 20</p>"},{"location":"man/GradientFill/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GradientFill/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGradientFill()\n</code></pre>"},{"location":"man/GradientFillProperties/","title":"GradientFillProperties","text":"<p>Source code</p>"},{"location":"man/GradientFillProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/GradientFillProperties/#usage","title":"Usage","text":"<pre><code>GradientFillProperties(\n  flip = NULL,\n  rotWithShape = NULL,\n  gsLst = list(),\n  lin = NULL,\n  path = NULL,\n  tileRect = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/GradientFillProperties/#arguments","title":"Arguments","text":"<code>flip</code>  flip  <code>rotWithShape</code>  rotWithShape  <code>gsLst</code>  gsLst  <code>lin</code>  lin  <code>path</code>  path  <code>tileRect</code>  tileRect  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GradientFillProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GradientFillProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGradientFillProperties()\n</code></pre>"},{"location":"man/GradientStop/","title":"GradientStop","text":"<p>Source code</p>"},{"location":"man/GradientStop/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/GradientStop/#usage","title":"Usage","text":"<pre><code>GradientStop(\n  pos = NULL,\n  scrgbClr = NULL,\n  srgbClr = NULL,\n  hslClr = NULL,\n  sysClr = NULL,\n  schemeClr = NULL,\n  prstClr = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/GradientStop/#arguments","title":"Arguments","text":"<code>pos</code>  pos  <code>scrgbClr</code>  scrgbClr  <code>srgbClr</code>  srgbClr  <code>hslClr</code>  hslClr  <code>sysClr</code>  sysClr  <code>schemeClr</code>  schemeClr  <code>prstClr</code>  prstClr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GradientStop/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GradientStop/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGradientStop()\n</code></pre>"},{"location":"man/GraphicData/","title":"GraphicData","text":"<p>Source code</p>"},{"location":"man/GraphicData/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.graphic.html</p>"},{"location":"man/GraphicData/#usage","title":"Usage","text":"<pre><code>GraphicData(\n  uri = \"http://schemas.openxmlformats.org/drawingml/2006/chart\",\n  chart = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/GraphicData/#arguments","title":"Arguments","text":"<code>uri</code>  uri  <code>chart</code>  chart  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GraphicData/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GraphicData/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGraphicData()\n</code></pre>"},{"location":"man/GraphicFrameLocking/","title":"GraphicFrameLocking","text":"<p>Source code</p>"},{"location":"man/GraphicFrameLocking/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.graphic.html</p>"},{"location":"man/GraphicFrameLocking/#usage","title":"Usage","text":"<pre><code>GraphicFrameLocking(\n  noGrp = NULL,\n  noDrilldown = NULL,\n  noSelect = NULL,\n  noChangeAspect = NULL,\n  noMove = NULL,\n  noResize = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/GraphicFrameLocking/#arguments","title":"Arguments","text":"<code>noGrp</code>  noGrp  <code>noDrilldown</code>  noDrilldown  <code>noSelect</code>  noSelect  <code>noChangeAspect</code>  noChangeAspect  <code>noMove</code>  noMove  <code>noResize</code>  noResize  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GraphicFrameLocking/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GraphicFrameLocking/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGraphicFrameLocking()\n</code></pre>"},{"location":"man/GraphicObject/","title":"GraphicObject","text":"<p>Source code</p>"},{"location":"man/GraphicObject/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.graphic.html</p>"},{"location":"man/GraphicObject/#usage","title":"Usage","text":"<pre><code>GraphicObject(graphicData = NULL, ...)\n</code></pre>"},{"location":"man/GraphicObject/#arguments","title":"Arguments","text":"<code>graphicData</code>  graphicData  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GraphicObject/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GraphicObject/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGraphicObject()\n</code></pre>"},{"location":"man/GraphicalProperties/","title":"GraphicalProperties","text":"<p>Source code</p>"},{"location":"man/GraphicalProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.shapes.html</p>"},{"location":"man/GraphicalProperties/#usage","title":"Usage","text":"<pre><code>GraphicalProperties(\n  bwMode = NULL,\n  xfrm = NULL,\n  noFill = NULL,\n  solidFill = NULL,\n  gradFill = NULL,\n  pattFill = NULL,\n  ln = NULL,\n  scene3d = NULL,\n  custGeom = NULL,\n  prstGeom = NULL,\n  sp3d = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/GraphicalProperties/#arguments","title":"Arguments","text":"<code>bwMode</code>  bwMode  <code>xfrm</code>  xfrm  <code>noFill</code>  noFill  <code>solidFill</code>  solidFill  <code>gradFill</code>  gradFill  <code>pattFill</code>  pattFill  <code>ln</code>  ln  <code>scene3d</code>  scene3d  <code>custGeom</code>  custGeom  <code>prstGeom</code>  prstGeom  <code>sp3d</code>  sp3d  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GraphicalProperties/#details","title":"Details","text":"<p>This element specifies the formatting for the parent chart element. The custGeom, prstGeom, scene3d, and xfrm elements are not supported. The bwMode attribute is not supported. This doesn\u2019t leave much. And the element is used in different places.</p>"},{"location":"man/GraphicalProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GraphicalProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGraphicalProperties()\n</code></pre>"},{"location":"man/GrayscaleEffect/","title":"GrayscaleEffect","text":"<p>Source code</p>"},{"location":"man/GrayscaleEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/GrayscaleEffect/#usage","title":"Usage","text":"<pre><code>GrayscaleEffect(...)\n</code></pre>"},{"location":"man/GrayscaleEffect/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GrayscaleEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GrayscaleEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGrayscaleEffect()\n</code></pre>"},{"location":"man/GroupLocking/","title":"GroupLocking","text":"<p>Source code</p>"},{"location":"man/GroupLocking/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.properties.html</p>"},{"location":"man/GroupLocking/#usage","title":"Usage","text":"<pre><code>GroupLocking(\n  noGrp = NULL,\n  noUngrp = NULL,\n  noSelect = NULL,\n  noRot = NULL,\n  noChangeAspect = NULL,\n  noChangeArrowheads = NULL,\n  noMove = NULL,\n  noResize = NULL,\n  noEditPoints = NULL,\n  noAdjustHandles = NULL,\n  noChangeShapeType = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/GroupLocking/#arguments","title":"Arguments","text":"<code>noGrp</code>  noGrp  <code>noUngrp</code>  noUngrp  <code>noSelect</code>  noSelect  <code>noRot</code>  noRot  <code>noChangeAspect</code>  noChangeAspect  <code>noChangeArrowheads</code>  noChangeArrowheads  <code>noMove</code>  noMove  <code>noResize</code>  noResize  <code>noEditPoints</code>  noEditPoints  <code>noAdjustHandles</code>  noAdjustHandles  <code>noChangeShapeType</code>  noChangeShapeType  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GroupLocking/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GroupLocking/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGroupLocking()\n</code></pre>"},{"location":"man/GroupShapeProperties/","title":"GroupShapeProperties","text":"<p>Source code</p>"},{"location":"man/GroupShapeProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.properties.html</p>"},{"location":"man/GroupShapeProperties/#usage","title":"Usage","text":"<pre><code>GroupShapeProperties(\n  bwMode = NULL,\n  xfrm = NULL,\n  scene3d = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/GroupShapeProperties/#arguments","title":"Arguments","text":"<code>bwMode</code>  bwMode  <code>xfrm</code>  xfrm  <code>scene3d</code>  scene3d  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GroupShapeProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GroupShapeProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGroupShapeProperties()\n</code></pre>"},{"location":"man/GroupTransform2D/","title":"GroupTransform2D","text":"<p>Source code</p>"},{"location":"man/GroupTransform2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/GroupTransform2D/#usage","title":"Usage","text":"<pre><code>GroupTransform2D(\n  rot = 0L,\n  flipH = NULL,\n  flipV = NULL,\n  off = NULL,\n  ext = NULL,\n  chOff = NULL,\n  chExt = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/GroupTransform2D/#arguments","title":"Arguments","text":"<code>rot</code>  rot  <code>flipH</code>  flipH  <code>flipV</code>  flipV  <code>off</code>  off  <code>ext</code>  ext  <code>chOff</code>  chOff  <code>chExt</code>  chExt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/GroupTransform2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/GroupTransform2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nGroupTransform2D()\n</code></pre>"},{"location":"man/HSLColor/","title":"HSLColor","text":"<p>Source code</p>"},{"location":"man/HSLColor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.colors.html</p>"},{"location":"man/HSLColor/#usage","title":"Usage","text":"<pre><code>HSLColor(hue = NULL, sat = NULL, lum = NULL, ...)\n</code></pre>"},{"location":"man/HSLColor/#arguments","title":"Arguments","text":"<code>hue</code>  hue  <code>sat</code>  sat  <code>lum</code>  lum  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/HSLColor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/HSLColor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nHSLColor(hue = 1L, sat = 1L, lum = 1L)\n</code></pre>"},{"location":"man/HSLEffect/","title":"HSLEffect","text":"<p>Source code</p>"},{"location":"man/HSLEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/HSLEffect/#usage","title":"Usage","text":"<pre><code>HSLEffect(hue = NULL, sat = NULL, lum = NULL, ...)\n</code></pre>"},{"location":"man/HSLEffect/#arguments","title":"Arguments","text":"<code>hue</code>  hue  <code>sat</code>  sat  <code>lum</code>  lum  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/HSLEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/HSLEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nHSLEffect(hue = 1L, sat = 1L, lum = 1L)\n</code></pre>"},{"location":"man/HeaderFooter/","title":"HeaderFooter","text":"<p>Source code</p>"},{"location":"man/HeaderFooter/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.header_footer.html</p>"},{"location":"man/HeaderFooter/#usage","title":"Usage","text":"<pre><code>HeaderFooter(\n  differentOddEven = NULL,\n  differentFirst = NULL,\n  scaleWithDoc = NULL,\n  alignWithMargins = NULL,\n  oddHeader = NULL,\n  oddFooter = NULL,\n  evenHeader = NULL,\n  evenFooter = NULL,\n  firstHeader = NULL,\n  firstFooter = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/HeaderFooter/#arguments","title":"Arguments","text":"<code>differentOddEven</code>  differentOddEven  <code>differentFirst</code>  differentFirst  <code>scaleWithDoc</code>  scaleWithDoc  <code>alignWithMargins</code>  alignWithMargins  <code>oddHeader</code>  oddHeader  <code>oddFooter</code>  oddFooter  <code>evenHeader</code>  evenHeader  <code>evenFooter</code>  evenFooter  <code>firstHeader</code>  firstHeader  <code>firstFooter</code>  firstFooter  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/HeaderFooter/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/HeaderFooter/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nHeaderFooter()\n</code></pre>"},{"location":"man/HeaderFooterItem/","title":"HeaderFooterItem","text":"<p>Source code</p>"},{"location":"man/HeaderFooterItem/#description","title":"Description","text":"<p>Header or footer item</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.header_footer.html</p>"},{"location":"man/HeaderFooterItem/#usage","title":"Usage","text":"<pre><code>HeaderFooterItem(left = NULL, right = NULL, center = NULL, ...)\n</code></pre>"},{"location":"man/HeaderFooterItem/#arguments","title":"Arguments","text":"<code>left</code>  left  <code>right</code>  right  <code>center</code>  center  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/HeaderFooterItem/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/HeaderFooterItem/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nHeaderFooterItem()\n</code></pre>"},{"location":"man/Hyperlink/","title":"Hyperlink","text":"<p>Source code</p>"},{"location":"man/Hyperlink/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.hyperlink.html</p>"},{"location":"man/Hyperlink/#usage","title":"Usage","text":"<pre><code>Hyperlink(\n  ref = NULL,\n  location = NULL,\n  tooltip = NULL,\n  display = NULL,\n  id = NULL,\n  target = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Hyperlink/#arguments","title":"Arguments","text":"<code>ref</code>  ref  <code>location</code>  location  <code>tooltip</code>  tooltip  <code>display</code>  display  <code>id</code>  id  <code>target</code>  target  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Hyperlink/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Hyperlink/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nHyperlink(ref = \"ref\")\n</code></pre>"},{"location":"man/HyperlinkList/","title":"HyperlinkList","text":"<p>Source code</p>"},{"location":"man/HyperlinkList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.hyperlink.html</p>"},{"location":"man/HyperlinkList/#usage","title":"Usage","text":"<pre><code>HyperlinkList(hyperlink = list(), ...)\n</code></pre>"},{"location":"man/HyperlinkList/#arguments","title":"Arguments","text":"<code>hyperlink</code>  hyperlink  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/HyperlinkList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/HyperlinkList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nHyperlinkList()\n</code></pre>"},{"location":"man/IconFilter/","title":"IconFilter","text":"<p>Source code</p>"},{"location":"man/IconFilter/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/IconFilter/#usage","title":"Usage","text":"<pre><code>IconFilter(iconSet = NULL, iconId = NULL, ...)\n</code></pre>"},{"location":"man/IconFilter/#arguments","title":"Arguments","text":"<code>iconSet</code>  iconSet  <code>iconId</code>  iconId  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/IconFilter/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/IconFilter/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nIconFilter(iconSet = \"3TrafficLights1\")\n</code></pre>"},{"location":"man/IconSet/","title":"IconSet","text":"<p>Source code</p>"},{"location":"man/IconSet/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/IconSet/#usage","title":"Usage","text":"<pre><code>IconSet(\n  iconSet = NULL,\n  showValue = NULL,\n  percent = NULL,\n  reverse = NULL,\n  cfvo = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/IconSet/#arguments","title":"Arguments","text":"<code>iconSet</code>  iconSet  <code>showValue</code>  showValue  <code>percent</code>  percent  <code>reverse</code>  reverse  <code>cfvo</code>  cfvo  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs"},{"location":"man/IconSet/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/IconSet/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nfirst &lt;- FormatObject(type='percent', val=0)\nsecond &lt;- FormatObject(type='percent', val=33)\nthird &lt;- FormatObject(type='percent', val=67)\niconset &lt;- IconSet(\n  iconSet = '3TrafficLights1',\n  cfvo = list(first, second, third)\n)\n</code></pre>"},{"location":"man/IconSetRule/","title":"IconSetRule","text":"<p>Source code</p>"},{"location":"man/IconSetRule/#description","title":"Description","text":"<p>Convenience function for creating icon set rules</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/IconSetRule/#usage","title":"Usage","text":"<pre><code>IconSetRule(\n  icon_style = NULL,\n  type = NULL,\n  values = NULL,\n  showValue = NULL,\n  percent = NULL,\n  reverse = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/IconSetRule/#arguments","title":"Arguments","text":"<code>icon_style</code>  icon_style  <code>type</code>  type  <code>values</code>  values  <code>showValue</code>  showValue  <code>percent</code>  percent  <code>reverse</code>  reverse  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs"},{"location":"man/IconSetRule/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/IconSetRule/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nIconSetRule('5Arrows', 'percent', list(10, 20, 30, 40, 50),\nshowValue=NULL, percent=NULL, reverse=NULL)\n</code></pre>"},{"location":"man/IgnoredError/","title":"IgnoredError","text":"<p>Source code</p>"},{"location":"man/IgnoredError/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.errors.html</p>"},{"location":"man/IgnoredError/#usage","title":"Usage","text":"<pre><code>IgnoredError(\n  sqref = NULL,\n  evalError = FALSE,\n  twoDigitTextYear = FALSE,\n  numberStoredAsText = FALSE,\n  formula = FALSE,\n  formulaRange = FALSE,\n  unlockedFormula = FALSE,\n  emptyCellReference = FALSE,\n  listDataValidation = FALSE,\n  calculatedColumn = FALSE,\n  ...\n)\n</code></pre>"},{"location":"man/IgnoredError/#arguments","title":"Arguments","text":"<code>sqref</code>  sqref  <code>evalError</code>  evalError  <code>twoDigitTextYear</code>  twoDigitTextYear  <code>numberStoredAsText</code>  numberStoredAsText  <code>formula</code>  formula  <code>formulaRange</code>  formulaRange  <code>unlockedFormula</code>  unlockedFormula  <code>emptyCellReference</code>  emptyCellReference  <code>listDataValidation</code>  listDataValidation  <code>calculatedColumn</code>  calculatedColumn  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/IgnoredError/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/IgnoredError/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nIgnoredError()\n</code></pre>"},{"location":"man/IgnoredErrors/","title":"IgnoredErrors","text":"<p>Source code</p>"},{"location":"man/IgnoredErrors/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.errors.html</p>"},{"location":"man/IgnoredErrors/#usage","title":"Usage","text":"<pre><code>IgnoredErrors(ignoredError = list(), extLst = NULL, ...)\n</code></pre>"},{"location":"man/IgnoredErrors/#arguments","title":"Arguments","text":"<code>ignoredError</code>  ignoredError  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/IgnoredErrors/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/IgnoredErrors/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nIgnoredErrors()\n</code></pre>"},{"location":"man/Image/","title":"Image","text":"<p>Source code</p>"},{"location":"man/Image/#description","title":"Description","text":"<p>Image in a spreadsheet. You must have the Pillow Python library installed, which can be installed using \u2018install_pillow()\u2019.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.image.html</p>"},{"location":"man/Image/#usage","title":"Usage","text":"<pre><code>Image(img, ...)\n</code></pre>"},{"location":"man/Image/#arguments","title":"Arguments","text":"<code>img</code>  img  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Image/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Image/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ninstall_pillow()\nimage_path &lt;- system.file('extdata/logo.png',package='xlcharts')\nImage(img = image_path)\n</code></pre>"},{"location":"man/InlineFont/","title":"InlineFont","text":"<p>Source code</p>"},{"location":"man/InlineFont/#description","title":"Description","text":"<p>Font for inline text because, yes what you need are different objects with the same elements but different constraints.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.text.html</p>"},{"location":"man/InlineFont/#usage","title":"Usage","text":"<pre><code>InlineFont(\n  rFont = NULL,\n  charset = NULL,\n  family = NULL,\n  b = NULL,\n  i = NULL,\n  strike = NULL,\n  outline = NULL,\n  shadow = NULL,\n  condense = NULL,\n  extend = NULL,\n  color = NULL,\n  sz = NULL,\n  u = NULL,\n  vertAlign = NULL,\n  scheme = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/InlineFont/#arguments","title":"Arguments","text":"<code>rFont</code>  rFont  <code>charset</code>  charset  <code>family</code>  family  <code>b</code>  b  <code>i</code>  i  <code>strike</code>  strike  <code>outline</code>  outline  <code>shadow</code>  shadow  <code>condense</code>  condense  <code>extend</code>  extend  <code>color</code>  color  <code>sz</code>  sz  <code>u</code>  u  <code>vertAlign</code>  vertAlign  <code>scheme</code>  scheme  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/InlineFont/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/InlineFont/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nInlineFont()\n</code></pre>"},{"location":"man/InnerShadowEffect/","title":"InnerShadowEffect","text":"<p>Source code</p>"},{"location":"man/InnerShadowEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/InnerShadowEffect/#usage","title":"Usage","text":"<pre><code>InnerShadowEffect(blurRad = NULL, dist = NULL, dir = NULL, ...)\n</code></pre>"},{"location":"man/InnerShadowEffect/#arguments","title":"Arguments","text":"<code>blurRad</code>  blurRad  <code>dist</code>  dist  <code>dir</code>  dir  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/InnerShadowEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/InnerShadowEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nInnerShadowEffect(blurRad = 1, dist = 1, dir = 1)\n</code></pre>"},{"location":"man/InputCells/","title":"InputCells","text":"<p>Source code</p>"},{"location":"man/InputCells/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.scenario.html</p>"},{"location":"man/InputCells/#usage","title":"Usage","text":"<pre><code>InputCells(\n  r = NULL,\n  deleted = FALSE,\n  undone = FALSE,\n  val = NULL,\n  numFmtId = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/InputCells/#arguments","title":"Arguments","text":"<code>r</code>  r  <code>deleted</code>  deleted  <code>undone</code>  undone  <code>val</code>  val  <code>numFmtId</code>  numFmtId  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/InputCells/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/InputCells/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nInputCells(r = \"r\", val = \"val\")\n</code></pre>"},{"location":"man/Layout/","title":"Layout","text":"<p>Source code</p>"},{"location":"man/Layout/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.layout.html</p>"},{"location":"man/Layout/#usage","title":"Usage","text":"<pre><code>Layout(manualLayout = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/Layout/#arguments","title":"Arguments","text":"<code>manualLayout</code>  manualLayout  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Layout/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Layout/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLayout()\n</code></pre>"},{"location":"man/Legend/","title":"Legend","text":"<p>Source code</p>"},{"location":"man/Legend/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.legend.html</p>"},{"location":"man/Legend/#usage","title":"Usage","text":"<pre><code>Legend(\n  legendPos = \"r\",\n  legendEntry = list(),\n  layout = NULL,\n  overlay = NULL,\n  spPr = NULL,\n  txPr = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Legend/#arguments","title":"Arguments","text":"<code>legendPos</code>  legendPos  <code>legendEntry</code>  legendEntry  <code>layout</code>  layout  <code>overlay</code>  overlay  <code>spPr</code>  spPr  <code>txPr</code>  txPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Legend/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Legend/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLegend()\n</code></pre>"},{"location":"man/LegendEntry/","title":"LegendEntry","text":"<p>Source code</p>"},{"location":"man/LegendEntry/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.legend.html</p>"},{"location":"man/LegendEntry/#usage","title":"Usage","text":"<pre><code>LegendEntry(idx = 0, delete = NULL, txPr = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/LegendEntry/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>delete</code>  delete  <code>txPr</code>  txPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LegendEntry/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LegendEntry/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLegendEntry()\n</code></pre>"},{"location":"man/Level/","title":"Level","text":"<p>Source code</p>"},{"location":"man/Level/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/Level/#usage","title":"Usage","text":"<pre><code>Level(pt = list(), ...)\n</code></pre>"},{"location":"man/Level/#arguments","title":"Arguments","text":"<code>pt</code>  pt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Level/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Level/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLevel()\n</code></pre>"},{"location":"man/LightRig/","title":"LightRig","text":"<p>Source code</p>"},{"location":"man/LightRig/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/LightRig/#usage","title":"Usage","text":"<pre><code>LightRig(rig = NULL, dir = NULL, rot = NULL, ...)\n</code></pre>"},{"location":"man/LightRig/#arguments","title":"Arguments","text":"<code>rig</code>  rig  <code>dir</code>  dir  <code>rot</code>  rot  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LightRig/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LightRig/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLightRig(rig = \"morning\", dir = \"t\")\n</code></pre>"},{"location":"man/LineBreak/","title":"LineBreak","text":"<p>Source code</p>"},{"location":"man/LineBreak/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/LineBreak/#usage","title":"Usage","text":"<pre><code>LineBreak(rPr = NULL, ...)\n</code></pre>"},{"location":"man/LineBreak/#arguments","title":"Arguments","text":"<code>rPr</code>  rPr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LineBreak/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LineBreak/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLineBreak()\n</code></pre>"},{"location":"man/LineChart/","title":"LineChart","text":"<p>Source code</p>"},{"location":"man/LineChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.line_chart.html</p>"},{"location":"man/LineChart/#usage","title":"Usage","text":"<pre><code>LineChart(\n  hiLowLines = NULL,\n  upDownBars = NULL,\n  marker = NULL,\n  smooth = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/LineChart/#arguments","title":"Arguments","text":"<code>hiLowLines</code>  hiLowLines  <code>upDownBars</code>  upDownBars  <code>marker</code>  marker  <code>smooth</code>  smooth  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LineChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LineChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLineChart()\n</code></pre>"},{"location":"man/LineChart3D/","title":"LineChart3D","text":"<p>Source code</p>"},{"location":"man/LineChart3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.line_chart.html</p>"},{"location":"man/LineChart3D/#usage","title":"Usage","text":"<pre><code>LineChart3D(\n  gapDepth = NULL,\n  hiLowLines = NULL,\n  upDownBars = NULL,\n  marker = NULL,\n  smooth = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/LineChart3D/#arguments","title":"Arguments","text":"<code>gapDepth</code>  gapDepth  <code>hiLowLines</code>  hiLowLines  <code>upDownBars</code>  upDownBars  <code>marker</code>  marker  <code>smooth</code>  smooth  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LineChart3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LineChart3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLineChart3D()\n</code></pre>"},{"location":"man/LineEndProperties/","title":"LineEndProperties","text":"<p>Source code</p>"},{"location":"man/LineEndProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.line.html</p>"},{"location":"man/LineEndProperties/#usage","title":"Usage","text":"<pre><code>LineEndProperties(type = NULL, w = NULL, len = NULL, ...)\n</code></pre>"},{"location":"man/LineEndProperties/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>w</code>  w  <code>len</code>  len  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LineEndProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LineEndProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLineEndProperties()\n</code></pre>"},{"location":"man/LineProperties/","title":"LineProperties","text":"<p>Source code</p>"},{"location":"man/LineProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.line.html</p>"},{"location":"man/LineProperties/#usage","title":"Usage","text":"<pre><code>LineProperties(\n  w = NULL,\n  cap = NULL,\n  cmpd = NULL,\n  algn = NULL,\n  noFill = NULL,\n  solidFill = NULL,\n  gradFill = NULL,\n  pattFill = NULL,\n  prstDash = NULL,\n  custDash = NULL,\n  round = NULL,\n  bevel = NULL,\n  miter = NULL,\n  headEnd = NULL,\n  tailEnd = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/LineProperties/#arguments","title":"Arguments","text":"<code>w</code>  w  <code>cap</code>  cap  <code>cmpd</code>  cmpd  <code>algn</code>  algn  <code>noFill</code>  noFill  <code>solidFill</code>  solidFill  <code>gradFill</code>  gradFill  <code>pattFill</code>  pattFill  <code>prstDash</code>  prstDash  <code>custDash</code>  custDash  <code>round</code>  round  <code>bevel</code>  bevel  <code>miter</code>  miter  <code>headEnd</code>  headEnd  <code>tailEnd</code>  tailEnd  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LineProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LineProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLineProperties()\n</code></pre>"},{"location":"man/LinearShadeProperties/","title":"LinearShadeProperties","text":"<p>Source code</p>"},{"location":"man/LinearShadeProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/LinearShadeProperties/#usage","title":"Usage","text":"<pre><code>LinearShadeProperties(ang = NULL, scaled = NULL, ...)\n</code></pre>"},{"location":"man/LinearShadeProperties/#arguments","title":"Arguments","text":"<code>ang</code>  ang  <code>scaled</code>  scaled  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LinearShadeProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LinearShadeProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLinearShadeProperties(ang = 30)\n</code></pre>"},{"location":"man/ListStyle/","title":"ListStyle","text":"<p>Source code</p>"},{"location":"man/ListStyle/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/ListStyle/#usage","title":"Usage","text":"<pre><code>ListStyle(\n  defPPr = NULL,\n  lvl1pPr = NULL,\n  lvl2pPr = NULL,\n  lvl3pPr = NULL,\n  lvl4pPr = NULL,\n  lvl5pPr = NULL,\n  lvl6pPr = NULL,\n  lvl7pPr = NULL,\n  lvl8pPr = NULL,\n  lvl9pPr = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ListStyle/#arguments","title":"Arguments","text":"<code>defPPr</code>  defPPr  <code>lvl1pPr</code>  lvl1pPr  <code>lvl2pPr</code>  lvl2pPr  <code>lvl3pPr</code>  lvl3pPr  <code>lvl4pPr</code>  lvl4pPr  <code>lvl5pPr</code>  lvl5pPr  <code>lvl6pPr</code>  lvl6pPr  <code>lvl7pPr</code>  lvl7pPr  <code>lvl8pPr</code>  lvl8pPr  <code>lvl9pPr</code>  lvl9pPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ListStyle/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ListStyle/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nListStyle()\n</code></pre>"},{"location":"man/LuminanceEffect/","title":"LuminanceEffect","text":"<p>Source code</p>"},{"location":"man/LuminanceEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/LuminanceEffect/#usage","title":"Usage","text":"<pre><code>LuminanceEffect(bright = 0L, contrast = 0L, ...)\n</code></pre>"},{"location":"man/LuminanceEffect/#arguments","title":"Arguments","text":"<code>bright</code>  bright  <code>contrast</code>  contrast  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/LuminanceEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/LuminanceEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nLuminanceEffect()\n</code></pre>"},{"location":"man/ManualLayout/","title":"ManualLayout","text":"<p>Source code</p>"},{"location":"man/ManualLayout/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.layout.html</p>"},{"location":"man/ManualLayout/#usage","title":"Usage","text":"<pre><code>ManualLayout(\n  layoutTarget = NULL,\n  xMode = NULL,\n  yMode = NULL,\n  wMode = \"factor\",\n  hMode = \"factor\",\n  x = NULL,\n  y = NULL,\n  w = NULL,\n  h = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ManualLayout/#arguments","title":"Arguments","text":"<code>layoutTarget</code>  layoutTarget  <code>xMode</code>  xMode  <code>yMode</code>  yMode  <code>wMode</code>  wMode  <code>hMode</code>  hMode  <code>x</code>  x  <code>y</code>  y  <code>w</code>  w  <code>h</code>  h  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ManualLayout/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ManualLayout/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nManualLayout()\n</code></pre>"},{"location":"man/Marker/","title":"Marker","text":"<p>Source code</p>"},{"location":"man/Marker/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.marker.html</p>"},{"location":"man/Marker/#usage","title":"Usage","text":"<pre><code>Marker(symbol = NULL, size = NULL, spPr = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/Marker/#arguments","title":"Arguments","text":"<code>symbol</code>  symbol  <code>size</code>  size  <code>spPr</code>  spPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Marker/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Marker/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nMarker()\n</code></pre>"},{"location":"man/MergeCell/","title":"MergeCell","text":"<p>Source code</p>"},{"location":"man/MergeCell/#description","title":"Description","text":"<p>Represents a range in a sheet: title and coordinates.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.merge.html</p>"},{"location":"man/MergeCell/#usage","title":"Usage","text":"<pre><code>MergeCell(ref = NULL, ...)\n</code></pre>"},{"location":"man/MergeCell/#arguments","title":"Arguments","text":"<code>ref</code>  ref  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/MergeCell/#details","title":"Details","text":"<p>This object is used to perform operations on ranges, like: - shift, expand or shrink - union/intersection with another sheet range, We can check whether a range is: - equal or not equal to another, - disjoint of another, - contained in another. We can get: - the size of a range. - the range bounds (vertices) - the coordinates, - the string representation,</p>"},{"location":"man/MergeCell/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/MergeCell/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nMergeCell(ref = \"A1\")\n</code></pre>"},{"location":"man/MergeCells/","title":"MergeCells","text":"<p>Source code</p>"},{"location":"man/MergeCells/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.merge.html</p>"},{"location":"man/MergeCells/#usage","title":"Usage","text":"<pre><code>MergeCells(count = NULL, mergeCell = list(), ...)\n</code></pre>"},{"location":"man/MergeCells/#arguments","title":"Arguments","text":"<code>count</code>  count  <code>mergeCell</code>  mergeCell  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/MergeCells/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/MergeCells/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nMergeCells()\n</code></pre>"},{"location":"man/MergedCell/","title":"MergedCell","text":"<p>Source code</p>"},{"location":"man/MergedCell/#description","title":"Description","text":"<p>Describes the properties of a cell in a merged cell and helps to display the borders of the merged cell.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.cell.html</p>"},{"location":"man/MergedCell/#usage","title":"Usage","text":"<pre><code>MergedCell(worksheet, row = NULL, column = NULL, ...)\n</code></pre>"},{"location":"man/MergedCell/#arguments","title":"Arguments","text":"<code>worksheet</code>  worksheet  <code>row</code>  row  <code>column</code>  column  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/MergedCell/#details","title":"Details","text":"<p>The value of a MergedCell is always NULL.</p>"},{"location":"man/MergedCell/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/MergedCell/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nMergedCell(worksheet = wb$active, row = 1L, column = 1L)\n</code></pre>"},{"location":"man/MergedCellRange/","title":"MergedCellRange","text":"<p>Source code</p>"},{"location":"man/MergedCellRange/#description","title":"Description","text":"<p>MergedCellRange stores the border information of a merged cell in the top</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.merge.html</p>"},{"location":"man/MergedCellRange/#usage","title":"Usage","text":"<pre><code>MergedCellRange(worksheet, coord, ...)\n</code></pre>"},{"location":"man/MergedCellRange/#arguments","title":"Arguments","text":"<code>worksheet</code>  worksheet  <code>coord</code>  coord  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/MergedCellRange/#details","title":"Details","text":"<p>left cell of the merged cell. The remaining cells in the merged cell are stored as MergedCell objects and get their border information from the upper left cell.</p>"},{"location":"man/MergedCellRange/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/MergedCellRange/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nMergedCellRange(worksheet = wb$active, coord = \"A1\")\n</code></pre>"},{"location":"man/MultiCellRange/","title":"MultiCellRange","text":"<p>Source code</p>"},{"location":"man/MultiCellRange/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.cell_range.html</p>"},{"location":"man/MultiCellRange/#usage","title":"Usage","text":"<pre><code>MultiCellRange(ranges = list(), ...)\n</code></pre>"},{"location":"man/MultiCellRange/#arguments","title":"Arguments","text":"<code>ranges</code>  ranges  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/MultiCellRange/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/MultiCellRange/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nMultiCellRange()\n</code></pre>"},{"location":"man/MultiLevelStrData/","title":"MultiLevelStrData","text":"<p>Source code</p>"},{"location":"man/MultiLevelStrData/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/MultiLevelStrData/#usage","title":"Usage","text":"<pre><code>MultiLevelStrData(ptCount = NULL, lvl = list(), extLst = NULL, ...)\n</code></pre>"},{"location":"man/MultiLevelStrData/#arguments","title":"Arguments","text":"<code>ptCount</code>  ptCount  <code>lvl</code>  lvl  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/MultiLevelStrData/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/MultiLevelStrData/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nMultiLevelStrData()\n</code></pre>"},{"location":"man/MultiLevelStrRef/","title":"MultiLevelStrRef","text":"<p>Source code</p>"},{"location":"man/MultiLevelStrRef/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/MultiLevelStrRef/#usage","title":"Usage","text":"<pre><code>MultiLevelStrRef(f = NULL, multiLvlStrCache = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/MultiLevelStrRef/#arguments","title":"Arguments","text":"<code>f</code>  f  <code>multiLvlStrCache</code>  multiLvlStrCache  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/MultiLevelStrRef/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/MultiLevelStrRef/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nMultiLevelStrRef()\n</code></pre>"},{"location":"man/NamedStyle/","title":"NamedStyle","text":"<p>Source code</p>"},{"location":"man/NamedStyle/#description","title":"Description","text":"<p>Named and editable styles</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.named_styles.html</p>"},{"location":"man/NamedStyle/#usage","title":"Usage","text":"<pre><code>NamedStyle(\n  name = \"Normal\",\n  font = NULL,\n  fill = NULL,\n  border = NULL,\n  alignment = NULL,\n  number_format = NULL,\n  protection = NULL,\n  builtinId = NULL,\n  hidden = FALSE,\n  xfId = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/NamedStyle/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>font</code>  font  <code>fill</code>  fill  <code>border</code>  border  <code>alignment</code>  alignment  <code>number_format</code>  number_format  <code>protection</code>  protection  <code>builtinId</code>  builtinId  <code>hidden</code>  hidden  <code>xfId</code>  xfId  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NamedStyle/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NamedStyle/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNamedStyle()\n</code></pre>"},{"location":"man/NamedStyleList/","title":"NamedStyleList","text":"<p>Source code</p>"},{"location":"man/NamedStyleList/#description","title":"Description","text":"<p>Named styles are editable and can be applied to multiple objects</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.named_styles.html</p>"},{"location":"man/NamedStyleList/#usage","title":"Usage","text":"<pre><code>NamedStyleList(iterable = list(), ...)\n</code></pre>"},{"location":"man/NamedStyleList/#arguments","title":"Arguments","text":"<code>iterable</code>  iterable  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NamedStyleList/#details","title":"Details","text":"<p>As only the index is stored in referencing objects the order mus be preserved.</p>"},{"location":"man/NamedStyleList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NamedStyleList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNamedStyleList()\n</code></pre>"},{"location":"man/NestedGapAmount/","title":"NestedGapAmount","text":"<p>Source code</p>"},{"location":"man/NestedGapAmount/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.descriptors.html</p>"},{"location":"man/NestedGapAmount/#usage","title":"Usage","text":"<pre><code>NestedGapAmount(...)\n</code></pre>"},{"location":"man/NestedGapAmount/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NestedGapAmount/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NestedGapAmount/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNestedGapAmount()\n</code></pre>"},{"location":"man/NestedOverlap/","title":"NestedOverlap","text":"<p>Source code</p>"},{"location":"man/NestedOverlap/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.descriptors.html</p>"},{"location":"man/NestedOverlap/#usage","title":"Usage","text":"<pre><code>NestedOverlap(...)\n</code></pre>"},{"location":"man/NestedOverlap/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NestedOverlap/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NestedOverlap/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNestedOverlap()\n</code></pre>"},{"location":"man/NonVisualConnectorProperties/","title":"NonVisualConnectorProperties","text":"<p>Source code</p>"},{"location":"man/NonVisualConnectorProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.connector.html</p>"},{"location":"man/NonVisualConnectorProperties/#usage","title":"Usage","text":"<pre><code>NonVisualConnectorProperties(\n  cxnSpLocks = NULL,\n  stCxn = NULL,\n  endCxn = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/NonVisualConnectorProperties/#arguments","title":"Arguments","text":"<code>cxnSpLocks</code>  cxnSpLocks  <code>stCxn</code>  stCxn  <code>endCxn</code>  endCxn  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NonVisualConnectorProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NonVisualConnectorProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNonVisualConnectorProperties()\n</code></pre>"},{"location":"man/NonVisualDrawingShapeProps/","title":"NonVisualDrawingShapeProps","text":"<p>Source code</p>"},{"location":"man/NonVisualDrawingShapeProps/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.properties.html</p>"},{"location":"man/NonVisualDrawingShapeProps/#usage","title":"Usage","text":"<pre><code>NonVisualDrawingShapeProps(spLocks = NULL, txBox = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/NonVisualDrawingShapeProps/#arguments","title":"Arguments","text":"<code>spLocks</code>  spLocks  <code>txBox</code>  txBox  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NonVisualDrawingShapeProps/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NonVisualDrawingShapeProps/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNonVisualDrawingShapeProps()\n</code></pre>"},{"location":"man/NonVisualGraphicFrameProperties/","title":"NonVisualGraphicFrameProperties","text":"<p>Source code</p>"},{"location":"man/NonVisualGraphicFrameProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.graphic.html</p>"},{"location":"man/NonVisualGraphicFrameProperties/#usage","title":"Usage","text":"<pre><code>NonVisualGraphicFrameProperties(graphicFrameLocks = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/NonVisualGraphicFrameProperties/#arguments","title":"Arguments","text":"<code>graphicFrameLocks</code>  graphicFrameLocks  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NonVisualGraphicFrameProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NonVisualGraphicFrameProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNonVisualGraphicFrameProperties()\n</code></pre>"},{"location":"man/NonVisualPictureProperties/","title":"NonVisualPictureProperties","text":"<p>Source code</p>"},{"location":"man/NonVisualPictureProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.picture.html</p>"},{"location":"man/NonVisualPictureProperties/#usage","title":"Usage","text":"<pre><code>NonVisualPictureProperties(\n  preferRelativeResize = NULL,\n  picLocks = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/NonVisualPictureProperties/#arguments","title":"Arguments","text":"<code>preferRelativeResize</code>  preferRelativeResize  <code>picLocks</code>  picLocks  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NonVisualPictureProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NonVisualPictureProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNonVisualPictureProperties()\n</code></pre>"},{"location":"man/NumData/","title":"NumData","text":"<p>Source code</p>"},{"location":"man/NumData/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/NumData/#usage","title":"Usage","text":"<pre><code>NumData(formatCode = NULL, ptCount = NULL, pt = list(), extLst = NULL, ...)\n</code></pre>"},{"location":"man/NumData/#arguments","title":"Arguments","text":"<code>formatCode</code>  formatCode  <code>ptCount</code>  ptCount  <code>pt</code>  pt  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NumData/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NumData/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNumData()\n</code></pre>"},{"location":"man/NumDataSource/","title":"NumDataSource","text":"<p>Source code</p>"},{"location":"man/NumDataSource/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/NumDataSource/#usage","title":"Usage","text":"<pre><code>NumDataSource(numRef = NULL, numLit = NULL, ...)\n</code></pre>"},{"location":"man/NumDataSource/#arguments","title":"Arguments","text":"<code>numRef</code>  numRef  <code>numLit</code>  numLit  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NumDataSource/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NumDataSource/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNumDataSource()\n</code></pre>"},{"location":"man/NumFmt/","title":"NumFmt","text":"<p>Source code</p>"},{"location":"man/NumFmt/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/NumFmt/#usage","title":"Usage","text":"<pre><code>NumFmt(formatCode = NULL, sourceLinked = FALSE, ...)\n</code></pre>"},{"location":"man/NumFmt/#arguments","title":"Arguments","text":"<code>formatCode</code>  formatCode  <code>sourceLinked</code>  sourceLinked  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NumFmt/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NumFmt/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNumFmt(formatCode = \"formatCode\")\n</code></pre>"},{"location":"man/NumRef/","title":"NumRef","text":"<p>Source code</p>"},{"location":"man/NumRef/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/NumRef/#usage","title":"Usage","text":"<pre><code>NumRef(f = NULL, numCache = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/NumRef/#arguments","title":"Arguments","text":"<code>f</code>  f  <code>numCache</code>  numCache  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NumRef/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NumRef/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNumRef()\n</code></pre>"},{"location":"man/NumVal/","title":"NumVal","text":"<p>Source code</p>"},{"location":"man/NumVal/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/NumVal/#usage","title":"Usage","text":"<pre><code>NumVal(idx = NULL, formatCode = NULL, v = NULL)\n</code></pre>"},{"location":"man/NumVal/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>formatCode</code>  formatCode  <code>v</code>  v"},{"location":"man/NumVal/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NumVal/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNumVal(idx = 1L)\n</code></pre>"},{"location":"man/NumericAxis/","title":"NumericAxis","text":"<p>Source code</p>"},{"location":"man/NumericAxis/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.axis.html</p>"},{"location":"man/NumericAxis/#usage","title":"Usage","text":"<pre><code>NumericAxis(\n  crossBetween = NULL,\n  majorUnit = NULL,\n  minorUnit = NULL,\n  dispUnits = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/NumericAxis/#arguments","title":"Arguments","text":"<code>crossBetween</code>  crossBetween  <code>majorUnit</code>  majorUnit  <code>minorUnit</code>  minorUnit  <code>dispUnits</code>  dispUnits  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/NumericAxis/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/NumericAxis/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nNumericAxis()\n</code></pre>"},{"location":"man/ObjectAnchor/","title":"ObjectAnchor","text":"<p>Source code</p>"},{"location":"man/ObjectAnchor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.ole.html</p>"},{"location":"man/ObjectAnchor/#usage","title":"Usage","text":"<pre><code>ObjectAnchor(\n  from = NULL,\n  to = NULL,\n  moveWithCells = FALSE,\n  sizeWithCells = FALSE,\n  z_order = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ObjectAnchor/#arguments","title":"Arguments","text":"<code>from</code>  \\_from  <code>to</code>  to  <code>moveWithCells</code>  moveWithCells  <code>sizeWithCells</code>  sizeWithCells  <code>z_order</code>  z_order  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ObjectAnchor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ObjectAnchor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nObjectAnchor(from = AnchorMarker(), to = AnchorMarker())\n</code></pre>"},{"location":"man/OneCellAnchor/","title":"OneCellAnchor","text":"<p>Source code</p>"},{"location":"man/OneCellAnchor/#description","title":"Description","text":"<p>Note that the argument \u2019_from\u2019 has been transformed to \u2018from\u2019.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.spreadsheet_drawing.html</p>"},{"location":"man/OneCellAnchor/#usage","title":"Usage","text":"<pre><code>OneCellAnchor(from = NULL, ext = NULL, ...)\n</code></pre>"},{"location":"man/OneCellAnchor/#arguments","title":"Arguments","text":"<code>from</code>  from  <code>ext</code>  ext  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/OneCellAnchor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/OneCellAnchor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nOneCellAnchor()\n</code></pre>"},{"location":"man/Outline/","title":"Outline","text":"<p>Source code</p>"},{"location":"man/Outline/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.properties.html</p>"},{"location":"man/Outline/#usage","title":"Usage","text":"<pre><code>Outline(\n  applyStyles = NULL,\n  summaryBelow = NULL,\n  summaryRight = NULL,\n  showOutlineSymbols = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Outline/#arguments","title":"Arguments","text":"<code>applyStyles</code>  applyStyles  <code>summaryBelow</code>  summaryBelow  <code>summaryRight</code>  summaryRight  <code>showOutlineSymbols</code>  showOutlineSymbols  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Outline/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Outline/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nOutline()\n</code></pre>"},{"location":"man/PageBreak/","title":"PageBreak","text":"<p>Source code</p>"},{"location":"man/PageBreak/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.pagebreak.html</p>"},{"location":"man/PageBreak/#usage","title":"Usage","text":"<pre><code>PageBreak(count = NULL, manualBreakCount = NULL, brk = list(), ...)\n</code></pre>"},{"location":"man/PageBreak/#arguments","title":"Arguments","text":"<code>count</code>  count  <code>manualBreakCount</code>  manualBreakCount  <code>brk</code>  brk  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PageBreak/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PageBreak/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPageBreak()\n</code></pre>"},{"location":"man/PageMargins/","title":"PageMargins","text":"<p>Source code</p>"},{"location":"man/PageMargins/#description","title":"Description","text":"<p>Information about page margins for view/print layouts.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.page.html</p>"},{"location":"man/PageMargins/#usage","title":"Usage","text":"<pre><code>PageMargins(\n  left = 0.75,\n  right = 0.75,\n  top = 1L,\n  bottom = 1L,\n  header = 0.5,\n  footer = 0.5,\n  ...\n)\n</code></pre>"},{"location":"man/PageMargins/#arguments","title":"Arguments","text":"<code>left</code>  left  <code>right</code>  right  <code>top</code>  top  <code>bottom</code>  bottom  <code>header</code>  header  <code>footer</code>  footer  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PageMargins/#details","title":"Details","text":"<p>Standard values (in inches) left, right = 0.75 top, bottom = 1 header, footer = 0.5</p>"},{"location":"man/PageMargins/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PageMargins/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPageMargins()\n</code></pre>"},{"location":"man/PageSetupProperties/","title":"PageSetupProperties","text":"<p>Source code</p>"},{"location":"man/PageSetupProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.properties.html</p>"},{"location":"man/PageSetupProperties/#usage","title":"Usage","text":"<pre><code>PageSetupProperties(autoPageBreaks = NULL, fitToPage = NULL, ...)\n</code></pre>"},{"location":"man/PageSetupProperties/#arguments","title":"Arguments","text":"<code>autoPageBreaks</code>  autoPageBreaks  <code>fitToPage</code>  fitToPage  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PageSetupProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PageSetupProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPageSetupProperties()\n</code></pre>"},{"location":"man/Pane/","title":"Pane","text":"<p>Source code</p>"},{"location":"man/Pane/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.views.html</p>"},{"location":"man/Pane/#usage","title":"Usage","text":"<pre><code>Pane(\n  xSplit = NULL,\n  ySplit = NULL,\n  topLeftCell = NULL,\n  activePane = \"topLeft\",\n  state = \"split\",\n  ...\n)\n</code></pre>"},{"location":"man/Pane/#arguments","title":"Arguments","text":"<code>xSplit</code>  xSplit  <code>ySplit</code>  ySplit  <code>topLeftCell</code>  topLeftCell  <code>activePane</code>  activePane  <code>state</code>  state  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Pane/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Pane/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPane()\n</code></pre>"},{"location":"man/Paragraph/","title":"Paragraph","text":"<p>Source code</p>"},{"location":"man/Paragraph/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/Paragraph/#usage","title":"Usage","text":"<pre><code>Paragraph(pPr = NULL, endParaRPr = NULL, r = NULL, br = NULL, fld = NULL, ...)\n</code></pre>"},{"location":"man/Paragraph/#arguments","title":"Arguments","text":"<code>pPr</code>  pPr  <code>endParaRPr</code>  endParaRPr  <code>r</code>  r  <code>br</code>  br  <code>fld</code>  fld  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Paragraph/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Paragraph/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nParagraph()\n</code></pre>"},{"location":"man/ParagraphProperties/","title":"ParagraphProperties","text":"<p>Source code</p>"},{"location":"man/ParagraphProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/ParagraphProperties/#usage","title":"Usage","text":"<pre><code>ParagraphProperties(\n  marL = NULL,\n  marR = NULL,\n  lvl = NULL,\n  indent = NULL,\n  algn = NULL,\n  defTabSz = NULL,\n  rtl = NULL,\n  eaLnBrk = NULL,\n  fontAlgn = NULL,\n  latinLnBrk = NULL,\n  hangingPunct = NULL,\n  lnSpc = NULL,\n  spcBef = NULL,\n  spcAft = NULL,\n  tabLst = NULL,\n  defRPr = NULL,\n  extLst = NULL,\n  buClrTx = NULL,\n  buClr = NULL,\n  buSzTx = NULL,\n  buSzPct = NULL,\n  buSzPts = NULL,\n  buFontTx = NULL,\n  buFont = NULL,\n  buNone = NULL,\n  buAutoNum = NULL,\n  buChar = NULL,\n  buBlip = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ParagraphProperties/#arguments","title":"Arguments","text":"<code>marL</code>  marL  <code>marR</code>  marR  <code>lvl</code>  lvl  <code>indent</code>  indent  <code>algn</code>  algn  <code>defTabSz</code>  defTabSz  <code>rtl</code>  rtl  <code>eaLnBrk</code>  eaLnBrk  <code>fontAlgn</code>  fontAlgn  <code>latinLnBrk</code>  latinLnBrk  <code>hangingPunct</code>  hangingPunct  <code>lnSpc</code>  lnSpc  <code>spcBef</code>  spcBef  <code>spcAft</code>  spcAft  <code>tabLst</code>  tabLst  <code>defRPr</code>  defRPr  <code>extLst</code>  extLst  <code>buClrTx</code>  buClrTx  <code>buClr</code>  buClr  <code>buSzTx</code>  buSzTx  <code>buSzPct</code>  buSzPct  <code>buSzPts</code>  buSzPts  <code>buFontTx</code>  buFontTx  <code>buFont</code>  buFont  <code>buNone</code>  buNone  <code>buAutoNum</code>  buAutoNum  <code>buChar</code>  buChar  <code>buBlip</code>  buBlip  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ParagraphProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ParagraphProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nParagraphProperties()\n</code></pre>"},{"location":"man/Path2D/","title":"Path2D","text":"<p>Source code</p>"},{"location":"man/Path2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Path2D/#usage","title":"Usage","text":"<pre><code>Path2D(w = NULL, h = NULL, fill = NULL, stroke = NULL, extrusionOk = NULL, ...)\n</code></pre>"},{"location":"man/Path2D/#arguments","title":"Arguments","text":"<code>w</code>  w  <code>h</code>  h  <code>fill</code>  fill  <code>stroke</code>  stroke  <code>extrusionOk</code>  extrusionOk  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Path2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Path2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPath2D(w = 1L, h = 1L)\n</code></pre>"},{"location":"man/Path2DList/","title":"Path2DList","text":"<p>Source code</p>"},{"location":"man/Path2DList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Path2DList/#usage","title":"Usage","text":"<pre><code>Path2DList(path = NULL, ...)\n</code></pre>"},{"location":"man/Path2DList/#arguments","title":"Arguments","text":"<code>path</code>  path  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Path2DList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Path2DList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPath2DList()\n</code></pre>"},{"location":"man/PathShadeProperties/","title":"PathShadeProperties","text":"<p>Source code</p>"},{"location":"man/PathShadeProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/PathShadeProperties/#usage","title":"Usage","text":"<pre><code>PathShadeProperties(path = NULL, fillToRect = NULL, ...)\n</code></pre>"},{"location":"man/PathShadeProperties/#arguments","title":"Arguments","text":"<code>path</code>  path  <code>fillToRect</code>  fillToRect  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PathShadeProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PathShadeProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPathShadeProperties(path = \"circle\")\n</code></pre>"},{"location":"man/PatternFill/","title":"PatternFill","text":"<p>Source code</p>"},{"location":"man/PatternFill/#description","title":"Description","text":"<p>Area fill patterns for use in styles.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html</p>"},{"location":"man/PatternFill/#usage","title":"Usage","text":"<pre><code>PatternFill(\n  patternType = NULL,\n  fill_type = NULL,\n  start_color = NULL,\n  end_color = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/PatternFill/#arguments","title":"Arguments","text":"<code>patternType</code>  patternType  <code>fill_type</code>  fill_type  <code>start_color</code>  start_color  <code>end_color</code>  end_color  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PatternFill/#details","title":"Details","text":"<p>Caution: if you do not specify a fill_type, other attributes will have no effect !</p>"},{"location":"man/PatternFill/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PatternFill/#caution","title":"Caution","text":"<p>if you do not specify a fill_type, other attributes will have: no effect !</p>"},{"location":"man/PatternFill/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPatternFill()\n</code></pre>"},{"location":"man/PatternFillProperties/","title":"PatternFillProperties","text":"<p>Source code</p>"},{"location":"man/PatternFillProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/PatternFillProperties/#usage","title":"Usage","text":"<pre><code>PatternFillProperties(prst = NULL, fgClr = NULL, bgClr = NULL, ...)\n</code></pre>"},{"location":"man/PatternFillProperties/#arguments","title":"Arguments","text":"<code>prst</code>  prst  <code>fgClr</code>  fgClr  <code>bgClr</code>  bgClr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PatternFillProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PatternFillProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPatternFillProperties()\n</code></pre>"},{"location":"man/PhoneticProperties/","title":"PhoneticProperties","text":"<p>Source code</p>"},{"location":"man/PhoneticProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.text.html</p>"},{"location":"man/PhoneticProperties/#usage","title":"Usage","text":"<pre><code>PhoneticProperties(fontId = NULL, type = NULL, alignment = NULL, ...)\n</code></pre>"},{"location":"man/PhoneticProperties/#arguments","title":"Arguments","text":"<code>fontId</code>  fontId  <code>type</code>  type  <code>alignment</code>  alignment  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PhoneticProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PhoneticProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPhoneticProperties(fontId = 1L)\n</code></pre>"},{"location":"man/PhoneticText/","title":"PhoneticText","text":"<p>Source code</p>"},{"location":"man/PhoneticText/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.text.html</p>"},{"location":"man/PhoneticText/#usage","title":"Usage","text":"<pre><code>PhoneticText(sb = NULL, eb = NULL, t = NULL, ...)\n</code></pre>"},{"location":"man/PhoneticText/#arguments","title":"Arguments","text":"<code>sb</code>  sb  <code>eb</code>  eb  <code>t</code>  t  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PhoneticText/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PhoneticText/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPhoneticText(sb = 1L, eb = 1L)\n</code></pre>"},{"location":"man/PieChart/","title":"PieChart","text":"<p>Source code</p>"},{"location":"man/PieChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.pie_chart.html</p>"},{"location":"man/PieChart/#usage","title":"Usage","text":"<pre><code>PieChart(firstSliceAng = 0L, extLst = NULL, ...)\n</code></pre>"},{"location":"man/PieChart/#arguments","title":"Arguments","text":"<code>firstSliceAng</code>  firstSliceAng  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PieChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PieChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPieChart()\n</code></pre>"},{"location":"man/PieChart3D/","title":"PieChart3D","text":"<p>Source code</p>"},{"location":"man/PieChart3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.pie_chart.html</p>"},{"location":"man/PieChart3D/#usage","title":"Usage","text":"<pre><code>PieChart3D(varyColors = TRUE, ser = list(), dLbls = NULL, ...)\n</code></pre>"},{"location":"man/PieChart3D/#arguments","title":"Arguments","text":"<code>varyColors</code>  varyColors  <code>ser</code>  ser  <code>dLbls</code>  dLbls  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PieChart3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PieChart3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPieChart3D()\n</code></pre>"},{"location":"man/PivotFormat/","title":"PivotFormat","text":"<p>Source code</p>"},{"location":"man/PivotFormat/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.pivot.html</p>"},{"location":"man/PivotFormat/#usage","title":"Usage","text":"<pre><code>PivotFormat(\n  idx = 0L,\n  spPr = NULL,\n  txPr = NULL,\n  marker = NULL,\n  dLbl = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/PivotFormat/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>spPr</code>  spPr  <code>txPr</code>  txPr  <code>marker</code>  marker  <code>dLbl</code>  dLbl  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PivotFormat/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PivotFormat/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPivotFormat()\n</code></pre>"},{"location":"man/PivotSource/","title":"PivotSource","text":"<p>Source code</p>"},{"location":"man/PivotSource/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.pivot.html</p>"},{"location":"man/PivotSource/#usage","title":"Usage","text":"<pre><code>PivotSource(name = NULL, fmtId = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/PivotSource/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>fmtId</code>  fmtId  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PivotSource/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PivotSource/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPivotSource(fmtId = 1L)\n</code></pre>"},{"location":"man/PlotArea/","title":"PlotArea","text":"<p>Source code</p>"},{"location":"man/PlotArea/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.plotarea.html</p>"},{"location":"man/PlotArea/#usage","title":"Usage","text":"<pre><code>PlotArea(\n  layout = NULL,\n  dTable = NULL,\n  spPr = NULL,\n  charts = list(),\n  axes = list(),\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/PlotArea/#arguments","title":"Arguments","text":"<code>layout</code>  layout  <code>dTable</code>  dTable  <code>spPr</code>  spPr  <code>charts</code>  \\_charts  <code>axes</code>  \\_axes  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PlotArea/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PlotArea/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPlotArea()\n</code></pre>"},{"location":"man/Point2D/","title":"Point2D","text":"<p>Source code</p>"},{"location":"man/Point2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Point2D/#usage","title":"Usage","text":"<pre><code>Point2D(x = NULL, y = NULL, ...)\n</code></pre>"},{"location":"man/Point2D/#arguments","title":"Arguments","text":"<code>x</code>  x  <code>y</code>  y  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Point2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Point2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPoint2D(x = 1L, y = 1L)\n</code></pre>"},{"location":"man/Point3D/","title":"Point3D","text":"<p>Source code</p>"},{"location":"man/Point3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Point3D/#usage","title":"Usage","text":"<pre><code>Point3D(x = NULL, y = NULL, z = NULL, ...)\n</code></pre>"},{"location":"man/Point3D/#arguments","title":"Arguments","text":"<code>x</code>  x  <code>y</code>  y  <code>z</code>  z  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Point3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Point3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPoint3D(x = 1L, y = 1L, z = 1L)\n</code></pre>"},{"location":"man/PositiveSize2D/","title":"PositiveSize2D","text":"<p>Source code</p>"},{"location":"man/PositiveSize2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/PositiveSize2D/#usage","title":"Usage","text":"<pre><code>PositiveSize2D(cx = NULL, cy = NULL, ...)\n</code></pre>"},{"location":"man/PositiveSize2D/#arguments","title":"Arguments","text":"<code>cx</code>  cx  <code>cy</code>  cy  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PositiveSize2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PositiveSize2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPositiveSize2D(cx = 1L, cy = 1L)\n</code></pre>"},{"location":"man/PresetGeometry2D/","title":"PresetGeometry2D","text":"<p>Source code</p>"},{"location":"man/PresetGeometry2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/PresetGeometry2D/#usage","title":"Usage","text":"<pre><code>PresetGeometry2D(prst = NULL, avLst = NULL, ...)\n</code></pre>"},{"location":"man/PresetGeometry2D/#arguments","title":"Arguments","text":"<code>prst</code>  prst  <code>avLst</code>  avLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PresetGeometry2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PresetGeometry2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPresetGeometry2D(prst = \"diamond\")\n</code></pre>"},{"location":"man/PresetShadowEffect/","title":"PresetShadowEffect","text":"<p>Source code</p>"},{"location":"man/PresetShadowEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/PresetShadowEffect/#usage","title":"Usage","text":"<pre><code>PresetShadowEffect(prst = NULL, dist = NULL, dir = NULL, ...)\n</code></pre>"},{"location":"man/PresetShadowEffect/#arguments","title":"Arguments","text":"<code>prst</code>  prst  <code>dist</code>  dist  <code>dir</code>  dir  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PresetShadowEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PresetShadowEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPresetShadowEffect(prst = \"shdw20\", dist = 1L, dir = 1L)\n</code></pre>"},{"location":"man/PrintArea/","title":"PrintArea","text":"<p>Source code</p>"},{"location":"man/PrintArea/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.print_settings.html</p>"},{"location":"man/PrintArea/#usage","title":"Usage","text":"<pre><code>PrintArea(ranges = list(), title = \"\", ...)\n</code></pre>"},{"location":"man/PrintArea/#arguments","title":"Arguments","text":"<code>ranges</code>  ranges  <code>title</code>  title  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PrintArea/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PrintArea/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPrintArea()\n</code></pre>"},{"location":"man/PrintOptions/","title":"PrintOptions","text":"<p>Source code</p>"},{"location":"man/PrintOptions/#description","title":"Description","text":"<p>Worksheet print options</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.page.html</p>"},{"location":"man/PrintOptions/#usage","title":"Usage","text":"<pre><code>PrintOptions(\n  horizontalCentered = NULL,\n  verticalCentered = NULL,\n  headings = NULL,\n  gridLines = NULL,\n  gridLinesSet = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/PrintOptions/#arguments","title":"Arguments","text":"<code>horizontalCentered</code>  horizontalCentered  <code>verticalCentered</code>  verticalCentered  <code>headings</code>  headings  <code>gridLines</code>  gridLines  <code>gridLinesSet</code>  gridLinesSet  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PrintOptions/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PrintOptions/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPrintOptions()\n</code></pre>"},{"location":"man/PrintPageSetup/","title":"PrintPageSetup","text":"<p>Source code</p>"},{"location":"man/PrintPageSetup/#description","title":"Description","text":"<p>Worksheet print page setup</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.page.html</p>"},{"location":"man/PrintPageSetup/#usage","title":"Usage","text":"<pre><code>PrintPageSetup(\n  worksheet = NULL,\n  orientation = NULL,\n  paperSize = NULL,\n  scale = NULL,\n  fitToHeight = NULL,\n  fitToWidth = NULL,\n  firstPageNumber = NULL,\n  useFirstPageNumber = NULL,\n  paperHeight = NULL,\n  paperWidth = NULL,\n  pageOrder = NULL,\n  usePrinterDefaults = NULL,\n  blackAndWhite = NULL,\n  draft = NULL,\n  cellComments = NULL,\n  errors = NULL,\n  horizontalDpi = NULL,\n  verticalDpi = NULL,\n  copies = NULL,\n  id = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/PrintPageSetup/#arguments","title":"Arguments","text":"<code>worksheet</code>  worksheet  <code>orientation</code>  orientation  <code>paperSize</code>  paperSize  <code>scale</code>  scale  <code>fitToHeight</code>  fitToHeight  <code>fitToWidth</code>  fitToWidth  <code>firstPageNumber</code>  firstPageNumber  <code>useFirstPageNumber</code>  useFirstPageNumber  <code>paperHeight</code>  paperHeight  <code>paperWidth</code>  paperWidth  <code>pageOrder</code>  pageOrder  <code>usePrinterDefaults</code>  usePrinterDefaults  <code>blackAndWhite</code>  blackAndWhite  <code>draft</code>  draft  <code>cellComments</code>  cellComments  <code>errors</code>  errors  <code>horizontalDpi</code>  horizontalDpi  <code>verticalDpi</code>  verticalDpi  <code>copies</code>  copies  <code>id</code>  id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PrintPageSetup/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PrintPageSetup/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPrintPageSetup()\n</code></pre>"},{"location":"man/PrintSettings/","title":"PrintSettings","text":"<p>Source code</p>"},{"location":"man/PrintSettings/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.print_settings.html</p>"},{"location":"man/PrintSettings/#usage","title":"Usage","text":"<pre><code>PrintSettings(headerFooter = NULL, pageMargins = NULL, pageSetup = NULL, ...)\n</code></pre>"},{"location":"man/PrintSettings/#arguments","title":"Arguments","text":"<code>headerFooter</code>  headerFooter  <code>pageMargins</code>  pageMargins  <code>pageSetup</code>  pageSetup  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PrintSettings/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PrintSettings/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPrintSettings()\n</code></pre>"},{"location":"man/PrintTitles/","title":"PrintTitles","text":"<p>Source code</p>"},{"location":"man/PrintTitles/#description","title":"Description","text":"<p>Contains at least either a range of rows or columns</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.print_settings.html</p>"},{"location":"man/PrintTitles/#usage","title":"Usage","text":"<pre><code>PrintTitles(cols = NULL, rows = NULL, title = \"\", ...)\n</code></pre>"},{"location":"man/PrintTitles/#arguments","title":"Arguments","text":"<code>cols</code>  cols  <code>rows</code>  rows  <code>title</code>  title  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/PrintTitles/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/PrintTitles/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nPrintTitles()\n</code></pre>"},{"location":"man/ProjectedPieChart/","title":"ProjectedPieChart","text":"<p>Source code</p>"},{"location":"man/ProjectedPieChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.pie_chart.html</p>"},{"location":"man/ProjectedPieChart/#usage","title":"Usage","text":"<pre><code>ProjectedPieChart(\n  ofPieType = \"pie\",\n  gapWidth = NULL,\n  splitType = \"auto\",\n  splitPos = NULL,\n  custSplit = NULL,\n  secondPieSize = 75L,\n  serLines = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ProjectedPieChart/#arguments","title":"Arguments","text":"<code>ofPieType</code>  ofPieType  <code>gapWidth</code>  gapWidth  <code>splitType</code>  splitType  <code>splitPos</code>  splitPos  <code>custSplit</code>  custSplit  <code>secondPieSize</code>  secondPieSize  <code>serLines</code>  serLines  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ProjectedPieChart/#details","title":"Details","text":"<p>This element contains the pie of pie or bar of pie series on this chart. Only the first series shall be displayed. The splitType element shall determine whether the splitPos and custSplit elements apply.</p>"},{"location":"man/ProjectedPieChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ProjectedPieChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nProjectedPieChart()\n</code></pre>"},{"location":"man/Protection/","title":"Protection","text":"<p>Source code</p>"},{"location":"man/Protection/#description","title":"Description","text":"<p>Protection options for use in styles.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.protection.html</p>"},{"location":"man/Protection/#usage","title":"Usage","text":"<pre><code>Protection(locked = TRUE, hidden = FALSE, ...)\n</code></pre>"},{"location":"man/Protection/#arguments","title":"Arguments","text":"<code>locked</code>  locked  <code>hidden</code>  hidden  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Protection/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Protection/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nProtection()\n</code></pre>"},{"location":"man/RadarChart/","title":"RadarChart","text":"<p>Source code</p>"},{"location":"man/RadarChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.radar_chart.html</p>"},{"location":"man/RadarChart/#usage","title":"Usage","text":"<pre><code>RadarChart(\n  radarStyle = \"standard\",\n  varyColors = NULL,\n  ser = list(),\n  dLbls = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/RadarChart/#arguments","title":"Arguments","text":"<code>radarStyle</code>  radarStyle  <code>varyColors</code>  varyColors  <code>ser</code>  ser  <code>dLbls</code>  dLbls  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/RadarChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/RadarChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRadarChart()\n</code></pre>"},{"location":"man/ReadOnlyCell/","title":"ReadOnlyCell","text":"<p>Source code</p>"},{"location":"man/ReadOnlyCell/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.read_only.html</p>"},{"location":"man/ReadOnlyCell/#usage","title":"Usage","text":"<pre><code>ReadOnlyCell(sheet, row, column, value, data_type = \"n\", style_id = 0L, ...)\n</code></pre>"},{"location":"man/ReadOnlyCell/#arguments","title":"Arguments","text":"<code>sheet</code>  sheet  <code>row</code>  row  <code>column</code>  column  <code>value</code>  value  <code>data_type</code>  data_type  <code>style_id</code>  style_id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ReadOnlyCell/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ReadOnlyCell/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nReadOnlyCell(sheet = \"sheet\", row = 1L, column = 1L, value = 1L)\n</code></pre>"},{"location":"man/Reference/","title":"Reference","text":"<p>Source code</p>"},{"location":"man/Reference/#description","title":"Description","text":"<p>Normalise cell range references</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.reference.html</p>"},{"location":"man/Reference/#usage","title":"Usage","text":"<pre><code>Reference(\n  worksheet = NULL,\n  min_col = NULL,\n  min_row = NULL,\n  max_col = NULL,\n  max_row = NULL,\n  range_string = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Reference/#arguments","title":"Arguments","text":"<code>worksheet</code>  worksheet  <code>min_col</code>  min_col  <code>min_row</code>  min_row  <code>max_col</code>  max_col  <code>max_row</code>  max_row  <code>range_string</code>  range_string  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Reference/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Reference/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nReference(worksheet = wb$active, min_col = 1L, min_row = 1L, max_col = 1L, max_row = 1L)\n</code></pre>"},{"location":"man/RegularTextRun/","title":"RegularTextRun","text":"<p>Source code</p>"},{"location":"man/RegularTextRun/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/RegularTextRun/#usage","title":"Usage","text":"<pre><code>RegularTextRun(rPr = NULL, t = \"\", ...)\n</code></pre>"},{"location":"man/RegularTextRun/#arguments","title":"Arguments","text":"<code>rPr</code>  rPr  <code>t</code>  t  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/RegularTextRun/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/RegularTextRun/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRegularTextRun()\n</code></pre>"},{"location":"man/Related/","title":"Related","text":"<p>Source code</p>"},{"location":"man/Related/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.related.html</p>"},{"location":"man/Related/#usage","title":"Usage","text":"<pre><code>Related(id = NULL, ...)\n</code></pre>"},{"location":"man/Related/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Related/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Related/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRelated()\n</code></pre>"},{"location":"man/RelativeRect/","title":"RelativeRect","text":"<p>Source code</p>"},{"location":"man/RelativeRect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/RelativeRect/#usage","title":"Usage","text":"<pre><code>RelativeRect(l = NULL, t = NULL, r = NULL, b = NULL, ...)\n</code></pre>"},{"location":"man/RelativeRect/#arguments","title":"Arguments","text":"<code>l</code>  l  <code>t</code>  t  <code>r</code>  r  <code>b</code>  b  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/RelativeRect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/RelativeRect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRelativeRect()\n</code></pre>"},{"location":"man/RichTextProperties/","title":"RichTextProperties","text":"<p>Source code</p>"},{"location":"man/RichTextProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/RichTextProperties/#usage","title":"Usage","text":"<pre><code>RichTextProperties(\n  rot = NULL,\n  spcFirstLastPara = NULL,\n  vertOverflow = NULL,\n  horzOverflow = NULL,\n  vert = NULL,\n  wrap = NULL,\n  lIns = NULL,\n  tIns = NULL,\n  rIns = NULL,\n  bIns = NULL,\n  numCol = NULL,\n  spcCol = NULL,\n  rtlCol = NULL,\n  fromWordArt = NULL,\n  anchor = NULL,\n  anchorCtr = NULL,\n  forceAA = NULL,\n  upright = NULL,\n  compatLnSpc = NULL,\n  prstTxWarp = NULL,\n  scene3d = NULL,\n  extLst = NULL,\n  noAutofit = NULL,\n  normAutofit = NULL,\n  spAutoFit = NULL,\n  flatTx = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/RichTextProperties/#arguments","title":"Arguments","text":"<code>rot</code>  rot  <code>spcFirstLastPara</code>  spcFirstLastPara  <code>vertOverflow</code>  vertOverflow  <code>horzOverflow</code>  horzOverflow  <code>vert</code>  vert  <code>wrap</code>  wrap  <code>lIns</code>  lIns  <code>tIns</code>  tIns  <code>rIns</code>  rIns  <code>bIns</code>  bIns  <code>numCol</code>  numCol  <code>spcCol</code>  spcCol  <code>rtlCol</code>  rtlCol  <code>fromWordArt</code>  fromWordArt  <code>anchor</code>  anchor  <code>anchorCtr</code>  anchorCtr  <code>forceAA</code>  forceAA  <code>upright</code>  upright  <code>compatLnSpc</code>  compatLnSpc  <code>prstTxWarp</code>  prstTxWarp  <code>scene3d</code>  scene3d  <code>extLst</code>  extLst  <code>noAutofit</code>  noAutofit  <code>normAutofit</code>  normAutofit  <code>spAutoFit</code>  spAutoFit  <code>flatTx</code>  flatTx  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/RichTextProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/RichTextProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRichTextProperties()\n</code></pre>"},{"location":"man/RowBreak/","title":"RowBreak","text":"<p>Source code</p>"},{"location":"man/RowBreak/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.pagebreak.html</p>"},{"location":"man/RowBreak/#usage","title":"Usage","text":"<pre><code>RowBreak(count = NULL, manualBreakCount = NULL, brk = list(), ...)\n</code></pre>"},{"location":"man/RowBreak/#arguments","title":"Arguments","text":"<code>count</code>  count  <code>manualBreakCount</code>  manualBreakCount  <code>brk</code>  brk  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/RowBreak/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/RowBreak/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRowBreak()\n</code></pre>"},{"location":"man/RowDimension/","title":"RowDimension","text":"<p>Source code</p>"},{"location":"man/RowDimension/#description","title":"Description","text":"<p>Information about the display properties of a row.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.dimensions.html</p>"},{"location":"man/RowDimension/#usage","title":"Usage","text":"<pre><code>RowDimension(\n  worksheet,\n  index = 0L,\n  ht = NULL,\n  customHeight = NULL,\n  s = NULL,\n  customFormat = NULL,\n  hidden = FALSE,\n  outlineLevel = 0L,\n  outline_level = NULL,\n  collapsed = FALSE,\n  visible = NULL,\n  height = NULL,\n  r = NULL,\n  spans = NULL,\n  thickBot = NULL,\n  thickTop = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/RowDimension/#arguments","title":"Arguments","text":"<code>worksheet</code>  worksheet  <code>index</code>  index  <code>ht</code>  ht  <code>customHeight</code>  customHeight  <code>s</code>  s  <code>customFormat</code>  customFormat  <code>hidden</code>  hidden  <code>outlineLevel</code>  outlineLevel  <code>outline_level</code>  outline_level  <code>collapsed</code>  collapsed  <code>visible</code>  visible  <code>height</code>  height  <code>r</code>  r  <code>spans</code>  spans  <code>thickBot</code>  thickBot  <code>thickTop</code>  thickTop  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/RowDimension/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/RowDimension/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nRowDimension(wb$active)\n</code></pre>"},{"location":"man/RowRange/","title":"RowRange","text":"<p>Source code</p>"},{"location":"man/RowRange/#description","title":"Description","text":"<p>Represent a range of at least one row</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.print_settings.html</p>"},{"location":"man/RowRange/#usage","title":"Usage","text":"<pre><code>RowRange(range_string = NULL, min_row = NULL, max_row = NULL, ...)\n</code></pre>"},{"location":"man/RowRange/#arguments","title":"Arguments","text":"<code>range_string</code>  range_string  <code>min_row</code>  min_row  <code>max_row</code>  max_row  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/RowRange/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/RowRange/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRowRange(min_row = 1L, max_row = 2L)\n</code></pre>"},{"location":"man/Rule/","title":"Rule","text":"<p>Source code</p>"},{"location":"man/Rule/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/Rule/#usage","title":"Usage","text":"<pre><code>Rule(\n  type,\n  dxfId = NULL,\n  priority = 0L,\n  stopIfTrue = NULL,\n  aboveAverage = NULL,\n  percent = NULL,\n  bottom = NULL,\n  operator = NULL,\n  text = NULL,\n  timePeriod = NULL,\n  rank = NULL,\n  stdDev = NULL,\n  equalAverage = NULL,\n  formula = list(),\n  colorScale = NULL,\n  dataBar = NULL,\n  iconSet = NULL,\n  extLst = NULL,\n  dxf = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Rule/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>dxfId</code>  dxfId  <code>priority</code>  priority  <code>stopIfTrue</code>  stopIfTrue  <code>aboveAverage</code>  aboveAverage  <code>percent</code>  percent  <code>bottom</code>  bottom  <code>operator</code>  operator  <code>text</code>  text  <code>timePeriod</code>  timePeriod  <code>rank</code>  rank  <code>stdDev</code>  stdDev  <code>equalAverage</code>  equalAverage  <code>formula</code>  formula  <code>colorScale</code>  colorScale  <code>dataBar</code>  dataBar  <code>iconSet</code>  iconSet  <code>extLst</code>  extLst  <code>dxf</code>  dxf  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs"},{"location":"man/Rule/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Rule/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRule(type = \"colorScale\")\n</code></pre>"},{"location":"man/RuleType/","title":"RuleType","text":"<p>Source code</p>"},{"location":"man/RuleType/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p>"},{"location":"man/RuleType/#usage","title":"Usage","text":"<pre><code>RuleType(...)\n</code></pre>"},{"location":"man/RuleType/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs"},{"location":"man/RuleType/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/RuleType/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nRuleType()\n</code></pre>"},{"location":"man/Scaling/","title":"Scaling","text":"<p>Source code</p>"},{"location":"man/Scaling/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.axis.html</p>"},{"location":"man/Scaling/#usage","title":"Usage","text":"<pre><code>Scaling(\n  logBase = NULL,\n  orientation = \"minMax\",\n  max = NULL,\n  min = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Scaling/#arguments","title":"Arguments","text":"<code>logBase</code>  logBase  <code>orientation</code>  orientation  <code>max</code>  max  <code>min</code>  min  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Scaling/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Scaling/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nScaling()\n</code></pre>"},{"location":"man/ScatterChart/","title":"ScatterChart","text":"<p>Source code</p>"},{"location":"man/ScatterChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.scatter_chart.html</p>"},{"location":"man/ScatterChart/#usage","title":"Usage","text":"<pre><code>ScatterChart(\n  scatterStyle = NULL,\n  varyColors = NULL,\n  ser = list(),\n  dLbls = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/ScatterChart/#arguments","title":"Arguments","text":"<code>scatterStyle</code>  scatterStyle  <code>varyColors</code>  varyColors  <code>ser</code>  ser  <code>dLbls</code>  dLbls  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ScatterChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ScatterChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nScatterChart()\n</code></pre>"},{"location":"man/Scenario/","title":"Scenario","text":"<p>Source code</p>"},{"location":"man/Scenario/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.scenario.html</p>"},{"location":"man/Scenario/#usage","title":"Usage","text":"<pre><code>Scenario(\n  inputCells = list(),\n  name = NULL,\n  locked = FALSE,\n  hidden = FALSE,\n  count = NULL,\n  user = NULL,\n  comment = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Scenario/#arguments","title":"Arguments","text":"<code>inputCells</code>  inputCells  <code>name</code>  name  <code>locked</code>  locked  <code>hidden</code>  hidden  <code>count</code>  count  <code>user</code>  user  <code>comment</code>  comment  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Scenario/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Scenario/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nScenario(name = \"name\")\n</code></pre>"},{"location":"man/ScenarioList/","title":"ScenarioList","text":"<p>Source code</p>"},{"location":"man/ScenarioList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.scenario.html</p>"},{"location":"man/ScenarioList/#usage","title":"Usage","text":"<pre><code>ScenarioList(scenario = list(), current = NULL, show = NULL, sqref = NULL, ...)\n</code></pre>"},{"location":"man/ScenarioList/#arguments","title":"Arguments","text":"<code>scenario</code>  scenario  <code>current</code>  current  <code>show</code>  show  <code>sqref</code>  sqref  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ScenarioList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ScenarioList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nScenarioList()\n</code></pre>"},{"location":"man/Scene3D/","title":"Scene3D","text":"<p>Source code</p>"},{"location":"man/Scene3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Scene3D/#usage","title":"Usage","text":"<pre><code>Scene3D(camera = NULL, lightRig = NULL, backdrop = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/Scene3D/#arguments","title":"Arguments","text":"<code>camera</code>  camera  <code>lightRig</code>  lightRig  <code>backdrop</code>  backdrop  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Scene3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Scene3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nScene3D(\ncamera = Camera(prst = \"perspectiveLeft\"),\nlightRig = LightRig(rig = \"morning\", dir = \"t\")\n)\n</code></pre>"},{"location":"man/SchemeColor/","title":"SchemeColor","text":"<p>Source code</p>"},{"location":"man/SchemeColor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.colors.html</p>"},{"location":"man/SchemeColor/#usage","title":"Usage","text":"<pre><code>SchemeColor(\n  tint = NULL,\n  shade = NULL,\n  comp = NULL,\n  inv = NULL,\n  gray = NULL,\n  alpha = NULL,\n  alphaOff = NULL,\n  alphaMod = NULL,\n  hue = NULL,\n  hueOff = NULL,\n  hueMod = NULL,\n  sat = NULL,\n  satOff = NULL,\n  satMod = NULL,\n  lum = NULL,\n  lumOff = NULL,\n  lumMod = NULL,\n  red = NULL,\n  redOff = NULL,\n  redMod = NULL,\n  green = NULL,\n  greenOff = NULL,\n  greenMod = NULL,\n  blue = NULL,\n  blueOff = NULL,\n  blueMod = NULL,\n  gamma = NULL,\n  invGamma = NULL,\n  val = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/SchemeColor/#arguments","title":"Arguments","text":"<code>tint</code>  tint  <code>shade</code>  shade  <code>comp</code>  comp  <code>inv</code>  inv  <code>gray</code>  gray  <code>alpha</code>  alpha  <code>alphaOff</code>  alphaOff  <code>alphaMod</code>  alphaMod  <code>hue</code>  hue  <code>hueOff</code>  hueOff  <code>hueMod</code>  hueMod  <code>sat</code>  sat  <code>satOff</code>  satOff  <code>satMod</code>  satMod  <code>lum</code>  lum  <code>lumOff</code>  lumOff  <code>lumMod</code>  lumMod  <code>red</code>  red  <code>redOff</code>  redOff  <code>redMod</code>  redMod  <code>green</code>  green  <code>greenOff</code>  greenOff  <code>greenMod</code>  greenMod  <code>blue</code>  blue  <code>blueOff</code>  blueOff  <code>blueMod</code>  blueMod  <code>gamma</code>  gamma  <code>invGamma</code>  invGamma  <code>val</code>  val  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SchemeColor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SchemeColor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\n# from Gradient Pie Charts example\nslice &lt;- DataPoint(\n idx = 0,\n explosion = 20,\n spPr = GraphicalProperties(\n     gradFill = GradientFillProperties(\n         gsLst = list(\n                 pos=0,\n                 prstClr='blue'\n             ),\n             GradientStop(\n                 pos=100000,\n                 schemeClr=SchemeColor(\n                     val='accent1',\n                     lumMod=30000,\n                     lumOff=70000\n                 )\n             )\n         )\n     )\n )\n</code></pre>"},{"location":"man/Selection/","title":"Selection","text":"<p>Source code</p>"},{"location":"man/Selection/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.views.html</p>"},{"location":"man/Selection/#usage","title":"Usage","text":"<pre><code>Selection(\n  pane = NULL,\n  activeCell = \"A1\",\n  activeCellId = NULL,\n  sqref = \"A1\",\n  ...\n)\n</code></pre>"},{"location":"man/Selection/#arguments","title":"Arguments","text":"<code>pane</code>  pane  <code>activeCell</code>  activeCell  <code>activeCellId</code>  activeCellId  <code>sqref</code>  sqref  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Selection/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Selection/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSelection()\n</code></pre>"},{"location":"man/Series/","title":"Series","text":"<p>Source code</p>"},{"location":"man/Series/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.series.html</p>"},{"location":"man/Series/#usage","title":"Usage","text":"<pre><code>Series(\n  values,\n  xvalues = NULL,\n  zvalues = NULL,\n  title = NULL,\n  title_from_data = FALSE,\n  ...\n)\n</code></pre>"},{"location":"man/Series/#arguments","title":"Arguments","text":"<code>values</code>  values  <code>xvalues</code>  xvalues  <code>zvalues</code>  zvalues  <code>title</code>  title  <code>title_from_data</code>  title_from_data  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Series/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Series/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSeries(values = \"sheetname!A1:E4\")\n</code></pre>"},{"location":"man/SeriesAxis/","title":"SeriesAxis","text":"<p>Source code</p>"},{"location":"man/SeriesAxis/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.axis.html</p>"},{"location":"man/SeriesAxis/#usage","title":"Usage","text":"<pre><code>SeriesAxis(tickLblSkip = NULL, tickMarkSkip = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/SeriesAxis/#arguments","title":"Arguments","text":"<code>tickLblSkip</code>  tickLblSkip  <code>tickMarkSkip</code>  tickMarkSkip  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SeriesAxis/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SeriesAxis/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSeriesAxis()\n</code></pre>"},{"location":"man/SeriesFactory/","title":"SeriesFactory","text":"<p>Source code</p>"},{"location":"man/SeriesFactory/#description","title":"Description","text":"<p>Convenience Factory for creating chart data series.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.series_factory.html</p>"},{"location":"man/SeriesFactory/#usage","title":"Usage","text":"<pre><code>SeriesFactory(\n  values,\n  xvalues = NULL,\n  zvalues = NULL,\n  title = NULL,\n  title_from_data = FALSE,\n  ...\n)\n</code></pre>"},{"location":"man/SeriesFactory/#arguments","title":"Arguments","text":"<code>values</code>  values  <code>xvalues</code>  xvalues  <code>zvalues</code>  zvalues  <code>title</code>  title  <code>title_from_data</code>  title_from_data  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SeriesFactory/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SeriesFactory/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSeriesFactory(values = \"sheetname!A1:E4\")\n</code></pre>"},{"location":"man/SeriesLabel/","title":"SeriesLabel","text":"<p>Source code</p>"},{"location":"man/SeriesLabel/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.series.html</p>"},{"location":"man/SeriesLabel/#usage","title":"Usage","text":"<pre><code>SeriesLabel(strRef = NULL, v = NULL, ...)\n</code></pre>"},{"location":"man/SeriesLabel/#arguments","title":"Arguments","text":"<code>strRef</code>  strRef  <code>v</code>  v  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SeriesLabel/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SeriesLabel/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSeriesLabel()\n</code></pre>"},{"location":"man/Shape/","title":"Shape","text":"<p>Source code</p>"},{"location":"man/Shape/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.connector.html</p>"},{"location":"man/Shape/#usage","title":"Usage","text":"<pre><code>Shape(\n  macro = NULL,\n  textlink = NULL,\n  fPublished = NULL,\n  fLocksText = NULL,\n  nvSpPr = NULL,\n  spPr = NULL,\n  style = NULL,\n  txBody = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Shape/#arguments","title":"Arguments","text":"<code>macro</code>  macro  <code>textlink</code>  textlink  <code>fPublished</code>  fPublished  <code>fLocksText</code>  fLocksText  <code>nvSpPr</code>  nvSpPr  <code>spPr</code>  spPr  <code>style</code>  style  <code>txBody</code>  txBody  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Shape/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Shape/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nShape(spPr = GraphicalProperties())\n</code></pre>"},{"location":"man/Shape3D/","title":"Shape3D","text":"<p>Source code</p>"},{"location":"man/Shape3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Shape3D/#usage","title":"Usage","text":"<pre><code>Shape3D(\n  z = NULL,\n  extrusionH = NULL,\n  contourW = NULL,\n  prstMaterial = NULL,\n  bevelT = NULL,\n  bevelB = NULL,\n  extrusionClr = NULL,\n  contourClr = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Shape3D/#arguments","title":"Arguments","text":"<code>z</code>  z  <code>extrusionH</code>  extrusionH  <code>contourW</code>  contourW  <code>prstMaterial</code>  prstMaterial  <code>bevelT</code>  bevelT  <code>bevelB</code>  bevelB  <code>extrusionClr</code>  extrusionClr  <code>contourClr</code>  contourClr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Shape3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Shape3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nShape3D()\n</code></pre>"},{"location":"man/ShapeStyle/","title":"ShapeStyle","text":"<p>Source code</p>"},{"location":"man/ShapeStyle/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/ShapeStyle/#usage","title":"Usage","text":"<pre><code>ShapeStyle(lnRef = NULL, fillRef = NULL, effectRef = NULL, fontRef = NULL, ...)\n</code></pre>"},{"location":"man/ShapeStyle/#arguments","title":"Arguments","text":"<code>lnRef</code>  lnRef  <code>fillRef</code>  fillRef  <code>effectRef</code>  effectRef  <code>fontRef</code>  fontRef  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/ShapeStyle/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ShapeStyle/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nShapeStyle(\nlnRef = StyleMatrixReference(idx = 1L),\nfillRef = StyleMatrixReference(idx = 1L),\neffectRef = StyleMatrixReference(idx = 1L),\nfontRef = FontReference()\n)\n</code></pre>"},{"location":"man/SheetBackgroundPicture/","title":"SheetBackgroundPicture","text":"<p>Source code</p>"},{"location":"man/SheetBackgroundPicture/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.picture.html</p>"},{"location":"man/SheetBackgroundPicture/#usage","title":"Usage","text":"<pre><code>SheetBackgroundPicture(...)\n</code></pre>"},{"location":"man/SheetBackgroundPicture/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SheetBackgroundPicture/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SheetBackgroundPicture/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSheetBackgroundPicture()\n</code></pre>"},{"location":"man/SheetDimension/","title":"SheetDimension","text":"<p>Source code</p>"},{"location":"man/SheetDimension/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.dimensions.html</p>"},{"location":"man/SheetDimension/#usage","title":"Usage","text":"<pre><code>SheetDimension(ref = NULL, ...)\n</code></pre>"},{"location":"man/SheetDimension/#arguments","title":"Arguments","text":"<code>ref</code>  ref  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SheetDimension/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SheetDimension/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSheetDimension(ref = \"ref\")\n</code></pre>"},{"location":"man/SheetFormatProperties/","title":"SheetFormatProperties","text":"<p>Source code</p>"},{"location":"man/SheetFormatProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.dimensions.html</p>"},{"location":"man/SheetFormatProperties/#usage","title":"Usage","text":"<pre><code>SheetFormatProperties(\n  baseColWidth = 8L,\n  defaultColWidth = NULL,\n  defaultRowHeight = 15L,\n  customHeight = NULL,\n  zeroHeight = NULL,\n  thickTop = NULL,\n  thickBottom = NULL,\n  outlineLevelRow = NULL,\n  outlineLevelCol = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/SheetFormatProperties/#arguments","title":"Arguments","text":"<code>baseColWidth</code>  baseColWidth  <code>defaultColWidth</code>  defaultColWidth  <code>defaultRowHeight</code>  defaultRowHeight  <code>customHeight</code>  customHeight  <code>zeroHeight</code>  zeroHeight  <code>thickTop</code>  thickTop  <code>thickBottom</code>  thickBottom  <code>outlineLevelRow</code>  outlineLevelRow  <code>outlineLevelCol</code>  outlineLevelCol  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SheetFormatProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SheetFormatProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSheetFormatProperties()\n</code></pre>"},{"location":"man/SheetProtection/","title":"SheetProtection","text":"<p>Source code</p>"},{"location":"man/SheetProtection/#description","title":"Description","text":"<p>Information about protection of various aspects of a sheet. TRUE values</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.protection.html</p>"},{"location":"man/SheetProtection/#usage","title":"Usage","text":"<pre><code>SheetProtection(\n  sheet = FALSE,\n  objects = FALSE,\n  scenarios = FALSE,\n  formatCells = TRUE,\n  formatRows = TRUE,\n  formatColumns = TRUE,\n  insertColumns = TRUE,\n  insertRows = TRUE,\n  insertHyperlinks = TRUE,\n  deleteColumns = TRUE,\n  deleteRows = TRUE,\n  selectLockedCells = FALSE,\n  selectUnlockedCells = FALSE,\n  sort = TRUE,\n  autoFilter = TRUE,\n  pivotTables = TRUE,\n  password = NULL,\n  algorithmName = NULL,\n  saltValue = NULL,\n  spinCount = NULL,\n  hashValue = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/SheetProtection/#arguments","title":"Arguments","text":"<code>sheet</code>  sheet  <code>objects</code>  objects  <code>scenarios</code>  scenarios  <code>formatCells</code>  formatCells  <code>formatRows</code>  formatRows  <code>formatColumns</code>  formatColumns  <code>insertColumns</code>  insertColumns  <code>insertRows</code>  insertRows  <code>insertHyperlinks</code>  insertHyperlinks  <code>deleteColumns</code>  deleteColumns  <code>deleteRows</code>  deleteRows  <code>selectLockedCells</code>  selectLockedCells  <code>selectUnlockedCells</code>  selectUnlockedCells  <code>sort</code>  sort  <code>autoFilter</code>  autoFilter  <code>pivotTables</code>  pivotTables  <code>password</code>  password  <code>algorithmName</code>  algorithmName  <code>saltValue</code>  saltValue  <code>spinCount</code>  spinCount  <code>hashValue</code>  hashValue  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SheetProtection/#details","title":"Details","text":"<p>mean that protection for the object or action is active This is the default when protection is active, ie. users cannot do something</p>"},{"location":"man/SheetProtection/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SheetProtection/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSheetProtection()\n</code></pre>"},{"location":"man/SheetView/","title":"SheetView","text":"<p>Source code</p>"},{"location":"man/SheetView/#description","title":"Description","text":"<p>Information about the visible portions of this sheet.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.views.html</p>"},{"location":"man/SheetView/#usage","title":"Usage","text":"<pre><code>SheetView(\n  windowProtection = NULL,\n  showFormulas = NULL,\n  showGridLines = NULL,\n  showRowColHeaders = NULL,\n  showZeros = NULL,\n  rightToLeft = NULL,\n  tabSelected = NULL,\n  showRuler = NULL,\n  showOutlineSymbols = NULL,\n  defaultGridColor = NULL,\n  showWhiteSpace = NULL,\n  view = NULL,\n  topLeftCell = NULL,\n  colorId = NULL,\n  zoomScale = NULL,\n  zoomScaleNormal = NULL,\n  zoomScaleSheetLayoutView = NULL,\n  zoomScalePageLayoutView = NULL,\n  zoomToFit = NULL,\n  workbookViewId = 0L,\n  selection = NULL,\n  pane = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/SheetView/#arguments","title":"Arguments","text":"<code>windowProtection</code>  windowProtection  <code>showFormulas</code>  showFormulas  <code>showGridLines</code>  showGridLines  <code>showRowColHeaders</code>  showRowColHeaders  <code>showZeros</code>  showZeros  <code>rightToLeft</code>  rightToLeft  <code>tabSelected</code>  tabSelected  <code>showRuler</code>  showRuler  <code>showOutlineSymbols</code>  showOutlineSymbols  <code>defaultGridColor</code>  defaultGridColor  <code>showWhiteSpace</code>  showWhiteSpace  <code>view</code>  view  <code>topLeftCell</code>  topLeftCell  <code>colorId</code>  colorId  <code>zoomScale</code>  zoomScale  <code>zoomScaleNormal</code>  zoomScaleNormal  <code>zoomScaleSheetLayoutView</code>  zoomScaleSheetLayoutView  <code>zoomScalePageLayoutView</code>  zoomScalePageLayoutView  <code>zoomToFit</code>  zoomToFit  <code>workbookViewId</code>  workbookViewId  <code>selection</code>  selection  <code>pane</code>  pane  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SheetView/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SheetView/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSheetView()\n</code></pre>"},{"location":"man/SheetViewList/","title":"SheetViewList","text":"<p>Source code</p>"},{"location":"man/SheetViewList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.views.html</p>"},{"location":"man/SheetViewList/#usage","title":"Usage","text":"<pre><code>SheetViewList(sheetView = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/SheetViewList/#arguments","title":"Arguments","text":"<code>sheetView</code>  sheetView  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SheetViewList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SheetViewList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSheetViewList()\n</code></pre>"},{"location":"man/Side/","title":"Side","text":"<p>Source code</p>"},{"location":"man/Side/#description","title":"Description","text":"<p>Border options for use in styles.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.borders.html</p>"},{"location":"man/Side/#usage","title":"Usage","text":"<pre><code>Side(style = NULL, color = NULL, border_style = NULL, ...)\n</code></pre>"},{"location":"man/Side/#arguments","title":"Arguments","text":"<code>style</code>  style  <code>color</code>  color  <code>border_style</code>  border_style  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Side/#details","title":"Details","text":"<p>Caution: if you do not specify a border_style, other attributes will have no effect !</p>"},{"location":"man/Side/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Side/#caution","title":"Caution","text":"<p>if you do not specify a border_style, other attributes will: have no effect !</p>"},{"location":"man/Side/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSide()\n</code></pre>"},{"location":"man/SmartTag/","title":"SmartTag","text":"<p>Source code</p>"},{"location":"man/SmartTag/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.smart_tags.html</p>"},{"location":"man/SmartTag/#usage","title":"Usage","text":"<pre><code>SmartTag(namespaceUri = NULL, name = NULL, url = NULL, ...)\n</code></pre>"},{"location":"man/SmartTag/#arguments","title":"Arguments","text":"<code>namespaceUri</code>  namespaceUri  <code>name</code>  name  <code>url</code>  url  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SmartTag/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SmartTag/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSmartTag()\n</code></pre>"},{"location":"man/SmartTagList/","title":"SmartTagList","text":"<p>Source code</p>"},{"location":"man/SmartTagList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.smart_tags.html</p>"},{"location":"man/SmartTagList/#usage","title":"Usage","text":"<pre><code>SmartTagList(smartTagType = list(), ...)\n</code></pre>"},{"location":"man/SmartTagList/#arguments","title":"Arguments","text":"<code>smartTagType</code>  smartTagType  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SmartTagList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SmartTagList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSmartTagList()\n</code></pre>"},{"location":"man/SmartTagProperties/","title":"SmartTagProperties","text":"<p>Source code</p>"},{"location":"man/SmartTagProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.smart_tags.html</p>"},{"location":"man/SmartTagProperties/#usage","title":"Usage","text":"<pre><code>SmartTagProperties(embed = NULL, show = NULL, ...)\n</code></pre>"},{"location":"man/SmartTagProperties/#arguments","title":"Arguments","text":"<code>embed</code>  embed  <code>show</code>  show  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SmartTagProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SmartTagProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSmartTagProperties()\n</code></pre>"},{"location":"man/SmartTags/","title":"SmartTags","text":"<p>Source code</p>"},{"location":"man/SmartTags/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.smart_tag.html</p>"},{"location":"man/SmartTags/#usage","title":"Usage","text":"<pre><code>SmartTags(cellSmartTags = list(), ...)\n</code></pre>"},{"location":"man/SmartTags/#arguments","title":"Arguments","text":"<code>cellSmartTags</code>  cellSmartTags  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SmartTags/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SmartTags/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSmartTags()\n</code></pre>"},{"location":"man/SoftEdgesEffect/","title":"SoftEdgesEffect","text":"<p>Source code</p>"},{"location":"man/SoftEdgesEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/SoftEdgesEffect/#usage","title":"Usage","text":"<pre><code>SoftEdgesEffect(rad = NULL, ...)\n</code></pre>"},{"location":"man/SoftEdgesEffect/#arguments","title":"Arguments","text":"<code>rad</code>  rad  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SoftEdgesEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SoftEdgesEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSoftEdgesEffect(rad = 1L)\n</code></pre>"},{"location":"man/SolidColorFillProperties/","title":"SolidColorFillProperties","text":"<p>Source code</p>"},{"location":"man/SolidColorFillProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/SolidColorFillProperties/#usage","title":"Usage","text":"<pre><code>SolidColorFillProperties(\n  scrgbClr = NULL,\n  srgbClr = NULL,\n  hslClr = NULL,\n  sysClr = NULL,\n  schemeClr = NULL,\n  prstClr = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/SolidColorFillProperties/#arguments","title":"Arguments","text":"<code>scrgbClr</code>  scrgbClr  <code>srgbClr</code>  srgbClr  <code>hslClr</code>  hslClr  <code>sysClr</code>  sysClr  <code>schemeClr</code>  schemeClr  <code>prstClr</code>  prstClr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SolidColorFillProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SolidColorFillProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSolidColorFillProperties()\n</code></pre>"},{"location":"man/SortCondition/","title":"SortCondition","text":"<p>Source code</p>"},{"location":"man/SortCondition/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/SortCondition/#usage","title":"Usage","text":"<pre><code>SortCondition(\n  ref = NULL,\n  descending = NULL,\n  sortBy = NULL,\n  customList = NULL,\n  dxfId = NULL,\n  iconSet = NULL,\n  iconId = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/SortCondition/#arguments","title":"Arguments","text":"<code>ref</code>  ref  <code>descending</code>  descending  <code>sortBy</code>  sortBy  <code>customList</code>  customList  <code>dxfId</code>  dxfId  <code>iconSet</code>  iconSet  <code>iconId</code>  iconId  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SortCondition/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SortCondition/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSortCondition()\n</code></pre>"},{"location":"man/SortState/","title":"SortState","text":"<p>Source code</p>"},{"location":"man/SortState/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.filters.html</p>"},{"location":"man/SortState/#usage","title":"Usage","text":"<pre><code>SortState(\n  columnSort = NULL,\n  caseSensitive = NULL,\n  sortMethod = NULL,\n  ref = NULL,\n  sortCondition = list(),\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/SortState/#arguments","title":"Arguments","text":"<code>columnSort</code>  columnSort  <code>caseSensitive</code>  caseSensitive  <code>sortMethod</code>  sortMethod  <code>ref</code>  ref  <code>sortCondition</code>  sortCondition  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SortState/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SortState/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSortState()\n</code></pre>"},{"location":"man/Spacing/","title":"Spacing","text":"<p>Source code</p>"},{"location":"man/Spacing/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/Spacing/#usage","title":"Usage","text":"<pre><code>Spacing(spcPct = NULL, spcPts = NULL, ...)\n</code></pre>"},{"location":"man/Spacing/#arguments","title":"Arguments","text":"<code>spcPct</code>  spcPct  <code>spcPts</code>  spcPts  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Spacing/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Spacing/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSpacing()\n</code></pre>"},{"location":"man/SphereCoords/","title":"SphereCoords","text":"<p>Source code</p>"},{"location":"man/SphereCoords/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/SphereCoords/#usage","title":"Usage","text":"<pre><code>SphereCoords(lat = NULL, lon = NULL, rev = NULL, ...)\n</code></pre>"},{"location":"man/SphereCoords/#arguments","title":"Arguments","text":"<code>lat</code>  lat  <code>lon</code>  lon  <code>rev</code>  rev  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SphereCoords/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SphereCoords/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSphereCoords(lat = 1L, lon = 1L, rev = 1L)\n</code></pre>"},{"location":"man/SpreadsheetDrawing/","title":"SpreadsheetDrawing","text":"<p>Source code</p>"},{"location":"man/SpreadsheetDrawing/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.spreadsheet_drawing.html</p>"},{"location":"man/SpreadsheetDrawing/#usage","title":"Usage","text":"<pre><code>SpreadsheetDrawing(\n  twoCellAnchor = list(),\n  oneCellAnchor = list(),\n  absoluteAnchor = list(),\n  ...\n)\n</code></pre>"},{"location":"man/SpreadsheetDrawing/#arguments","title":"Arguments","text":"<code>twoCellAnchor</code>  twoCellAnchor  <code>oneCellAnchor</code>  oneCellAnchor  <code>absoluteAnchor</code>  absoluteAnchor  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SpreadsheetDrawing/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SpreadsheetDrawing/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSpreadsheetDrawing()\n</code></pre>"},{"location":"man/StockChart/","title":"StockChart","text":"<p>Source code</p>"},{"location":"man/StockChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.stock_chart.html</p>"},{"location":"man/StockChart/#usage","title":"Usage","text":"<pre><code>StockChart(\n  ser = list(),\n  dLbls = NULL,\n  dropLines = NULL,\n  hiLowLines = NULL,\n  upDownBars = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/StockChart/#arguments","title":"Arguments","text":"<code>ser</code>  ser  <code>dLbls</code>  dLbls  <code>dropLines</code>  dropLines  <code>hiLowLines</code>  hiLowLines  <code>upDownBars</code>  upDownBars  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/StockChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/StockChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStockChart()\n</code></pre>"},{"location":"man/Stop/","title":"Stop","text":"<p>Source code</p>"},{"location":"man/Stop/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html</p>"},{"location":"man/Stop/#usage","title":"Usage","text":"<pre><code>Stop(color, position, ...)\n</code></pre>"},{"location":"man/Stop/#arguments","title":"Arguments","text":"<code>color</code>  color  <code>position</code>  position  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Stop/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Stop/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStop(color = Color(), position = 1L)\n</code></pre>"},{"location":"man/StopList/","title":"StopList","text":"<p>Source code</p>"},{"location":"man/StopList/#description","title":"Description","text":"<p>A sequence (list or list) that may only contain objects of the declared</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.fills.html</p>"},{"location":"man/StopList/#usage","title":"Usage","text":"<pre><code>StopList(name = NULL, ...)\n</code></pre>"},{"location":"man/StopList/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/StopList/#details","title":"Details","text":"<p>type</p>"},{"location":"man/StopList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/StopList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStopList()\n</code></pre>"},{"location":"man/StrData/","title":"StrData","text":"<p>Source code</p>"},{"location":"man/StrData/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/StrData/#usage","title":"Usage","text":"<pre><code>StrData(ptCount = NULL, pt = list(), extLst = NULL, ...)\n</code></pre>"},{"location":"man/StrData/#arguments","title":"Arguments","text":"<code>ptCount</code>  ptCount  <code>pt</code>  pt  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/StrData/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/StrData/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStrData()\n</code></pre>"},{"location":"man/StrRef/","title":"StrRef","text":"<p>Source code</p>"},{"location":"man/StrRef/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/StrRef/#usage","title":"Usage","text":"<pre><code>StrRef(f = NULL, strCache = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/StrRef/#arguments","title":"Arguments","text":"<code>f</code>  f  <code>strCache</code>  strCache  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/StrRef/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/StrRef/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStrRef()\n</code></pre>"},{"location":"man/StrVal/","title":"StrVal","text":"<p>Source code</p>"},{"location":"man/StrVal/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.data_source.html</p>"},{"location":"man/StrVal/#usage","title":"Usage","text":"<pre><code>StrVal(idx = 0L, v = NULL, ...)\n</code></pre>"},{"location":"man/StrVal/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>v</code>  v  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/StrVal/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/StrVal/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStrVal()\n</code></pre>"},{"location":"man/StretchInfoProperties/","title":"StretchInfoProperties","text":"<p>Source code</p>"},{"location":"man/StretchInfoProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.fill.html</p>"},{"location":"man/StretchInfoProperties/#usage","title":"Usage","text":"<pre><code>StretchInfoProperties(...)\n</code></pre>"},{"location":"man/StretchInfoProperties/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/StretchInfoProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/StretchInfoProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStretchInfoProperties()\n</code></pre>"},{"location":"man/StyleArray/","title":"StyleArray","text":"<p>Source code</p>"},{"location":"man/StyleArray/#description","title":"Description","text":"<p>Simplified named list with an array</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.cell_style.html</p>"},{"location":"man/StyleArray/#usage","title":"Usage","text":"<pre><code>StyleArray(args = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), ...)\n</code></pre>"},{"location":"man/StyleArray/#arguments","title":"Arguments","text":"<code>args</code>  args  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/StyleArray/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/StyleArray/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStyleArray()\n</code></pre>"},{"location":"man/StyleMatrixReference/","title":"StyleMatrixReference","text":"<p>Source code</p>"},{"location":"man/StyleMatrixReference/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/StyleMatrixReference/#usage","title":"Usage","text":"<pre><code>StyleMatrixReference(idx = NULL, ...)\n</code></pre>"},{"location":"man/StyleMatrixReference/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/StyleMatrixReference/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/StyleMatrixReference/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStyleMatrixReference(idx = 1L)\n</code></pre>"},{"location":"man/Stylesheet/","title":"Stylesheet","text":"<p>Source code</p>"},{"location":"man/Stylesheet/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.stylesheet.html</p>"},{"location":"man/Stylesheet/#usage","title":"Usage","text":"<pre><code>Stylesheet(\n  numFmts = NULL,\n  fonts = list(),\n  fills = list(),\n  borders = list(),\n  cellStyleXfs = NULL,\n  cellXfs = NULL,\n  cellStyles = NULL,\n  dxfs = list(),\n  tableStyles = NULL,\n  colors = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Stylesheet/#arguments","title":"Arguments","text":"<code>numFmts</code>  numFmts  <code>fonts</code>  fonts  <code>fills</code>  fills  <code>borders</code>  borders  <code>cellStyleXfs</code>  cellStyleXfs  <code>cellXfs</code>  cellXfs  <code>cellStyles</code>  cellStyles  <code>dxfs</code>  dxfs  <code>tableStyles</code>  tableStyles  <code>colors</code>  colors  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Stylesheet/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Stylesheet/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nStylesheet()\n</code></pre>"},{"location":"man/SurfaceChart/","title":"SurfaceChart","text":"<p>Source code</p>"},{"location":"man/SurfaceChart/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.surface_chart.html</p>"},{"location":"man/SurfaceChart/#usage","title":"Usage","text":"<pre><code>SurfaceChart(wireframe = NULL, ser = list(), bandFmts = NULL, ...)\n</code></pre>"},{"location":"man/SurfaceChart/#arguments","title":"Arguments","text":"<code>wireframe</code>  wireframe  <code>ser</code>  ser  <code>bandFmts</code>  bandFmts  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SurfaceChart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SurfaceChart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSurfaceChart()\n</code></pre>"},{"location":"man/SurfaceChart3D/","title":"SurfaceChart3D","text":"<p>Source code</p>"},{"location":"man/SurfaceChart3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.surface_chart.html</p>"},{"location":"man/SurfaceChart3D/#usage","title":"Usage","text":"<pre><code>SurfaceChart3D(wireframe = NULL, ser = list(), bandFmts = NULL, ...)\n</code></pre>"},{"location":"man/SurfaceChart3D/#arguments","title":"Arguments","text":"<code>wireframe</code>  wireframe  <code>ser</code>  ser  <code>bandFmts</code>  bandFmts  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SurfaceChart3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SurfaceChart3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSurfaceChart3D()\n</code></pre>"},{"location":"man/SystemColor/","title":"SystemColor","text":"<p>Source code</p>"},{"location":"man/SystemColor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.colors.html</p>"},{"location":"man/SystemColor/#usage","title":"Usage","text":"<pre><code>SystemColor(\n  val = \"windowText\",\n  lastClr = NULL,\n  tint = NULL,\n  shade = NULL,\n  comp = NULL,\n  inv = NULL,\n  gray = NULL,\n  alpha = NULL,\n  alphaOff = NULL,\n  alphaMod = NULL,\n  hue = NULL,\n  hueOff = NULL,\n  hueMod = NULL,\n  sat = NULL,\n  satOff = NULL,\n  satMod = NULL,\n  lum = NULL,\n  lumOff = NULL,\n  lumMod = NULL,\n  red = NULL,\n  redOff = NULL,\n  redMod = NULL,\n  green = NULL,\n  greenOff = NULL,\n  greenMod = NULL,\n  blue = NULL,\n  blueOff = NULL,\n  blueMod = NULL,\n  gamma = NULL,\n  invGamma = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/SystemColor/#arguments","title":"Arguments","text":"<code>val</code>  val  <code>lastClr</code>  lastClr  <code>tint</code>  tint  <code>shade</code>  shade  <code>comp</code>  comp  <code>inv</code>  inv  <code>gray</code>  gray  <code>alpha</code>  alpha  <code>alphaOff</code>  alphaOff  <code>alphaMod</code>  alphaMod  <code>hue</code>  hue  <code>hueOff</code>  hueOff  <code>hueMod</code>  hueMod  <code>sat</code>  sat  <code>satOff</code>  satOff  <code>satMod</code>  satMod  <code>lum</code>  lum  <code>lumOff</code>  lumOff  <code>lumMod</code>  lumMod  <code>red</code>  red  <code>redOff</code>  redOff  <code>redMod</code>  redMod  <code>green</code>  green  <code>greenOff</code>  greenOff  <code>greenMod</code>  greenMod  <code>blue</code>  blue  <code>blueOff</code>  blueOff  <code>blueMod</code>  blueMod  <code>gamma</code>  gamma  <code>invGamma</code>  invGamma  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/SystemColor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/SystemColor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nSystemColor()\n</code></pre>"},{"location":"man/Table/","title":"Table","text":"<p>Source code</p>"},{"location":"man/Table/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.table.html</p>"},{"location":"man/Table/#usage","title":"Usage","text":"<pre><code>Table(\n  id = 1L,\n  displayName,\n  ref = NULL,\n  name = NULL,\n  comment = NULL,\n  tableType = NULL,\n  headerRowCount = 1L,\n  insertRow = NULL,\n  insertRowShift = NULL,\n  totalsRowCount = NULL,\n  totalsRowShown = NULL,\n  published = NULL,\n  headerRowDxfId = NULL,\n  dataDxfId = NULL,\n  totalsRowDxfId = NULL,\n  headerRowBorderDxfId = NULL,\n  tableBorderDxfId = NULL,\n  totalsRowBorderDxfId = NULL,\n  headerRowCellStyle = NULL,\n  dataCellStyle = NULL,\n  totalsRowCellStyle = NULL,\n  connectionId = NULL,\n  autoFilter = NULL,\n  sortState = NULL,\n  tableColumns = list(),\n  tableStyleInfo = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Table/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>displayName</code>  displayName  <code>ref</code>  ref  <code>name</code>  name  <code>comment</code>  comment  <code>tableType</code>  tableType  <code>headerRowCount</code>  headerRowCount  <code>insertRow</code>  insertRow  <code>insertRowShift</code>  insertRowShift  <code>totalsRowCount</code>  totalsRowCount  <code>totalsRowShown</code>  totalsRowShown  <code>published</code>  published  <code>headerRowDxfId</code>  headerRowDxfId  <code>dataDxfId</code>  dataDxfId  <code>totalsRowDxfId</code>  totalsRowDxfId  <code>headerRowBorderDxfId</code>  headerRowBorderDxfId  <code>tableBorderDxfId</code>  tableBorderDxfId  <code>totalsRowBorderDxfId</code>  totalsRowBorderDxfId  <code>headerRowCellStyle</code>  headerRowCellStyle  <code>dataCellStyle</code>  dataCellStyle  <code>totalsRowCellStyle</code>  totalsRowCellStyle  <code>connectionId</code>  connectionId  <code>autoFilter</code>  autoFilter  <code>sortState</code>  sortState  <code>tableColumns</code>  tableColumns  <code>tableStyleInfo</code>  tableStyleInfo  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Table/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Table/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTable(displayName = \"displayName\")\n</code></pre>"},{"location":"man/TableColumn/","title":"TableColumn","text":"<p>Source code</p>"},{"location":"man/TableColumn/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.table.html</p>"},{"location":"man/TableColumn/#usage","title":"Usage","text":"<pre><code>TableColumn(\n  id = NULL,\n  uniqueName = NULL,\n  name = NULL,\n  totalsRowFunction = NULL,\n  totalsRowLabel = NULL,\n  queryTableFieldId = NULL,\n  headerRowDxfId = NULL,\n  dataDxfId = NULL,\n  totalsRowDxfId = NULL,\n  headerRowCellStyle = NULL,\n  dataCellStyle = NULL,\n  totalsRowCellStyle = NULL,\n  calculatedColumnFormula = NULL,\n  totalsRowFormula = NULL,\n  xmlColumnPr = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/TableColumn/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>uniqueName</code>  uniqueName  <code>name</code>  name  <code>totalsRowFunction</code>  totalsRowFunction  <code>totalsRowLabel</code>  totalsRowLabel  <code>queryTableFieldId</code>  queryTableFieldId  <code>headerRowDxfId</code>  headerRowDxfId  <code>dataDxfId</code>  dataDxfId  <code>totalsRowDxfId</code>  totalsRowDxfId  <code>headerRowCellStyle</code>  headerRowCellStyle  <code>dataCellStyle</code>  dataCellStyle  <code>totalsRowCellStyle</code>  totalsRowCellStyle  <code>calculatedColumnFormula</code>  calculatedColumnFormula  <code>totalsRowFormula</code>  totalsRowFormula  <code>xmlColumnPr</code>  xmlColumnPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TableColumn/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TableColumn/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTableColumn(id = 1L, name = \"name\")\n</code></pre>"},{"location":"man/TableFormula/","title":"TableFormula","text":"<p>Source code</p>"},{"location":"man/TableFormula/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.table.html</p>"},{"location":"man/TableFormula/#usage","title":"Usage","text":"<pre><code>TableFormula(array = NULL, attr_text = NULL, ...)\n</code></pre>"},{"location":"man/TableFormula/#arguments","title":"Arguments","text":"<code>array</code>  array  <code>attr_text</code>  attr_text  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TableFormula/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TableFormula/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTableFormula()\n</code></pre>"},{"location":"man/TableNameDescriptor/","title":"TableNameDescriptor","text":"<p>Source code</p>"},{"location":"man/TableNameDescriptor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.table.html</p>"},{"location":"man/TableNameDescriptor/#usage","title":"Usage","text":"<pre><code>TableNameDescriptor(...)\n</code></pre>"},{"location":"man/TableNameDescriptor/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TableNameDescriptor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TableNameDescriptor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTableNameDescriptor()\n</code></pre>"},{"location":"man/TablePartList/","title":"TablePartList","text":"<p>Source code</p>"},{"location":"man/TablePartList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.table.html</p>"},{"location":"man/TablePartList/#usage","title":"Usage","text":"<pre><code>TablePartList(count = NULL, tablePart = list(), ...)\n</code></pre>"},{"location":"man/TablePartList/#arguments","title":"Arguments","text":"<code>count</code>  count  <code>tablePart</code>  tablePart  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TablePartList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TablePartList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTablePartList()\n</code></pre>"},{"location":"man/TableStyle/","title":"TableStyle","text":"<p>Source code</p>"},{"location":"man/TableStyle/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.table.html</p>"},{"location":"man/TableStyle/#usage","title":"Usage","text":"<pre><code>TableStyle(\n  name = NULL,\n  pivot = NULL,\n  table = NULL,\n  count = NULL,\n  tableStyleElement = list(),\n  ...\n)\n</code></pre>"},{"location":"man/TableStyle/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>pivot</code>  pivot  <code>table</code>  table  <code>count</code>  count  <code>tableStyleElement</code>  tableStyleElement  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TableStyle/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TableStyle/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTableStyle(name = \"name\")\n</code></pre>"},{"location":"man/TableStyleElement/","title":"TableStyleElement","text":"<p>Source code</p>"},{"location":"man/TableStyleElement/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.table.html</p>"},{"location":"man/TableStyleElement/#usage","title":"Usage","text":"<pre><code>TableStyleElement(type = NULL, size = NULL, dxfId = NULL, ...)\n</code></pre>"},{"location":"man/TableStyleElement/#arguments","title":"Arguments","text":"<code>type</code>  type  <code>size</code>  size  <code>dxfId</code>  dxfId  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TableStyleElement/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TableStyleElement/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTableStyleElement(type = \"secondSubtotalRow\")\n</code></pre>"},{"location":"man/TableStyleInfo/","title":"TableStyleInfo","text":"<p>Source code</p>"},{"location":"man/TableStyleInfo/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.table.html</p>"},{"location":"man/TableStyleInfo/#usage","title":"Usage","text":"<pre><code>TableStyleInfo(\n  name = NULL,\n  showFirstColumn = NULL,\n  showLastColumn = NULL,\n  showRowStripes = NULL,\n  showColumnStripes = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/TableStyleInfo/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>showFirstColumn</code>  showFirstColumn  <code>showLastColumn</code>  showLastColumn  <code>showRowStripes</code>  showRowStripes  <code>showColumnStripes</code>  showColumnStripes  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TableStyleInfo/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TableStyleInfo/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTableStyleInfo()\n</code></pre>"},{"location":"man/TableStyleList/","title":"TableStyleList","text":"<p>Source code</p>"},{"location":"man/TableStyleList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.table.html</p>"},{"location":"man/TableStyleList/#usage","title":"Usage","text":"<pre><code>TableStyleList(\n  count = NULL,\n  defaultTableStyle = \"TableStyleMedium9\",\n  defaultPivotStyle = \"PivotStyleLight16\",\n  tableStyle = list(),\n  ...\n)\n</code></pre>"},{"location":"man/TableStyleList/#arguments","title":"Arguments","text":"<code>count</code>  count  <code>defaultTableStyle</code>  defaultTableStyle  <code>defaultPivotStyle</code>  defaultPivotStyle  <code>tableStyle</code>  tableStyle  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TableStyleList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TableStyleList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTableStyleList()\n</code></pre>"},{"location":"man/TextAxis/","title":"TextAxis","text":"<p>Source code</p>"},{"location":"man/TextAxis/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.axis.html</p>"},{"location":"man/TextAxis/#usage","title":"Usage","text":"<pre><code>TextAxis(\n  auto = NULL,\n  lblAlgn = NULL,\n  lblOffset = 100L,\n  tickLblSkip = NULL,\n  tickMarkSkip = NULL,\n  noMultiLvlLbl = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/TextAxis/#arguments","title":"Arguments","text":"<code>auto</code>  auto  <code>lblAlgn</code>  lblAlgn  <code>lblOffset</code>  lblOffset  <code>tickLblSkip</code>  tickLblSkip  <code>tickMarkSkip</code>  tickMarkSkip  <code>noMultiLvlLbl</code>  noMultiLvlLbl  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TextAxis/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TextAxis/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTextAxis()\n</code></pre>"},{"location":"man/TextBlock/","title":"TextBlock","text":"<p>Source code</p>"},{"location":"man/TextBlock/#description","title":"Description","text":"<p>Represents text string in a specific format</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.rich_text.html</p>"},{"location":"man/TextBlock/#usage","title":"Usage","text":"<pre><code>TextBlock(font, text, ...)\n</code></pre>"},{"location":"man/TextBlock/#arguments","title":"Arguments","text":"<code>font</code>  font  <code>text</code>  text  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TextBlock/#details","title":"Details","text":"<p>This class is used as part of constructing a rich text strings.</p>"},{"location":"man/TextBlock/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TextBlock/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTextBlock(font = InlineFont(), text = \"text\")\n</code></pre>"},{"location":"man/TextField/","title":"TextField","text":"<p>Source code</p>"},{"location":"man/TextField/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/TextField/#usage","title":"Usage","text":"<pre><code>TextField(id = NULL, type = NULL, rPr = NULL, pPr = NULL, t = NULL, ...)\n</code></pre>"},{"location":"man/TextField/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>type</code>  type  <code>rPr</code>  rPr  <code>pPr</code>  pPr  <code>t</code>  t  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TextField/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TextField/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTextField(id = \"id\")\n</code></pre>"},{"location":"man/TextNormalAutofit/","title":"TextNormalAutofit","text":"<p>Source code</p>"},{"location":"man/TextNormalAutofit/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.text.html</p>"},{"location":"man/TextNormalAutofit/#usage","title":"Usage","text":"<pre><code>TextNormalAutofit(fontScale = NULL, lnSpcReduction = NULL, ...)\n</code></pre>"},{"location":"man/TextNormalAutofit/#arguments","title":"Arguments","text":"<code>fontScale</code>  fontScale  <code>lnSpcReduction</code>  lnSpcReduction  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TextNormalAutofit/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TextNormalAutofit/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTextNormalAutofit(fontScale = 1L, lnSpcReduction = 1L)\n</code></pre>"},{"location":"man/TintEffect/","title":"TintEffect","text":"<p>Source code</p>"},{"location":"man/TintEffect/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.effect.html</p>"},{"location":"man/TintEffect/#usage","title":"Usage","text":"<pre><code>TintEffect(hue = 0L, amt = 0L, ...)\n</code></pre>"},{"location":"man/TintEffect/#arguments","title":"Arguments","text":"<code>hue</code>  hue  <code>amt</code>  amt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TintEffect/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TintEffect/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTintEffect()\n</code></pre>"},{"location":"man/Title/","title":"Title","text":"<p>Source code</p>"},{"location":"man/Title/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.title.html</p>"},{"location":"man/Title/#usage","title":"Usage","text":"<pre><code>Title(\n  tx = NULL,\n  layout = NULL,\n  overlay = NULL,\n  spPr = NULL,\n  txPr = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Title/#arguments","title":"Arguments","text":"<code>tx</code>  tx  <code>layout</code>  layout  <code>overlay</code>  overlay  <code>spPr</code>  spPr  <code>txPr</code>  txPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Title/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Title/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTitle()\n</code></pre>"},{"location":"man/TitleDescriptor/","title":"TitleDescriptor","text":"<p>Source code</p>"},{"location":"man/TitleDescriptor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.title.html</p>"},{"location":"man/TitleDescriptor/#usage","title":"Usage","text":"<pre><code>TitleDescriptor(...)\n</code></pre>"},{"location":"man/TitleDescriptor/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TitleDescriptor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TitleDescriptor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTitleDescriptor()\n</code></pre>"},{"location":"man/Transform2D/","title":"Transform2D","text":"<p>Source code</p>"},{"location":"man/Transform2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Transform2D/#usage","title":"Usage","text":"<pre><code>Transform2D(\n  rot = NULL,\n  flipH = NULL,\n  flipV = NULL,\n  off = NULL,\n  ext = NULL,\n  chOff = NULL,\n  chExt = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Transform2D/#arguments","title":"Arguments","text":"<code>rot</code>  rot  <code>flipH</code>  flipH  <code>flipV</code>  flipV  <code>off</code>  off  <code>ext</code>  ext  <code>chOff</code>  chOff  <code>chExt</code>  chExt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Transform2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Transform2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTransform2D()\n</code></pre>"},{"location":"man/Trendline/","title":"Trendline","text":"<p>Source code</p>"},{"location":"man/Trendline/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.trendline.html</p>"},{"location":"man/Trendline/#usage","title":"Usage","text":"<pre><code>Trendline(\n  name = NULL,\n  spPr = NULL,\n  trendlineType = \"linear\",\n  order = NULL,\n  period = NULL,\n  forward = NULL,\n  backward = NULL,\n  intercept = NULL,\n  dispRSqr = NULL,\n  dispEq = NULL,\n  trendlineLbl = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/Trendline/#arguments","title":"Arguments","text":"<code>name</code>  name  <code>spPr</code>  spPr  <code>trendlineType</code>  trendlineType  <code>order</code>  order  <code>period</code>  period  <code>forward</code>  forward  <code>backward</code>  backward  <code>intercept</code>  intercept  <code>dispRSqr</code>  dispRSqr  <code>dispEq</code>  dispEq  <code>trendlineLbl</code>  trendlineLbl  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Trendline/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Trendline/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTrendline()\n</code></pre>"},{"location":"man/TrendlineLabel/","title":"TrendlineLabel","text":"<p>Source code</p>"},{"location":"man/TrendlineLabel/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.trendline.html</p>"},{"location":"man/TrendlineLabel/#usage","title":"Usage","text":"<pre><code>TrendlineLabel(\n  layout = NULL,\n  tx = NULL,\n  numFmt = NULL,\n  spPr = NULL,\n  txPr = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/TrendlineLabel/#arguments","title":"Arguments","text":"<code>layout</code>  layout  <code>tx</code>  tx  <code>numFmt</code>  numFmt  <code>spPr</code>  spPr  <code>txPr</code>  txPr  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TrendlineLabel/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TrendlineLabel/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTrendlineLabel()\n</code></pre>"},{"location":"man/TwoCellAnchor/","title":"TwoCellAnchor","text":"<p>Source code</p>"},{"location":"man/TwoCellAnchor/#description","title":"Description","text":"<p>Note that the argument \u2019_from\u2019 has been transformed to \u2018from\u2019.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.spreadsheet_drawing.html</p>"},{"location":"man/TwoCellAnchor/#usage","title":"Usage","text":"<pre><code>TwoCellAnchor(editAs = NULL, from = NULL, to = NULL, ...)\n</code></pre>"},{"location":"man/TwoCellAnchor/#arguments","title":"Arguments","text":"<code>editAs</code>  editAs  <code>from</code>  \\_from  <code>to</code>  to  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/TwoCellAnchor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/TwoCellAnchor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nTwoCellAnchor()\n</code></pre>"},{"location":"man/UpDownBars/","title":"UpDownBars","text":"<p>Source code</p>"},{"location":"man/UpDownBars/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.updown_bars.html</p>"},{"location":"man/UpDownBars/#usage","title":"Usage","text":"<pre><code>UpDownBars(gapWidth = 150L, upBars = NULL, downBars = NULL, extLst = NULL, ...)\n</code></pre>"},{"location":"man/UpDownBars/#arguments","title":"Arguments","text":"<code>gapWidth</code>  gapWidth  <code>upBars</code>  upBars  <code>downBars</code>  downBars  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/UpDownBars/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/UpDownBars/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nUpDownBars()\n</code></pre>"},{"location":"man/ValueDescriptor/","title":"ValueDescriptor","text":"<p>Source code</p>"},{"location":"man/ValueDescriptor/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.formatting.rule.html</p> <p>Expected type depends upon type attribute of parent :-(</p> <p>Most values should be numeric BUT they can also be cell references</p>"},{"location":"man/ValueDescriptor/#usage","title":"Usage","text":"<pre><code>ValueDescriptor(...)\n</code></pre>"},{"location":"man/ValueDescriptor/#arguments","title":"Arguments","text":"<code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs"},{"location":"man/ValueDescriptor/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/ValueDescriptor/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nValueDescriptor()\n</code></pre>"},{"location":"man/Vector3D/","title":"Vector3D","text":"<p>Source code</p>"},{"location":"man/Vector3D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.geometry.html</p>"},{"location":"man/Vector3D/#usage","title":"Usage","text":"<pre><code>Vector3D(dx = NULL, dy = NULL, dz = NULL, ...)\n</code></pre>"},{"location":"man/Vector3D/#arguments","title":"Arguments","text":"<code>dx</code>  dx  <code>dy</code>  dy  <code>dz</code>  dz  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Vector3D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Vector3D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nVector3D(dx = 1L, dy = 1L, dz = 1L)\n</code></pre>"},{"location":"man/WebPublishItem/","title":"WebPublishItem","text":"<p>Source code</p>"},{"location":"man/WebPublishItem/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chartsheet.publish.html</p>"},{"location":"man/WebPublishItem/#usage","title":"Usage","text":"<pre><code>WebPublishItem(\n  id = NULL,\n  divId = NULL,\n  sourceType = NULL,\n  sourceRef = NULL,\n  sourceObject = NULL,\n  destinationFile = NULL,\n  title = NULL,\n  autoRepublish = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/WebPublishItem/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>divId</code>  divId  <code>sourceType</code>  sourceType  <code>sourceRef</code>  sourceRef  <code>sourceObject</code>  sourceObject  <code>destinationFile</code>  destinationFile  <code>title</code>  title  <code>autoRepublish</code>  autoRepublish  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WebPublishItem/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WebPublishItem/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWebPublishItem(\nid = 1L,\ndivId = \"divId\",\nsourceType = \"chart\",\nsourceRef = \"sourceRef\",\ndestinationFile = \"destinationFile\"\n)\n</code></pre>"},{"location":"man/WebPublishObject/","title":"WebPublishObject","text":"<p>Source code</p>"},{"location":"man/WebPublishObject/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.web.html</p>"},{"location":"man/WebPublishObject/#usage","title":"Usage","text":"<pre><code>WebPublishObject(\n  id = NULL,\n  divId = NULL,\n  sourceObject = NULL,\n  destinationFile = NULL,\n  title = NULL,\n  autoRepublish = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/WebPublishObject/#arguments","title":"Arguments","text":"<code>id</code>  id  <code>divId</code>  divId  <code>sourceObject</code>  sourceObject  <code>destinationFile</code>  destinationFile  <code>title</code>  title  <code>autoRepublish</code>  autoRepublish  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WebPublishObject/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WebPublishObject/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWebPublishObject(\nid = 1L,\ndivId = \"divId\",\ndestinationFile = \"destinationFile\"\n)\n</code></pre>"},{"location":"man/WebPublishObjectList/","title":"WebPublishObjectList","text":"<p>Source code</p>"},{"location":"man/WebPublishObjectList/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.web.html</p>"},{"location":"man/WebPublishObjectList/#usage","title":"Usage","text":"<pre><code>WebPublishObjectList(count = NULL, webPublishObject = list(), ...)\n</code></pre>"},{"location":"man/WebPublishObjectList/#arguments","title":"Arguments","text":"<code>count</code>  count  <code>webPublishObject</code>  webPublishObject  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WebPublishObjectList/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WebPublishObjectList/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWebPublishObjectList()\n</code></pre>"},{"location":"man/WebPublishing/","title":"WebPublishing","text":"<p>Source code</p>"},{"location":"man/WebPublishing/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.web.html</p>"},{"location":"man/WebPublishing/#usage","title":"Usage","text":"<pre><code>WebPublishing(\n  css = NULL,\n  thicket = NULL,\n  longFileNames = NULL,\n  vml = NULL,\n  allowPng = NULL,\n  targetScreenSize = \"800x600\",\n  dpi = NULL,\n  codePage = NULL,\n  characterSet = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/WebPublishing/#arguments","title":"Arguments","text":"<code>css</code>  css  <code>thicket</code>  thicket  <code>longFileNames</code>  longFileNames  <code>vml</code>  vml  <code>allowPng</code>  allowPng  <code>targetScreenSize</code>  targetScreenSize  <code>dpi</code>  dpi  <code>codePage</code>  codePage  <code>characterSet</code>  characterSet  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WebPublishing/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WebPublishing/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWebPublishing()\n</code></pre>"},{"location":"man/Workbook/","title":"Workbook","text":"<p>Source code</p>"},{"location":"man/Workbook/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.workbook.html#openpyxl.workbook.workbook.Workbook</p>"},{"location":"man/Workbook/#usage","title":"Usage","text":"<pre><code>Workbook(write_only = FALSE, iso_dates = FALSE, ...)\n</code></pre>"},{"location":"man/Workbook/#arguments","title":"Arguments","text":"<code>write_only</code>  write_only  <code>iso_dates</code>  iso_dates  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/Workbook/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/Workbook/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWorkbook()\n</code></pre>"},{"location":"man/WorkbookParser/","title":"WorkbookParser","text":"<p>Source code</p>"},{"location":"man/WorkbookParser/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.reader.workbook.html</p>"},{"location":"man/WorkbookParser/#usage","title":"Usage","text":"<pre><code>WorkbookParser(archive, workbook_part_name, keep_links = TRUE, ...)\n</code></pre>"},{"location":"man/WorkbookParser/#arguments","title":"Arguments","text":"<code>archive</code>  archive  <code>workbook_part_name</code>  workbook_part_name  <code>keep_links</code>  keep_links  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WorkbookParser/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WorkbookParser/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWorkbookParser(\narchive = \"archive\",\nworkbook_part_name = \"workbook_part_name\"\n)\n</code></pre>"},{"location":"man/WorkbookProperties/","title":"WorkbookProperties","text":"<p>Source code</p>"},{"location":"man/WorkbookProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.properties.html</p>"},{"location":"man/WorkbookProperties/#usage","title":"Usage","text":"<pre><code>WorkbookProperties(\n  date1904 = NULL,\n  dateCompatibility = NULL,\n  showObjects = NULL,\n  showBorderUnselectedTables = NULL,\n  filterPrivacy = NULL,\n  promptedSolutions = NULL,\n  showInkAnnotation = NULL,\n  backupFile = NULL,\n  saveExternalLinkValues = NULL,\n  updateLinks = NULL,\n  codeName = NULL,\n  hidePivotFieldList = NULL,\n  showPivotChartFilter = NULL,\n  allowRefreshQuery = NULL,\n  publishItems = NULL,\n  checkCompatibility = NULL,\n  autoCompressPictures = NULL,\n  refreshAllConnections = NULL,\n  defaultThemeVersion = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/WorkbookProperties/#arguments","title":"Arguments","text":"<code>date1904</code>  date1904  <code>dateCompatibility</code>  dateCompatibility  <code>showObjects</code>  showObjects  <code>showBorderUnselectedTables</code>  showBorderUnselectedTables  <code>filterPrivacy</code>  filterPrivacy  <code>promptedSolutions</code>  promptedSolutions  <code>showInkAnnotation</code>  showInkAnnotation  <code>backupFile</code>  backupFile  <code>saveExternalLinkValues</code>  saveExternalLinkValues  <code>updateLinks</code>  updateLinks  <code>codeName</code>  codeName  <code>hidePivotFieldList</code>  hidePivotFieldList  <code>showPivotChartFilter</code>  showPivotChartFilter  <code>allowRefreshQuery</code>  allowRefreshQuery  <code>publishItems</code>  publishItems  <code>checkCompatibility</code>  checkCompatibility  <code>autoCompressPictures</code>  autoCompressPictures  <code>refreshAllConnections</code>  refreshAllConnections  <code>defaultThemeVersion</code>  defaultThemeVersion  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WorkbookProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WorkbookProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWorkbookProperties()\n</code></pre>"},{"location":"man/WorkbookProtection/","title":"WorkbookProtection","text":"<p>Source code</p>"},{"location":"man/WorkbookProtection/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.protection.html</p>"},{"location":"man/WorkbookProtection/#usage","title":"Usage","text":"<pre><code>WorkbookProtection(\n  workbookPassword = NULL,\n  workbookPasswordCharacterSet = NULL,\n  revisionsPassword = NULL,\n  revisionsPasswordCharacterSet = NULL,\n  lockStructure = NULL,\n  lockWindows = NULL,\n  lockRevision = NULL,\n  revisionsAlgorithmName = NULL,\n  revisionsHashValue = NULL,\n  revisionsSaltValue = NULL,\n  revisionsSpinCount = NULL,\n  workbookAlgorithmName = NULL,\n  workbookHashValue = NULL,\n  workbookSaltValue = NULL,\n  workbookSpinCount = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/WorkbookProtection/#arguments","title":"Arguments","text":"<code>workbookPassword</code>  workbookPassword  <code>workbookPasswordCharacterSet</code>  workbookPasswordCharacterSet  <code>revisionsPassword</code>  revisionsPassword  <code>revisionsPasswordCharacterSet</code>  revisionsPasswordCharacterSet  <code>lockStructure</code>  lockStructure  <code>lockWindows</code>  lockWindows  <code>lockRevision</code>  lockRevision  <code>revisionsAlgorithmName</code>  revisionsAlgorithmName  <code>revisionsHashValue</code>  revisionsHashValue  <code>revisionsSaltValue</code>  revisionsSaltValue  <code>revisionsSpinCount</code>  revisionsSpinCount  <code>workbookAlgorithmName</code>  workbookAlgorithmName  <code>workbookHashValue</code>  workbookHashValue  <code>workbookSaltValue</code>  workbookSaltValue  <code>workbookSpinCount</code>  workbookSpinCount  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WorkbookProtection/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WorkbookProtection/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWorkbookProtection()\n</code></pre>"},{"location":"man/WorksheetCopy/","title":"WorksheetCopy","text":"<p>Source code</p>"},{"location":"man/WorksheetCopy/#description","title":"Description","text":"<p>Copy the values, styles, dimensions, merged cells, margins, and</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.copier.html</p>"},{"location":"man/WorksheetCopy/#usage","title":"Usage","text":"<pre><code>WorksheetCopy(source_worksheet, target_worksheet, ...)\n</code></pre>"},{"location":"man/WorksheetCopy/#arguments","title":"Arguments","text":"<code>source_worksheet</code>  source_worksheet  <code>target_worksheet</code>  target_worksheet  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WorksheetCopy/#details","title":"Details","text":"<p>print/page setup from one worksheet to another within the same workbook.</p>"},{"location":"man/WorksheetCopy/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WorksheetCopy/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws1 &lt;- wb$active\nws2 &lt;- wb$create_sheet(\"Mysheet\")\nWorksheetCopy(source_worksheet = ws1, target_worksheet = ws2)\n</code></pre>"},{"location":"man/WorksheetProperties/","title":"WorksheetProperties","text":"<p>Source code</p>"},{"location":"man/WorksheetProperties/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.properties.html</p>"},{"location":"man/WorksheetProperties/#usage","title":"Usage","text":"<pre><code>WorksheetProperties(\n  codeName = NULL,\n  enableFormatConditionsCalculation = NULL,\n  filterMode = NULL,\n  published = NULL,\n  syncHorizontal = NULL,\n  syncRef = NULL,\n  syncVertical = NULL,\n  transitionEvaluation = NULL,\n  transitionEntry = NULL,\n  tabColor = NULL,\n  outlinePr = NULL,\n  pageSetUpPr = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/WorksheetProperties/#arguments","title":"Arguments","text":"<code>codeName</code>  codeName  <code>enableFormatConditionsCalculation</code>  enableFormatConditionsCalculation  <code>filterMode</code>  filterMode  <code>published</code>  published  <code>syncHorizontal</code>  syncHorizontal  <code>syncRef</code>  syncRef  <code>syncVertical</code>  syncVertical  <code>transitionEvaluation</code>  transitionEvaluation  <code>transitionEntry</code>  transitionEntry  <code>tabColor</code>  tabColor  <code>outlinePr</code>  outlinePr  <code>pageSetUpPr</code>  pageSetUpPr  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WorksheetProperties/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WorksheetProperties/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nWorksheetProperties()\n</code></pre>"},{"location":"man/WriteOnlyCell/","title":"WriteOnlyCell","text":"<p>Source code</p>"},{"location":"man/WriteOnlyCell/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.cell.html</p>"},{"location":"man/WriteOnlyCell/#usage","title":"Usage","text":"<pre><code>WriteOnlyCell(ws = NULL, value = NULL, ...)\n</code></pre>"},{"location":"man/WriteOnlyCell/#arguments","title":"Arguments","text":"<code>ws</code>  ws  <code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/WriteOnlyCell/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/WriteOnlyCell/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nWriteOnlyCell(ws = wb$active)\n</code></pre>"},{"location":"man/XDRPoint2D/","title":"XDRPoint2D","text":"<p>Source code</p>"},{"location":"man/XDRPoint2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.xdr.html</p>"},{"location":"man/XDRPoint2D/#usage","title":"Usage","text":"<pre><code>XDRPoint2D(x = NULL, y = NULL, ...)\n</code></pre>"},{"location":"man/XDRPoint2D/#arguments","title":"Arguments","text":"<code>x</code>  x  <code>y</code>  y  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/XDRPoint2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/XDRPoint2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nXDRPoint2D(x = 1L, y = 1L)\n</code></pre>"},{"location":"man/XDRPositiveSize2D/","title":"XDRPositiveSize2D","text":"<p>Source code</p>"},{"location":"man/XDRPositiveSize2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.xdr.html</p>"},{"location":"man/XDRPositiveSize2D/#usage","title":"Usage","text":"<pre><code>XDRPositiveSize2D(cx = NULL, cy = NULL, ...)\n</code></pre>"},{"location":"man/XDRPositiveSize2D/#arguments","title":"Arguments","text":"<code>cx</code>  cx  <code>cy</code>  cy  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/XDRPositiveSize2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/XDRPositiveSize2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nXDRPositiveSize2D(cx = 1L, cy = 1L)\n</code></pre>"},{"location":"man/XDRTransform2D/","title":"XDRTransform2D","text":"<p>Source code</p>"},{"location":"man/XDRTransform2D/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.drawing.xdr.html</p>"},{"location":"man/XDRTransform2D/#usage","title":"Usage","text":"<pre><code>XDRTransform2D(\n  rot = NULL,\n  flipH = NULL,\n  flipV = NULL,\n  off = NULL,\n  ext = NULL,\n  chOff = NULL,\n  chExt = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/XDRTransform2D/#arguments","title":"Arguments","text":"<code>rot</code>  rot  <code>flipH</code>  flipH  <code>flipV</code>  flipV  <code>off</code>  off  <code>ext</code>  ext  <code>chOff</code>  chOff  <code>chExt</code>  chExt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/XDRTransform2D/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/XDRTransform2D/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nXDRTransform2D()\n</code></pre>"},{"location":"man/XMLColumnProps/","title":"XMLColumnProps","text":"<p>Source code</p>"},{"location":"man/XMLColumnProps/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.table.html</p>"},{"location":"man/XMLColumnProps/#usage","title":"Usage","text":"<pre><code>XMLColumnProps(\n  mapId = NULL,\n  xpath = NULL,\n  denormalized = NULL,\n  xmlDataType = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/XMLColumnProps/#arguments","title":"Arguments","text":"<code>mapId</code>  mapId  <code>xpath</code>  xpath  <code>denormalized</code>  denormalized  <code>xmlDataType</code>  xmlDataType  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/XMLColumnProps/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/XMLColumnProps/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nXMLColumnProps(mapId = 1L, xpath = \"xpath\", xmlDataType = \"xmlDataType\")\n</code></pre>"},{"location":"man/XYSeries/","title":"XYSeries","text":"<p>Source code</p>"},{"location":"man/XYSeries/#description","title":"Description","text":"<p>Dedicated series for charts that have x and y series</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.series.html</p>"},{"location":"man/XYSeries/#usage","title":"Usage","text":"<pre><code>XYSeries(\n  idx = 0L,\n  order = 0L,\n  tx = NULL,\n  spPr = NULL,\n  pictureOptions = NULL,\n  dPt = list(),\n  dLbls = NULL,\n  trendline = NULL,\n  errBars = NULL,\n  cat = NULL,\n  val = NULL,\n  invertIfNegative = NULL,\n  shape = NULL,\n  xVal = NULL,\n  yVal = NULL,\n  bubbleSize = NULL,\n  bubble3D = NULL,\n  marker = NULL,\n  smooth = NULL,\n  explosion = NULL,\n  extLst = NULL,\n  ...\n)\n</code></pre>"},{"location":"man/XYSeries/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>order</code>  order  <code>tx</code>  tx  <code>spPr</code>  spPr  <code>pictureOptions</code>  pictureOptions  <code>dPt</code>  dPt  <code>dLbls</code>  dLbls  <code>trendline</code>  trendline  <code>errBars</code>  errBars  <code>cat</code>  cat  <code>val</code>  val  <code>invertIfNegative</code>  invertIfNegative  <code>shape</code>  shape  <code>xVal</code>  xVal  <code>yVal</code>  yVal  <code>bubbleSize</code>  bubbleSize  <code>bubble3D</code>  bubble3D  <code>marker</code>  marker  <code>smooth</code>  smooth  <code>explosion</code>  explosion  <code>extLst</code>  extLst  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/XYSeries/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/XYSeries/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nXYSeries()\n</code></pre>"},{"location":"man/absolute_coordinate/","title":"absolute_coordinate","text":"<p>Source code</p>"},{"location":"man/absolute_coordinate/#description","title":"Description","text":"<p>Convert a coordinate to an absolute coordinate string (B12 -&gt; $B$12)</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/absolute_coordinate/#usage","title":"Usage","text":"<pre><code>absolute_coordinate(coord_string, ...)\n</code></pre>"},{"location":"man/absolute_coordinate/#arguments","title":"Arguments","text":"<code>coord_string</code>  coord_string  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/absolute_coordinate/#value","title":"Value","text":"<p>An string.</p>"},{"location":"man/absolute_coordinate/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nabsolute_coordinate(\"A1\")\n</code></pre>"},{"location":"man/active/","title":"active","text":"<p>Source code</p>"},{"location":"man/active/#description","title":"Description","text":"<p>Get the currently active sheet or NULL.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.workbook.html#openpyxl.workbook.workbook.Workbook.active</p>"},{"location":"man/active/#usage","title":"Usage","text":"<pre><code>active(py_obj)\n</code></pre>"},{"location":"man/active/#arguments","title":"Arguments","text":"<code>py_obj</code>  py_obj"},{"location":"man/active/#details","title":"Details","text":"<p>:type: :class:\u2018openpyxl.worksheet.worksheet.Worksheet\u2019</p>"},{"location":"man/active/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/active/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nwb |&gt; active() #equivalent to wb$active\n</code></pre>"},{"location":"man/add_chart/","title":"Add a chart to the sheet","text":"<p>Source code</p>"},{"location":"man/add_chart/#description","title":"Description","text":"<p>Optionally provide a cell for the top-left anchor</p>"},{"location":"man/add_chart/#usage","title":"Usage","text":"<pre><code>add_chart(py_obj, chart, anchor = NULL, ...)\n</code></pre>"},{"location":"man/add_chart/#arguments","title":"Arguments","text":"<code>py_obj</code>  py_obj  <code>chart</code>  chart  <code>anchor</code>  anchor  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/add_chart/#details","title":"Details","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.worksheet.html#openpyxl.worksheet.worksheet.Worksheet.add_chart</p>"},{"location":"man/add_chart/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/add_chart/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws &lt;- wb$active\nchart &lt;- BarChart(type = \"col\")\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=7, max_col=3)\ncats &lt;- Reference(ws, min_col=1, min_row=2, max_row=7)\nchart |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\nws |&gt; add_chart(chart, \"A10\")\n</code></pre>"},{"location":"man/add_data/","title":"Add a range of data in a single pass.","text":"<p>Source code</p>"},{"location":"man/add_data/#description","title":"Description","text":"<p>The default is to treat each column as a data series.</p>"},{"location":"man/add_data/#usage","title":"Usage","text":"<pre><code>add_data(py_obj, data, from_rows = FALSE, titles_from_data = FALSE)\n</code></pre>"},{"location":"man/add_data/#arguments","title":"Arguments","text":"<code>py_obj</code>  py_obj  <code>data</code>  data  <code>from_rows</code>  from_rows  <code>titles_from_data</code>  titles_from_data"},{"location":"man/add_data/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/add_data/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws &lt;- active(wb)\n\nchart1 &lt;- BarChart(\n  type = \"col\",\n style = 10,\n  title = \"Bar Chart\",\n  shape = 4\n) |&gt;\n  y_axis(title = \"Test number\") |&gt;\n  x_axis(title = \"Sample length (mm)\")\n\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=7, max_col=3)\ncats &lt;- Reference(ws, min_col=1, min_row=2, max_row=7)\n\nchart1 |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\n</code></pre>"},{"location":"man/add_table/","title":"Check for duplicate name in definedNames and other worksheet tables before adding table.","text":"<p>Source code</p>"},{"location":"man/add_table/#description","title":"Description","text":"<p>Check for duplicate name in definedNames and other worksheet tables before adding table.</p>"},{"location":"man/add_table/#usage","title":"Usage","text":"<pre><code>add_table(py_obj, table)\n</code></pre>"},{"location":"man/add_table/#arguments","title":"Arguments","text":"<code>py_obj</code>  py_obj  <code>table</code>  table"},{"location":"man/add_table/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/add_table/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws &lt;- wb$active\ntab = Table(displayName=\"Table1\", ref=\"A1:E5\")\nws |&gt; add_table(tab)\nws$tables\n</code></pre>"},{"location":"man/angle_to_degrees/","title":"angle_to_degrees","text":"<p>Source code</p>"},{"location":"man/angle_to_degrees/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/angle_to_degrees/#usage","title":"Usage","text":"<pre><code>angle_to_degrees(value, ...)\n</code></pre>"},{"location":"man/angle_to_degrees/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/angle_to_degrees/#value","title":"Value","text":"<p>A numeric value.</p>"},{"location":"man/angle_to_degrees/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nangle_to_degrees(value = 1000L)\n</code></pre>"},{"location":"man/avoid_duplicate_name/","title":"avoid_duplicate_name","text":"<p>Source code</p>"},{"location":"man/avoid_duplicate_name/#description","title":"Description","text":"<p>Naive check to see whether name already exists.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.workbook.child.html</p>"},{"location":"man/avoid_duplicate_name/#usage","title":"Usage","text":"<pre><code>avoid_duplicate_name(names, value, ...)\n</code></pre>"},{"location":"man/avoid_duplicate_name/#arguments","title":"Arguments","text":"<code>names</code>  names  <code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/avoid_duplicate_name/#details","title":"Details","text":"<p>If name does exist suggest a name using an incrementer Duplicates are case insensitive</p>"},{"location":"man/avoid_duplicate_name/#value","title":"Value","text":"<p>An character string.</p>"},{"location":"man/avoid_duplicate_name/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\navoid_duplicate_name(names = \"name\", value = \"name\")\n</code></pre>"},{"location":"man/builtin_format_code/","title":"builtin_format_code","text":"<p>Source code</p>"},{"location":"man/builtin_format_code/#description","title":"Description","text":"<p>Return one of the standard format codes by index.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.numbers.html</p>"},{"location":"man/builtin_format_code/#usage","title":"Usage","text":"<pre><code>builtin_format_code(index, ...)\n</code></pre>"},{"location":"man/builtin_format_code/#arguments","title":"Arguments","text":"<code>index</code>  index  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/builtin_format_code/#value","title":"Value","text":"<p>An character string.</p>"},{"location":"man/builtin_format_code/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nbuiltin_format_code(index = 2L)\n</code></pre>"},{"location":"man/builtin_format_id/","title":"builtin_format_id","text":"<p>Source code</p>"},{"location":"man/builtin_format_id/#description","title":"Description","text":"<p>Return the id of a standard style.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.numbers.html</p>"},{"location":"man/builtin_format_id/#usage","title":"Usage","text":"<pre><code>builtin_format_id(fmt, ...)\n</code></pre>"},{"location":"man/builtin_format_id/#arguments","title":"Arguments","text":"<code>fmt</code>  fmt  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/builtin_format_id/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/builtin_format_id/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nbuiltin_format_id(fmt = NULL)\n</code></pre>"},{"location":"man/cast_numeric/","title":"cast_numeric","text":"<p>Source code</p>"},{"location":"man/cast_numeric/#description","title":"Description","text":"<p>Explicitly convert a string to a numeric value</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.inference.html</p>"},{"location":"man/cast_numeric/#usage","title":"Usage","text":"<pre><code>cast_numeric(value, ...)\n</code></pre>"},{"location":"man/cast_numeric/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/cast_numeric/#value","title":"Value","text":"<p>An numeric value.</p>"},{"location":"man/cast_numeric/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ncast_numeric(value = \"1\")\n</code></pre>"},{"location":"man/cast_percentage/","title":"cast_percentage","text":"<p>Source code</p>"},{"location":"man/cast_percentage/#description","title":"Description","text":"<p>Explicitly convert a string to numeric value and format as a percentage</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.inference.html</p>"},{"location":"man/cast_percentage/#usage","title":"Usage","text":"<pre><code>cast_percentage(value, ...)\n</code></pre>"},{"location":"man/cast_percentage/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/cast_percentage/#value","title":"Value","text":"<p>An numeric value.</p>"},{"location":"man/cast_percentage/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ncast_percentage(value = \"50%\")\n</code></pre>"},{"location":"man/cast_time/","title":"cast_time","text":"<p>Source code</p>"},{"location":"man/cast_time/#description","title":"Description","text":"<p>Explicitly convert a string to a number and format as datetime or time</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.inference.html</p>"},{"location":"man/cast_time/#usage","title":"Usage","text":"<pre><code>cast_time(value, ...)\n</code></pre>"},{"location":"man/cast_time/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/cast_time/#value","title":"Value","text":"<p>An Python \"datetime.time\" object.</p>"},{"location":"man/cast_time/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ncast_time(value = \"00:00:01\")\n</code></pre>"},{"location":"man/cm_to_EMU/","title":"cm_to_EMU","text":"<p>Source code</p>"},{"location":"man/cm_to_EMU/#description","title":"Description","text":"<p>1 cm = 360000 EMUs</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/cm_to_EMU/#usage","title":"Usage","text":"<pre><code>cm_to_EMU(value, ...)\n</code></pre>"},{"location":"man/cm_to_EMU/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/cm_to_EMU/#value","title":"Value","text":"<p>A numeric value.</p>"},{"location":"man/cm_to_EMU/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ncm_to_EMU(value = 1L)\n</code></pre>"},{"location":"man/cm_to_dxa/","title":"cm_to_dxa","text":"<p>Source code</p>"},{"location":"man/cm_to_dxa/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/cm_to_dxa/#usage","title":"Usage","text":"<pre><code>cm_to_dxa(value, ...)\n</code></pre>"},{"location":"man/cm_to_dxa/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/cm_to_dxa/#value","title":"Value","text":"<p>A numeric value.</p>"},{"location":"man/cm_to_dxa/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ncm_to_dxa(value = 1L)\n</code></pre>"},{"location":"man/column_index_from_string/","title":"column_index_from_string","text":"<p>Source code</p>"},{"location":"man/column_index_from_string/#description","title":"Description","text":"<p>Convert a column name into a numerical index</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/column_index_from_string/#usage","title":"Usage","text":"<pre><code>column_index_from_string(str_col, ...)\n</code></pre>"},{"location":"man/column_index_from_string/#arguments","title":"Arguments","text":"<code>str_col</code>  str_col  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/column_index_from_string/#details","title":"Details","text":"<p>(\u2018A\u2019 -&gt; 1)</p>"},{"location":"man/column_index_from_string/#value","title":"Value","text":"<p>A numeric value.</p>"},{"location":"man/column_index_from_string/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ncolumn_index_from_string(str_col = \"A\")\n</code></pre>"},{"location":"man/coordinate_from_string/","title":"coordinate_from_string","text":"<p>Source code</p>"},{"location":"man/coordinate_from_string/#description","title":"Description","text":"<p>Convert a coordinate string like \u2018B12\u2019 to a list (\u2018B\u2019, 12)</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/coordinate_from_string/#usage","title":"Usage","text":"<pre><code>coordinate_from_string(coord_string, ...)\n</code></pre>"},{"location":"man/coordinate_from_string/#arguments","title":"Arguments","text":"<code>coord_string</code>  coord_string  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/coordinate_from_string/#value","title":"Value","text":"<p>A list.</p>"},{"location":"man/coordinate_from_string/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ncoordinate_from_string(coord_string = \"A1\")\n</code></pre>"},{"location":"man/coordinate_to_tuple/","title":"coordinate_to_tuple","text":"<p>Source code</p>"},{"location":"man/coordinate_to_tuple/#description","title":"Description","text":"<p>Convert an Excel style coordinate to (row, column) list</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/coordinate_to_tuple/#usage","title":"Usage","text":"<pre><code>coordinate_to_tuple(coordinate, ...)\n</code></pre>"},{"location":"man/coordinate_to_tuple/#arguments","title":"Arguments","text":"<code>coordinate</code>  coordinate  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/coordinate_to_tuple/#value","title":"Value","text":"<p>A list.</p>"},{"location":"man/coordinate_to_tuple/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ncoordinate_to_tuple(coordinate = \"A1\")\n</code></pre>"},{"location":"man/deepcopy/","title":"Deep copy operation from deepcopy Python module","text":"<p>Source code</p>"},{"location":"man/deepcopy/#description","title":"Description","text":"<p>https://docs.python.org/3/library/copy.html</p>"},{"location":"man/deepcopy/#usage","title":"Usage","text":"<pre><code>deepcopy(x, memo = NULL, nil = c())\n</code></pre>"},{"location":"man/deepcopy/#arguments","title":"Arguments","text":"<code>x</code>  x  <code>memo</code>  memo  <code>nil</code>  \\_nil"},{"location":"man/deepcopy/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/deepcopy/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\ndeepcopy(wb)\n</code></pre>"},{"location":"man/degrees_to_angle/","title":"degrees_to_angle","text":"<p>Source code</p>"},{"location":"man/degrees_to_angle/#description","title":"Description","text":"<p>1 degree = 60000 angles</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/degrees_to_angle/#usage","title":"Usage","text":"<pre><code>degrees_to_angle(value, ...)\n</code></pre>"},{"location":"man/degrees_to_angle/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/degrees_to_angle/#value","title":"Value","text":"<p>A numeric value.</p>"},{"location":"man/degrees_to_angle/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ndegrees_to_angle(value = 1)\n</code></pre>"},{"location":"man/dxa_to_cm/","title":"dxa_to_cm","text":"<p>Source code</p>"},{"location":"man/dxa_to_cm/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/dxa_to_cm/#usage","title":"Usage","text":"<pre><code>dxa_to_cm(value, ...)\n</code></pre>"},{"location":"man/dxa_to_cm/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/dxa_to_cm/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/dxa_to_cm/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ndxa_to_cm(value = 1L)\n</code></pre>"},{"location":"man/expand_cell_ranges/","title":"expand_cell_ranges","text":"<p>Source code</p>"},{"location":"man/expand_cell_ranges/#description","title":"Description","text":"<p>Expand cell ranges to a sequence of addresses.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.datavalidation.html</p>"},{"location":"man/expand_cell_ranges/#usage","title":"Usage","text":"<pre><code>expand_cell_ranges(range_string, ...)\n</code></pre>"},{"location":"man/expand_cell_ranges/#arguments","title":"Arguments","text":"<code>range_string</code>  range_string  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/expand_cell_ranges/#details","title":"Details","text":"<p>Reverse of collapse_cell_addresses Eg. converts \"A1:A2 B1:B2\" to (A1, A2, B1, B2)</p>"},{"location":"man/expand_cell_ranges/#value","title":"Value","text":"<p>An Python builtin object.</p>"},{"location":"man/expand_cell_ranges/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nexpand_cell_ranges(range_string = \"A1:A2\")\n</code></pre>"},{"location":"man/get_column_interval/","title":"get_column_interval","text":"<p>Source code</p>"},{"location":"man/get_column_interval/#description","title":"Description","text":"<p>Given the start and end columns, return all the columns in the series.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/get_column_interval/#usage","title":"Usage","text":"<pre><code>get_column_interval(start, end, ...)\n</code></pre>"},{"location":"man/get_column_interval/#arguments","title":"Arguments","text":"<code>start</code>  start  <code>end</code>  end  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/get_column_interval/#details","title":"Details","text":"<p>The start and end columns can be either column letters or 1-based indexes.</p>"},{"location":"man/get_column_interval/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/get_column_interval/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nget_column_interval(start = \"A\", end = 3L)\n</code></pre>"},{"location":"man/get_column_letter/","title":"get_column_letter","text":"<p>Source code</p>"},{"location":"man/get_column_letter/#description","title":"Description","text":"<p>Convert a column index into a column letter</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/get_column_letter/#usage","title":"Usage","text":"<pre><code>get_column_letter(idx, ...)\n</code></pre>"},{"location":"man/get_column_letter/#arguments","title":"Arguments","text":"<code>idx</code>  idx  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/get_column_letter/#details","title":"Details","text":"<p>(3 -&gt; \u2018C\u2019)</p>"},{"location":"man/get_column_letter/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/get_column_letter/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nget_column_letter(idx = 3L)\n</code></pre>"},{"location":"man/get_type/","title":"get_type","text":"<p>Source code</p>"},{"location":"man/get_type/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.cell.cell.html</p>"},{"location":"man/get_type/#usage","title":"Usage","text":"<pre><code>get_type(t, value, ...)\n</code></pre>"},{"location":"man/get_type/#arguments","title":"Arguments","text":"<code>t</code>  t  <code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/get_type/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/get_type/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nget_type(t = \"t\", value = \"value\")\n</code></pre>"},{"location":"man/hash_password/","title":"hash_password","text":"<p>Source code</p>"},{"location":"man/hash_password/#description","title":"Description","text":"<p>Create a password hash from a given string for protecting a worksheet</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.protection.html</p>"},{"location":"man/hash_password/#usage","title":"Usage","text":"<pre><code>hash_password(plaintext_password = \"\", ...)\n</code></pre>"},{"location":"man/hash_password/#arguments","title":"Arguments","text":"<code>plaintext_password</code>  plaintext_password  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/hash_password/#details","title":"Details","text":"<p>only. This will not work for encrypting a workbook. This method is based on the algorithm provided by Daniel Rentz of OpenOffice and the PEAR package Spreadsheet_Excel_Writer by Xavier Noguer \\&lt;xnoguer@rezebra.com&gt;. See also http://blogs.msdn.com/b/ericwhite/archive/2008/02/23/the-legacy-hashing-algorithm-in-open-xml.aspx</p>"},{"location":"man/hash_password/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/hash_password/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nhash_password(plaintext_password = \"password\")\n</code></pre>"},{"location":"man/iadd/","title":"iadd from operator Python module","text":"<p>Source code</p>"},{"location":"man/iadd/#description","title":"Description","text":"<p>https://docs.python.org/3/library/operator.html#in-place-operators</p>"},{"location":"man/iadd/#usage","title":"Usage","text":"<pre><code>iadd(a, b)\n</code></pre>"},{"location":"man/iadd/#arguments","title":"Arguments","text":"<code>a</code>  a  <code>b</code>  b"},{"location":"man/iadd/#value","title":"Value","text":"<p>A Python object.</p>"},{"location":"man/iadd/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\na &lt;- \"hello\"\niadd(a = a, b = \" world\")\n</code></pre>"},{"location":"man/inch_to_EMU/","title":"inch_to_EMU","text":"<p>Source code</p>"},{"location":"man/inch_to_EMU/#description","title":"Description","text":"<p>1 inch = 914400 EMUs</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/inch_to_EMU/#usage","title":"Usage","text":"<pre><code>inch_to_EMU(value, ...)\n</code></pre>"},{"location":"man/inch_to_EMU/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/inch_to_EMU/#value","title":"Value","text":"<p>An numeric value.</p>"},{"location":"man/inch_to_EMU/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ninch_to_EMU(value = 1)\n</code></pre>"},{"location":"man/inch_to_dxa/","title":"inch_to_dxa","text":"<p>Source code</p>"},{"location":"man/inch_to_dxa/#description","title":"Description","text":"<p>1 inch = 72 * 20 dxa</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/inch_to_dxa/#usage","title":"Usage","text":"<pre><code>inch_to_dxa(value, ...)\n</code></pre>"},{"location":"man/inch_to_dxa/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/inch_to_dxa/#value","title":"Value","text":"<p>An numeric value.</p>"},{"location":"man/inch_to_dxa/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ninch_to_dxa(value = 1)\n</code></pre>"},{"location":"man/install_openpyxl/","title":"Install openpyxl Python module","text":"<p>Source code</p>"},{"location":"man/install_openpyxl/#description","title":"Description","text":"<p>Install openpyxl Python module</p>"},{"location":"man/install_openpyxl/#usage","title":"Usage","text":"<pre><code>install_openpyxl(method = \"auto\", conda = \"auto\")\n</code></pre>"},{"location":"man/install_openpyxl/#arguments","title":"Arguments","text":"<code>method</code>  method  <code>conda</code>  conda"},{"location":"man/install_openpyxl/#value","title":"Value","text":"<p>(Invisible) \u2018TRUE\u2019 if the Conda environment was created successfully.</p>"},{"location":"man/install_pillow/","title":"Install pillow Python module","text":"<p>Source code</p>"},{"location":"man/install_pillow/#description","title":"Description","text":"<p>Module needed to include images in an Excel file.</p>"},{"location":"man/install_pillow/#usage","title":"Usage","text":"<pre><code>install_pillow(method = \"auto\", conda = \"auto\")\n</code></pre>"},{"location":"man/install_pillow/#arguments","title":"Arguments","text":"<code>method</code>  method  <code>conda</code>  conda"},{"location":"man/install_pillow/#value","title":"Value","text":"<p>(Invisible) \u2018TRUE\u2019 if the Conda environment was created successfully.</p>"},{"location":"man/load_workbook/","title":"load_workbook","text":"<p>Source code</p>"},{"location":"man/load_workbook/#description","title":"Description","text":"<p>Open the given filename and return the workbook</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.reader.excel.html</p>"},{"location":"man/load_workbook/#usage","title":"Usage","text":"<pre><code>load_workbook(\n  filename,\n  read_only = FALSE,\n  keep_vba = FALSE,\n  data_only = FALSE,\n  keep_links = TRUE,\n  rich_text = FALSE,\n  ...\n)\n</code></pre>"},{"location":"man/load_workbook/#arguments","title":"Arguments","text":"<code>filename</code>  filename string or a file-like object open in binary mode c.f., :class:\u2018zipfile.ZipFile\u2019 :param read_only: optimised for reading, content cannot be edited  <code>read_only</code>  read_only bool  <code>keep_vba</code>  keep_vba preserve vba content (this does NOT mean you can use it)  <code>data_only</code>  data_only bool  <code>keep_links</code>  keep_links whether links to external workbooks should be preserved. The default is TRUE  <code>rich_text</code>  rich_text bool :rtype: :class:\u2018openpyxl.workbook.Workbook\u2019 .. note:: When using lazy load, all worksheets will be :class:\u2018openpyxl.worksheet.iter_worksheet.IterableWorksheet\u2019 and the returned workbook will be read-only.  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/load_workbook/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/load_workbook/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ntmp &lt;- write_xlsx(list(mysheet = iris))\nload_workbook(filename = tmp)\n</code></pre>"},{"location":"man/pixels_to_EMU/","title":"pixels_to_EMU","text":"<p>Source code</p>"},{"location":"man/pixels_to_EMU/#description","title":"Description","text":"<p>1 pixel = 9525 EMUs</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/pixels_to_EMU/#usage","title":"Usage","text":"<pre><code>pixels_to_EMU(value, ...)\n</code></pre>"},{"location":"man/pixels_to_EMU/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/pixels_to_EMU/#value","title":"Value","text":"<p>A numeric value.</p>"},{"location":"man/pixels_to_EMU/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\npixels_to_EMU(value = 1L)\n</code></pre>"},{"location":"man/pixels_to_points/","title":"pixels_to_points","text":"<p>Source code</p>"},{"location":"man/pixels_to_points/#description","title":"Description","text":"<p>96 dpi, 72i</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/pixels_to_points/#usage","title":"Usage","text":"<pre><code>pixels_to_points(value, dpi = 96L, ...)\n</code></pre>"},{"location":"man/pixels_to_points/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>dpi</code>  dpi  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/pixels_to_points/#value","title":"Value","text":"<p>A numeric value.</p>"},{"location":"man/pixels_to_points/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\npixels_to_points(value = 1L)\n</code></pre>"},{"location":"man/points_to_pixels/","title":"points_to_pixels","text":"<p>Source code</p>"},{"location":"man/points_to_pixels/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/points_to_pixels/#usage","title":"Usage","text":"<pre><code>points_to_pixels(value, dpi = 96L, ...)\n</code></pre>"},{"location":"man/points_to_pixels/#arguments","title":"Arguments","text":"<code>value</code>  value  <code>dpi</code>  dpi  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/points_to_pixels/#value","title":"Value","text":"<p>A numeric value.</p>"},{"location":"man/points_to_pixels/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\npoints_to_pixels(value = 1L)\n</code></pre>"},{"location":"man/quote_sheetname/","title":"quote_sheetname","text":"<p>Source code</p>"},{"location":"man/quote_sheetname/#description","title":"Description","text":"<p>Add quotes around sheetnames if they contain spaces.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/quote_sheetname/#usage","title":"Usage","text":"<pre><code>quote_sheetname(sheetname, ...)\n</code></pre>"},{"location":"man/quote_sheetname/#arguments","title":"Arguments","text":"<code>sheetname</code>  sheetname  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/quote_sheetname/#value","title":"Value","text":"<p>An string.</p>"},{"location":"man/quote_sheetname/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nquote_sheetname(wb$sheetnames)\n</code></pre>"},{"location":"man/range_boundaries/","title":"range_boundaries","text":"<p>Source code</p>"},{"location":"man/range_boundaries/#description","title":"Description","text":"<p>Convert a range string into a list of boundaries:</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/range_boundaries/#usage","title":"Usage","text":"<pre><code>range_boundaries(range_string, ...)\n</code></pre>"},{"location":"man/range_boundaries/#arguments","title":"Arguments","text":"<code>range_string</code>  range_string  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/range_boundaries/#details","title":"Details","text":"<p>(min_col, min_row, max_col, max_row) Cell coordinates will be converted into a range with the cell at both end</p>"},{"location":"man/range_boundaries/#value","title":"Value","text":"<p>An list.</p>"},{"location":"man/range_boundaries/#convert-a-range-string-into-a-tuple-of-boundaries","title":"Convert a range string into a tuple of boundaries","text":"<p>(min_col, min_row, max_col, max_row) Cell coordinates will be converted into a range with the cell at both end</p>"},{"location":"man/range_boundaries/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nrange_boundaries(range_string = \"A\")\n</code></pre>"},{"location":"man/range_to_tuple/","title":"range_to_tuple","text":"<p>Source code</p>"},{"location":"man/range_to_tuple/#description","title":"Description","text":"<p>Convert a worksheet range to the sheetname and maximum and minimum coordinate indices</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/range_to_tuple/#usage","title":"Usage","text":"<pre><code>range_to_tuple(range_string, ...)\n</code></pre>"},{"location":"man/range_to_tuple/#arguments","title":"Arguments","text":"<code>range_string</code>  range_string  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/range_to_tuple/#value","title":"Value","text":"<p>An list.</p>"},{"location":"man/range_to_tuple/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nrange_to_tuple(range_string = \"sheetname!A1:E4\")\n</code></pre>"},{"location":"man/rows_from_range/","title":"rows_from_range","text":"<p>Source code</p>"},{"location":"man/rows_from_range/#description","title":"Description","text":"<p>Get individual addresses for every cell in a range.</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.cell.html</p>"},{"location":"man/rows_from_range/#usage","title":"Usage","text":"<pre><code>rows_from_range(range_string, ...)\n</code></pre>"},{"location":"man/rows_from_range/#arguments","title":"Arguments","text":"<code>range_string</code>  range_string  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/rows_from_range/#details","title":"Details","text":"<p>Yields one row at a time.</p>"},{"location":"man/rows_from_range/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/rows_from_range/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nrows_from_range(range_string = \"A\")\n</code></pre>"},{"location":"man/save_workbook/","title":"save_workbook","text":"<p>Source code</p>"},{"location":"man/save_workbook/#description","title":"Description","text":"<p>Save the given workbook on the filesystem under the name filename.</p> <p>https://openpyxl.readthedocs.io/en/latest/api/openpyxl.writer.excel.html</p>"},{"location":"man/save_workbook/#usage","title":"Usage","text":"<pre><code>save_workbook(workbook, filename, ...)\n</code></pre>"},{"location":"man/save_workbook/#arguments","title":"Arguments","text":"<code>workbook</code>  workbook  <code>filename</code>  filename  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/save_workbook/#details","title":"Details","text":"<p>:param workbook: the workbook to save :type workbook: :class:\u2018openpyxl.workbook.Workbook\u2019 :param filename: the path to which save the workbook :type filename: string :rtype: bool</p>"},{"location":"man/save_workbook/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/save_workbook/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nsave_workbook(workbook = wb, filename = tempfile())\n</code></pre>"},{"location":"man/set_categories/","title":"set_categories","text":"<p>Source code</p>"},{"location":"man/set_categories/#description","title":"Description","text":"<p>Set the categories / x-axis values</p>"},{"location":"man/set_categories/#usage","title":"Usage","text":"<pre><code>set_categories(py_obj, labels)\n</code></pre>"},{"location":"man/set_categories/#arguments","title":"Arguments","text":"<code>py_obj</code>  py_obj  <code>labels</code>  labels"},{"location":"man/set_categories/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/set_categories/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nws &lt;- active(wb)\n\nchart1 &lt;- BarChart(\n  type = \"col\",\n style = 10,\n  title = \"Bar Chart\",\n  shape = 4\n) |&gt;\n  y_axis(title = \"Test number\") |&gt;\n  x_axis(title = \"Sample length (mm)\")\n\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=7, max_col=3)\ncats &lt;- Reference(ws, min_col=1, min_row=2, max_row=7)\n\nchart1 |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\n</code></pre>"},{"location":"man/short_color/","title":"short_color","text":"<p>Source code</p>"},{"location":"man/short_color/#description","title":"Description","text":"<p>format a color to its short size</p> <p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.utils.units.html</p>"},{"location":"man/short_color/#usage","title":"Usage","text":"<pre><code>short_color(color, ...)\n</code></pre>"},{"location":"man/short_color/#arguments","title":"Arguments","text":"<code>color</code>  color  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/short_color/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/short_color/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nshort_color(color = \"color\")\n</code></pre>"},{"location":"man/title_maker/","title":"title_maker","text":"<p>Source code</p>"},{"location":"man/title_maker/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.chart.title.html</p>"},{"location":"man/title_maker/#usage","title":"Usage","text":"<pre><code>title_maker(text, ...)\n</code></pre>"},{"location":"man/title_maker/#arguments","title":"Arguments","text":"<code>text</code>  text  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/title_maker/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/title_maker/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\ntitle_maker(text = \"text\")\n</code></pre>"},{"location":"man/write_stylesheet/","title":"write_stylesheet","text":"<p>Source code</p>"},{"location":"man/write_stylesheet/#description","title":"Description","text":"<p>https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.stylesheet.html</p>"},{"location":"man/write_stylesheet/#usage","title":"Usage","text":"<pre><code>write_stylesheet(wb, ...)\n</code></pre>"},{"location":"man/write_stylesheet/#arguments","title":"Arguments","text":"<code>wb</code>  wb  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/write_stylesheet/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/write_stylesheet/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nwb &lt;- Workbook()\nwrite_stylesheet(wb = wb)\n</code></pre>"},{"location":"man/x_axis/","title":"x_axis","text":"<p>Source code</p>"},{"location":"man/x_axis/#description","title":"Description","text":"<p>Values must be of type \\&lt;class \u2018openpyxl.chart.axis.TextAxis\u2019&gt;</p>"},{"location":"man/x_axis/#usage","title":"Usage","text":"<pre><code>x_axis(py_obj, ...)\n</code></pre>"},{"location":"man/x_axis/#arguments","title":"Arguments","text":"<code>py_obj</code>  py_obj  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/x_axis/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/x_axis/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBarChart(type = \"col\") |&gt;\n  x_axis(title = \"X axis title\")\n</code></pre>"},{"location":"man/y_axis/","title":"y_axis","text":"<p>Source code</p>"},{"location":"man/y_axis/#description","title":"Description","text":"<p>Values must be of type \\&lt;class \u2018openpyxl.chart.axis.NumericAxis\u2019&gt;</p>"},{"location":"man/y_axis/#usage","title":"Usage","text":"<pre><code>y_axis(py_obj, ...)\n</code></pre>"},{"location":"man/y_axis/#arguments","title":"Arguments","text":"<code>py_obj</code>  py_obj  <code>\u2026</code>  Additional arguments, i.e.\u00a0kwargs."},{"location":"man/y_axis/#value","title":"Value","text":"<p>An openpyxl Python object.</p>"},{"location":"man/y_axis/#examples","title":"Examples","text":"<pre><code>library(\"xlcharts\")\n\nBarChart(type = \"col\") |&gt;\n  y_axis(title = \"Y axis title\")\n</code></pre>"},{"location":"vignettes/anchor/","title":"Positioning Charts with Anchors","text":"<p>You can position charts using one of three different kinds of anchor:</p> <ul> <li>OneCell \u2013 where the top-left of a chart is anchored to a single cell. This is the default for openpyxl and corresponds to the layout option \u201cMove but don\u2019t size with cells\u201d.</li> <li>TwoCell \u2013 where the top-left of a chart is anchored to one cell, and the bottom-right to another cell. This corresponds to the layout option \u201cMove and size with cells\u201d.</li> <li>Absolute \u2013 where the chart is placed relative to the worksheet\u2019s top-left corner and not any particular cell.</li> </ul> <p>You can change anchors quite easily on a chart like this. Let\u2019s assume we have created a bar chart using the sample code:</p> <pre><code>library(xlcharts)\n\nbar &lt;- data.frame(\n  \"Number\" = c(2,3,4,5,6,7),\n  \"Batch 1\" = c(10,40,50,20,10,50),\n  \"Batch 2\" = c(30,60,70,10,40,30), \n  check.names = FALSE\n)\n\nwrite_xlsx(bar, path = \"bar.xlsx\")\n\nwb &lt;- load_workbook(filename = \"bar.xlsx\")\nws &lt;- active(wb)\n\nchart1 &lt;- BarChart(\n  type = \"col\",\n  style = 10,\n  title = \"Bar Chart\",\n  shape = 4\n) |&gt;\n  y_axis(title = \"Test number\") |&gt;\n  x_axis(title = \"Sample length (mm)\")\n\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=7, max_col=3)\ncats &lt;- Reference(ws, min_col=1, min_row=2, max_row=7)\n\nchart1 |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\n\n</code></pre> <p>Let\u2019s take the first chart. Instead of anchoring it to A10, we want it to keep it with our table of data, say A9 to C20. We can do this by creating a TwoCellAnchor for those two cells.:</p> <pre><code>anchor &lt;- TwoCellAnchor(\n  from = AnchorMarker(col = 0, row = 8),\n  to = AnchorMarker(col = 6, row = 19)\n)\n\nws |&gt; add_chart(chart1, anchor = anchor)\n\nsave_workbook(wb, \"bar.xlsx\")\n</code></pre> <p></p> <p>You can also use this to change the anchors of existing charts.</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/chart_layout/","title":"Changing the layout of plot area and legend","text":"<p>The layout of the chart within the canvas can be set by using the layout property of an instance of a layout class.</p>"},{"location":"vignettes/chart_layout/#chart-layout","title":"Chart layout","text":""},{"location":"vignettes/chart_layout/#size-and-position","title":"Size and position","text":"<p>The chart can be positioned within its container. 'x' and 'y' adjust position, w and h adjust the size . The units are proportions of the container. A chart cannot be positioned outside of its container and the width and height are the dominant constraints: if x + w &gt; 1, then x = 1 - w.</p> <p>x is the horizontal position from the left y is the vertical position from the top h is the height of the chart relative to its container w is the width of the box Mode</p> <p>In addition to the size and position, the mode for the relevant attribute can also be set to either factor or edge. Factor is the default.</p>"},{"location":"vignettes/chart_layout/#target","title":"Target","text":"<p>The layoutTarget can be set to outer or inner. The default is outer.</p>"},{"location":"vignettes/chart_layout/#legend-layout","title":"Legend layout","text":"<p>The position of the legend can be controlled either by setting its position: r, l, t, b, and tr, for right, left, top, bottom and top right respectively. The default is r.</p> <pre><code>library(xlcharts)\n\nchart_layout &lt;- data.frame(\n  \"Size\" = c(2, 3, 4, 5, 6, 7),\n  \"Batch 1\" = c(40, 40, 50, 30, 25, 20),\n  \"Batch 2\" = c(30, 25, 30, 25, 35, 40), \n  check.names = FALSE\n)\n\nwrite_xlsx(chart_layout, \"chart_layout.xlsx\")\n\nwb &lt;- load_workbook(filename = \"chart_layout.xlsx\") \nws &lt;- wb |&gt; active()\n\nch1 &lt;- ScatterChart(\n  title = \"Default layout\",\n  style = 13,\n  legend = Legend(position = \"r\") # right position\n) |&gt;\n  x_axis(title = \"Size\") |&gt; \n  y_axis(title = 'Percentage')\n\nxvalues = Reference(ws, min_col=1, min_row=2, max_row=7)\nfor (i in c(1:3)) {\n    values &lt;- Reference(ws, min_col=i, min_row=1, max_row=7)\n    series &lt;- Series(values, xvalues, title_from_data = TRUE)\n    ch1$append(series)\n}\n\nws |&gt; add_chart(ch1, \"B10\")\n\n# Half-size chart, bottom right\nch2 &lt;- ScatterChart(\n  title = \"Manual chart layout\",\n  style = 13,\n  legend = Legend(position = \"tr\"), # top right position\n  layout = Layout(\n    manualLayout = ManualLayout(\n        x=0.25, y=0.25,\n        h=0.5, w=0.5,\n    )\n  )\n) |&gt;\n  x_axis(title = \"Size\") |&gt; \n  y_axis(title = 'Percentage')\n\nfor (i in c(1:3)) {\n    values &lt;- Reference(ws, min_col=i, min_row=1, max_row=7)\n    series &lt;- Series(values, xvalues, title_from_data = TRUE)\n    ch2$append(series)\n}\n\nws |&gt; add_chart(ch2, \"H10\")\n\n# Half-size chart, centred\nch3 &lt;- ScatterChart(\n  title = \"Manual chart layout, edge mode\",\n  style = 13,\n  legend = Legend(position = \"r\"),\n  layout = Layout(\n      ManualLayout(\n        x=0.25, y=0.25,\n        h=0.5, w=0.5,\n        xMode=\"edge\",\n        yMode=\"edge\"\n      )\n    )\n) |&gt;\n  x_axis(title = \"Size\") |&gt; \n  y_axis(title = 'Percentage')\n\nxvalues = Reference(ws, min_col=1, min_row=2, max_row=7)\nfor (i in c(1:3)) {\n    values &lt;- Reference(ws, min_col=i, min_row=1, max_row=7)\n    series &lt;- Series(values, xvalues, title_from_data = TRUE)\n    ch3$append(series)\n}\n\nws |&gt; add_chart(ch3, \"B27\")\n\n# Manually position the legend bottom left\nch4 &lt;- ScatterChart(\n  title = \"Manual legend layout\",\n  style = 13,\n  legend = Legend(\n    layout = Layout(\n      manualLayout = ManualLayout(\n          yMode='edge',\n          xMode='edge',\n          x=0, y=0.9,\n          h=0.1, w=0.5\n      ))\n    )\n) |&gt;\n  x_axis(title = \"Size\") |&gt; \n  y_axis(title = 'Percentage')\n\nxvalues = Reference(ws, min_col=1, min_row=2, max_row=7)\nfor (i in c(1:3)) {\n    values &lt;- Reference(ws, min_col=i, min_row=1, max_row=7)\n    series &lt;- Series(values, xvalues, title_from_data = TRUE)\n    ch4$append(series)\n}\n\nws |&gt; add_chart(ch4, \"H27\")\n\nsave_workbook(wb, \"chart_layout.xlsx\")\n</code></pre> <p>This produces four charts illustrating various possibilities:</p> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/chartsheet/","title":"Chartsheets","text":"<p>Chartsheets are special worksheets which only contain charts. All the data for the chart must be on a different worksheet.</p> <pre><code>library(xlcharts)\n\nchartsheet &lt;- data.frame(\n  \"Person\" = c(\"Bob\", \"Harry\", \"James\"),\n  \"Number\" = c(3, 2, 4)\n)\n\nwrite_xlsx(chartsheet, \"chartsheet.xlsx\")\n\nwb &lt;- load_workbook(filename = \"chartsheet.xlsx\") \ncs &lt;- wb$create_chartsheet()\n\nchart = PieChart(\n  title = \"PieChart\"\n)\n\nlabels &lt;- Reference(ws, min_col=1, min_row=2, max_row=4)\ndata &lt;- Reference(ws, min_col=2, min_row=2, max_row=4)\n\nchart$series &lt;- list(Series(data))\n\ncs |&gt; add_chart(chart)\n\nwb |&gt; save_workbook(\"chartsheet.xlsx\")\n</code></pre> <p></p> <p>By default in Microsoft Excel, charts are chartsheets are designed to fit the page format of the active printer. By default in openpyxl, charts are designed to fit window in which they\u2019re displayed. You can flip between these using the zoomToFit attribute of the active view.</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/comments/","title":"Comments","text":"<p>Warning</p> <p>Openpyxl currently supports the reading and writing of comment text only. Formatting information is lost. Comment dimensions are lost upon reading, but can be written. Comments are not currently supported if read_only=True is used.</p>"},{"location":"vignettes/comments/#adding-a-comment-to-a-cell","title":"Adding a comment to a cell","text":"<p>Comments have a text attribute and an author attribute, which must both be set</p> <pre><code>library(xlcharts)\n\nwb &lt;- Workbook()\nws &lt;- wb$active\n\ncomment &lt;- ws[[\"A1\"]]$comment\ncomment &lt;- Comment(\n  text = 'This is the comment text', \n  author = 'Comment Author')\n\ncomment$text\n</code></pre> <pre><code>[1] \"This is the comment text\"\n</code></pre> <pre><code>comment$author\n</code></pre> <pre><code>[1] \"Comment Author\"\n</code></pre> <p>If you assign the same comment to multiple cells then openpyxl will automatically create copies</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\n\ncomment &lt;- Comment(text = \"Text\", author = \"Author\")\n\nws[[\"A1\"]]$comment &lt;- comment\nws[[\"B2\"]]$comment &lt;- comment\n</code></pre>"},{"location":"vignettes/comments/#loading-and-saving-comments","title":"Loading and saving comments","text":"<p>Comments present in a workbook when loaded are stored in the comment attribute of their respective cells automatically. Formatting information such as font size, bold and italics are lost, as are the original dimensions and position of the comment\u2019s container box.</p> <p>Comments remaining in a workbook when it is saved are automatically saved to the workbook file.</p> <p>Comment dimensions can be specified for write-only. Comment dimension are in pixels.</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\n\ncomment &lt;- Comment(text = \"Text\", author = \"Author\")\ncomment$width &lt;- 300\ncomment$height &lt;- 50\n\nws[[\"A1\"]]$comment &lt;- comment\n\nwb$save('commented_book.xlsx')\n</code></pre> <p>If needed, openpyxl.utils.units contains helper functions for converting from other measurements such as mm or points to pixels:</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\n\ncomment = Comment(\"Text\", \"Author\")\ncomment$width &lt;- points_to_pixels(300)\ncomment$height &lt;- points_to_pixels(50)\n\nws[[\"A1\"]]$comment &lt;- comment\n</code></pre> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/datetime/","title":"Dates and Times","text":"<p>Dates and times can be stored in two distinct ways in XLSX files: as an ISO 8601 formatted string or as a single number. openpyxl supports both representations and translates between them and Python\u2019s datetime module representations when reading from and writing to files. In either representation, the maximum date and time precision in XLSX files is millisecond precision.</p> <p>XLSX files are not suitable for storing historic dates (before 1900), due to bugs in Excel that cannot be fixed without causing backward compatibility problems. To discourage users from trying anyway, Excel deliberately refuses to recognize and display such dates. Consequently, it is not advised to use openpyxl for such purposes either, especially when exchanging files with others.</p>"},{"location":"vignettes/datetime/#timezones","title":"Timezones","text":"<p>The date and time representations in Excel do not support timezones, therefore openpyxl can only deal with naive datetime/time objects. Any timezone information attached to Python datetimes must be stripped off by the user before datetimes can be stored in XLSX files.</p>"},{"location":"vignettes/datetime/#using-the-iso-8601-format","title":"Using the ISO 8601 format","text":"<p>To make openpyxl store dates and times in the ISO 8601 format on writing your file, set the workbook\u2019s iso_dates flag to True:</p> <pre><code>library(xlcharts)\n\nwb &lt;- Workbook()\n\nwb$iso_dates &lt;- TRUE\n</code></pre> <p>The benefit of using this format is that the meaning of the stored information is not subject to interpretation, as it is with the single number format.</p> <p>The Office Open XML standard does not specify a supported subset of the ISO 8601 duration format for representing time interval durations. openpyxl therefore always uses the single number format for timedelta values when writing them to file.</p>"},{"location":"vignettes/datetime/#the-1900-and-1904-date-systems","title":"The 1900 and 1904 date systems","text":"<p>The \u2018date system\u2019 of an XLSX file determines how dates and times in the single number representation are interpreted. XLSX files always use one of two possible date systems:</p> <ul> <li>In the 1900 date system (the default), the reference date (with number 1) is 1900-01-01.</li> <li>In the 1904 date system, the reference date (with number 0) is 1904-01-01.</li> </ul> <p>Complications arise not only from the different start numbers of the reference dates, but also from the fact that the 1900 date system has a built-in (but wrong) assumption that the year 1900 had been a leap year. Excel deliberately refuses to recognize and display dates before the reference date correctly, in order to discourage people from storing historical data.</p> <p>More information on this issue is available from Microsoft:</p> <ul> <li>https://docs.microsoft.com/en-us/office/troubleshoot/excel/1900-and-1904-date-system</li> <li>https://docs.microsoft.com/en-us/office/troubleshoot/excel/wrongly-assumes-1900-is-leap-year</li> </ul> <p>In workbooks using the 1900 date system, openpyxl behaves the same as Excel when translating between the worksheets\u2019 date/time numbers and Python datetimes in January and February 1900. The only exception is 29 February 1900, which cannot be represented as a Python datetime object since it is not a valid date.</p> <p>You can get the date system of a workbook like this:</p> <p>TODO: TRANSFORM TO R CODE.</p> <pre><code>&gt;&gt;&gt; import openpyxl\n&gt;&gt;&gt; wb = openpyxl.Workbook()\n&gt;&gt;&gt; if wb.epoch == openpyxl.utils.datetime.CALENDAR_WINDOWS_1900:\n...     print(\"This workbook is using the 1900 date system.\")\n...\n</code></pre> <p>and set it like this:</p> <pre><code>&gt;&gt;&gt; wb.epoch = openpyxl.utils.datetime.CALENDAR_MAC_1904\n</code></pre>"},{"location":"vignettes/datetime/#handling-timedelta-values","title":"Handling timedelta values","text":"<p>Excel users can use number formats resembling [h]:mm:ss or [mm]:ss to display time interval durations, which openpyxl considers to be equivalent to timedeltas in Python. openpyxl recognizes these number formats when reading XLSX files and returns datetime.timedelta values for the corresponding cells.</p> <p>When writing timedelta values from worksheet cells to file, openpyxl uses the [h]:mm:ss number format for these cells.</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/editing_worksheet/","title":"Inserting and deleting rows and columns, moving ranges of cells","text":""},{"location":"vignettes/editing_worksheet/#inserting-rows-and-columns","title":"Inserting rows and columns","text":"<p>You can insert rows or columns using the relevant worksheet methods:</p> <ul> <li>insert_rows()</li> <li>insert_cols()</li> <li>delete_rows()</li> <li>delete_cols()</li> </ul> <p>The default is one row or column. For example to insert a row at 7 (before the existing row 7):</p> <pre><code>library(xlcharts)\n\nwb &lt;- Workbook()\nws &lt;- wb$active\n\nws$insert_rows(7L)\n</code></pre>"},{"location":"vignettes/editing_worksheet/#deleting-rows-and-columns","title":"Deleting rows and columns","text":"<p>To delete the columns F:H:</p> <pre><code>ws$delete_cols(6L, 3L)\n</code></pre> <p>Note</p> <p>Openpyxl does not manage dependencies, such as formulae, tables, charts, etc., when rows or columns are inserted or deleted. This is considered to be out of scope for a library that focuses on managing the file format. As a result, client code must implement the functionality required in any particular use case.</p>"},{"location":"vignettes/editing_worksheet/#moving-ranges-of-cells","title":"Moving ranges of cells","text":"<p>You can also move ranges of cells within a worksheet:</p> <pre><code>ws$move_range(\"D4:F10\", rows=-1, cols=2)\n</code></pre> <p>This will move the cells in the range D4:F10 up one row, and right two columns. The cells will overwrite any existing cells.</p> <p>If cells contain formulae you can let openpyxl translate these for you, but as this is not always what you want it is disabled by default. Also only the formulae in the cells themselves will be translated. References to the cells from other cells or defined names will not be updated; you can use the Parsing Formulas translator to do this:</p> <pre><code>ws$move_range(\"G4:H10\", rows=1L, cols=1L, translate=TRUE)\n</code></pre> <p>This will move the relative references in formulae in the range by one row and one column.</p>"},{"location":"vignettes/editing_worksheet/#merge-unmerge-cells","title":"Merge / Unmerge cells","text":"<p>When you merge cells all cells but the top-left one are removed from the worksheet. To carry the border-information of the merged cell, the boundary cells of the merged cell are created as MergeCells which always have the value None. See Styling Merged Cells for information on formatting merged cells.</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\n\nws$merge_cells('A2:D2')\nws$unmerge_cells('A2:D2')\n\n# or equivalently\nws$merge_cells(start_row=2, start_column=1, end_row=4, end_column=4)\nws$unmerge_cells(start_row=2, start_column=1, end_row=4, end_column=4)\n</code></pre> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/formatting/","title":"Conditional Formatting","text":"<p>Excel supports three different types of conditional formatting: builtins, standard and custom. Builtins combine specific rules with predefined styles. Standard conditional formats combine specific rules with custom formatting. In additional it is possible to define custom formulae for applying custom formats using differential styles.</p> <p>Note</p> <p> The syntax for the different rules varies so much that it is not possible for openpyxl to know whether a rule makes sense or not. </p> <p>The basic syntax for creating a formatting rule is:</p> <pre><code>library(xlcharts)\n\ndxf &lt;- DifferentialStyle(font=Font(bold=TRUE), fill=PatternFill(start_color='EE1111', end_color='EE1111'))\nrule &lt;- Rule(type = 'cellIs', dxf = dxf, formula = list(\"10\"))\n</code></pre> <p>Because the signatures for some rules can be quite verbose there are also some convenience factories for creating them. Builtin formats</p> <p>The builtins conditional formats are:</p> <ul> <li>ColorScale</li> <li>IconSet</li> <li>DataBar</li> </ul> <p>Builtin formats contain a sequence of formatting settings which combine a type with an integer for comparison. Possible types are: \u2018num\u2019, \u2018percent\u2019, \u2018max\u2019, \u2018min\u2019, \u2018formula\u2019, \u2018percentile\u2019. ColorScale</p> <p>You can have color scales with 2 or 3 colors. 2 color scales produce a gradient from one color to another; 3 color scales use an additional color for 2 gradients.</p> <p>The full syntax for creating a ColorScale rule is:</p> <pre><code>first = FormatObject(type='min')\nlast = FormatObject(type='max')\n# colors match the format objects:\ncolors = list(Color('AA0000'), Color('00AA00'))\ncs2 = ColorScale(cfvo= list(first, last), color=colors)\n# a three color scale would extend the sequences\nmid = FormatObject(type='num', val=40)\n#colors.insert(1, Color('00AA00'))\ncolors &lt;- base::append(colors, Color('00AA00')) # using append() from R\ncs3 = ColorScale(cfvo=list(first, mid, last), color=colors)\n# create a rule with the color scale\nrule = Rule(type='colorScale', colorScale=cs3)\n</code></pre> <p>There is a convenience function for creating ColorScale rules</p> <pre><code>rule &lt;- ColorScaleRule(\n  start_type='percentile', start_value=10, start_color='FFAA0000',\n  mid_type='percentile', mid_value=50, mid_color='FF0000AA',\n  end_type='percentile', end_value=90, end_color='FF00AA00')\n</code></pre>"},{"location":"vignettes/formatting/#iconset","title":"IconSet","text":"<p>Choose from the following set of icons: \u20183Arrows\u2019, \u20183ArrowsGray\u2019, \u20183Flags\u2019, \u20183TrafficLights1\u2019, \u20183TrafficLights2\u2019, \u20183Signs\u2019, \u20183Symbols\u2019, \u20183Symbols2\u2019, \u20184Arrows\u2019, \u20184ArrowsGray\u2019, \u20184RedToBlack\u2019, \u20184Rating\u2019, \u20184TrafficLights\u2019, \u20185Arrows\u2019, \u20185ArrowsGray\u2019, \u20185Rating\u2019, \u20185Quarters\u2019</p> <p>The full syntax for creating an IconSet rule is:</p> <pre><code>first = FormatObject(type='percent', val=0)\nsecond = FormatObject(type='percent', val=33)\nthird = FormatObject(type='percent', val=67)\niconset = IconSet(iconSet='3TrafficLights1', cfvo=list(first, second, third), showValue=NULL, percent=NULL, reverse=NULL)\n# assign the icon set to a rule\nrule = Rule(type='iconSet', iconSet=iconset)\n</code></pre> <p>There is a convenience function for creating IconSet rules:</p> <pre><code>rule = IconSetRule('5Arrows', 'percent', list(10, 20, 30, 40, 50), showValue=NULL, percent=NULL, reverse=NULL)\n</code></pre>"},{"location":"vignettes/formatting/#databar","title":"DataBar","text":"<p>Currently, openpyxl supports the DataBars as defined in the original specification. Borders and directions were added in a later extension.</p> <p>The full syntax for creating a DataBar rule is:</p> <pre><code>first &lt;- FormatObject(type='min')\nsecond &lt;- FormatObject(type='max')\ndata_bar &lt;- DataBar(cfvo=list(first, second), color=\"638EC6\", showValue=NULL, minLength=NULL, maxLength=NULL)\n# assign the data bar to a rule\nrule &lt;- Rule(type='dataBar', dataBar=data_bar)\n</code></pre> <p>There is a convenience function for creating DataBar rules:</p> <pre><code>rule &lt;- DataBarRule(\n  start_type='percentile', start_value=10, end_type='percentile', end_value='90',\n  color=\"FF638EC6\", showValue= NULL, minLength=NULL, maxLength=NULL)\n</code></pre>"},{"location":"vignettes/formatting/#standard-conditional-formats","title":"Standard conditional formats","text":"<p>The standard conditional formats are:</p> <ul> <li>Average</li> <li>Percent</li> <li>Unique or duplicate</li> <li>Value</li> <li>Rank</li> </ul> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\n\n# Create fill\nredFill &lt;- PatternFill(start_color='EE1111', end_color='EE1111', fill_type='solid')\n\n# Add a two-color scale\n# Takes colors in excel 'RRGGBB' style.\nws$conditional_formatting$add('A1:A10', \n  ColorScaleRule(\n    start_type='min', start_color='AA0000', \n    end_type='max', end_color='00AA00'\n  )\n)\n# Add a three-color scale\nws$conditional_formatting$add('B1:B10', \n  ColorScaleRule(\n    start_type='percentile', start_value=10, start_color='AA0000',\n    mid_type='percentile', mid_value=50, mid_color='0000AA',\n    end_type='percentile', end_value=90, end_color='00AA00'\n  )\n)\n# Add a conditional formatting based on a cell comparison\n# addCellIs(range_string, operator, formula, stopIfTrue, wb, font, border, fill)\n# Format if cell is less than 'formula'\nws$conditional_formatting$add('C2:C10',\n  CellIsRule(\n    operator = 'lessThan', formula = list('C$1'), \n    stopIfTrue = TRUE, fill = redFill\n  )\n)\n# Format if cell is between 'formula'\nws$conditional_formatting$add('D2:D10',\n  CellIsRule(\n    operator='between', formula= list('1','5'), \n    stopIfTrue=TRUE, fill=redFill\n  )\n)\n# Format using a formula\nws$conditional_formatting$add('E1:E10',\n  FormulaRule(\n    formula = list('ISBLANK(E1)'), stopIfTrue=TRUE, fill=redFill\n  )\n)\n\n# Aside from the 2-color and 3-color scales, format rules take fonts, borders and fills for styling:\nmyFont = Font()\nmyBorder = Border()\nws$conditional_formatting$add('E1:E10',\n  FormulaRule(\n    formula=list('E1=0'), font=myFont, border=myBorder, fill=redFill\n  )\n)\n\n# Highlight cells that contain particular text by using a special formula\nred_text = Font(color=\"9C0006\")\nred_fill = PatternFill(bgColor=\"FFC7CE\")\ndxf = DifferentialStyle(font=red_text, fill=red_fill)\nrule = Rule(type=\"containsText\", operator=\"containsText\", text=\"highlight\", dxf=dxf)\nrule$formula = list('NOT(ISERROR(SEARCH(\"highlight\",A1)))')\nws$conditional_formatting$add('A1:F40', rule)\n\nwb$save(\"test.xlsx\")\n</code></pre>"},{"location":"vignettes/formatting/#formatting-entire-rows","title":"Formatting Entire Rows","text":"<p>Sometimes you want to apply a conditional format to more than one cell, say a row of cells which contain a particular value.</p> <pre><code>formatting &lt;- data.frame(\n  \"Software\" = c(\"Excel\", \"openpxyl\", \"OpenOffice\", \"Word\"),\n  \"Developer\" = c(\"Microsoft\", \"Open source\", \"Apache\", \"Microsoft\"),\n  \"Version\" = c(\"2016\", \"2.6\", \"4.1.4\", \"2010\")\n)\n\nwrite_xlsx(formatting, \"formatting.xlsx\")\n\nwb &lt;- load_workbook(\"formatting.xlsx\")\nws &lt;- wb$active\n</code></pre> <p>We want to highlight the rows where the developer is Microsoft. We do this by creating an expression rule and using a formula to identify which rows contain software developed by Microsoft.</p> <pre><code>red_fill &lt;- PatternFill(bgColor = \"FFC7CE\")\ndxf &lt;- DifferentialStyle(fill = red_fill)\nr &lt;- Rule(type = \"expression\", dxf = dxf, stopIfTrue = TRUE)\nr$formula &lt;- list('$B1=\"Microsoft\"')\nws$conditional_formatting$add(\"A1:C10\", r)\n\nwb |&gt; save_workbook(\"formatting.xlsx\")\n</code></pre> <p>Note</p> <p>The formula uses an absolute reference to the column referred to, B in this case; but a relative row number, in this case 1 to the range over which the format is applied. It can be tricky to get this right but the rule can be adjusted even after it has been added to the worksheet\u2019s conditional format collection.</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/graphical_properties/","title":"Advanced Options with Graphical Properties","text":"<p>Many advanced options require using the Graphical Properties of OOXML. This is a much more abstract API than the chart API itself and may require considerable studying of the OOXML specification to get right. It is often unavoidable to look at the XML source of some charts you\u2019ve made. However, as openpyxl tries very hard to implement the OOXML specification correctly, you should be able to do most things quite easily. To things easier to read, openpyxl includes some aliases for some of the more obscure element or attribute names, eg. GraphicalProperties for `spPr or line for line.</p>"},{"location":"vignettes/graphical_properties/#make-the-chart-background-transparent","title":"Make the chart background transparent","text":"<pre><code>library(xlcharts)\n\nchart &lt;- BarChart(\n  graphical_properties = GraphicalProperties(noFill = TRUE)\n)\n</code></pre>"},{"location":"vignettes/graphical_properties/#remove-the-border-from-a-chart","title":"Remove the border from a chart","text":"<pre><code>chart &lt;- BarChart(\n  graphical_properties = GraphicalProperties(\n    line = LineProperties(noFill = TRUE, prstDash = NULL)\n  )\n)\n</code></pre> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/limits_and_scaling/","title":"Axis Limits and Scale","text":""},{"location":"vignettes/limits_and_scaling/#minima-and-maxima","title":"Minima and Maxima","text":"<p>Axis minimum and maximum values can be set manually to display specific regions on a chart.</p> <pre><code>library(xlcharts)\n\nwb &lt;- Workbook()\nws &lt;- wb |&gt; active()\n\n# add headers\nws$append(c('X', '1/X'))\n\nfor(x in c(-10:11)) {\n  if(x) {\n    ws$append(c(x, 1.0 / x))\n  }\n}\n\nchart1 &lt;- ScatterChart(\n  title = \"Full Axes\",\n  legend = NULL\n) |&gt;\n  x_axis(title = 'x') |&gt;\n  y_axis(title = '1/x')\n\nchart2 &lt;- ScatterChart(\n  title = \"Clipped Axes\",\n  legend = NULL\n) |&gt; \n  x_axis(\n    title = 'x',\n    scaling = Scaling(\n      min = 0,\n      max = 11\n      )\n    ) |&gt; \n  y_axis(\n    title = '1/x',\n    scaling = Scaling(\n      min = 0,\n      max = 1.5\n      )\n    )\n\nx &lt;- Reference(ws, min_col=1, min_row=2, max_row=22)\ny &lt;- Reference(ws, min_col=2, min_row=2, max_row=22)\ns &lt;- Series(y, xvalues=x)\n\nchart1$append(s)\nchart2$append(s)\n\nws |&gt; add_chart(chart1, \"C1\")\nws |&gt; add_chart(chart2, \"C15\")\n\nwb |&gt; save_workbook(\"minmax.xlsx\")\n\n</code></pre> <p></p> <p>!! Note   In some cases such as the one shown, setting the axis limits is effectively equivalent to displaying a sub-range of the data. For large datasets, rendering of scatter plots (and possibly others) will be much faster when using subsets of the data rather than axis limits in both Excel and Open/Libre Office.</p>"},{"location":"vignettes/limits_and_scaling/#logarithmic-scaling","title":"Logarithmic Scaling","text":"<p>Both the x- and y-axes can be scaled logarithmically. The base of the logarithm can be set to any valid float. If the x-axis is scaled logarithmically, negative values in the domain will be discarded.</p> <pre><code>library(xlcharts)\n\nlog &lt;- data.frame(\n  \"X\" = c(-10:11),\n  \"Gaussian\" = writexl::xl_formula(paste0(\"=EXP(-(($A$\", c(seq_along(-10:11) + 1),\"/6)^2))\"))\n)\n\nwrite_xlsx(log, \"log.xlsx\")\n\nwb &lt;- load_workbook(filename = \"log.xlsx\") \nws &lt;- wb |&gt; active()\n\nchart1 &lt;- ScatterChart(\n  title = \"No Scaling\",\n  legend = NULL\n) |&gt; \n  x_axis(title = 'x') |&gt;\n  y_axis(title = 'y')\n\nchart2 &lt;- ScatterChart(\n  title = \"X Log Scale\",\n  legend = NULL\n) |&gt;\n  x_axis(\n    title = 'x (log10)',\n    scaling = Scaling(logBase = 10)\n  ) |&gt;\n  y_axis(title = 'y')\n\nchart3 &lt;- ScatterChart(\n  title = \"Y Log Scale\",\n  legend = NULL\n) |&gt;\n  x_axis(title = 'x') |&gt;\n  y_axis(\n    title = 'y (log10)',\n    scaling = Scaling(logBase = 10)\n  )\n\nchart4 &lt;- ScatterChart(\n  title = \"Both Log Scale\",\n  legend = NULL\n) |&gt;\n  x_axis(\n    title = 'x (log10)',\n    scaling = Scaling(logBase = 10)\n  ) |&gt;\n  y_axis(\n    title = 'y (log10)',\n    scaling = Scaling(logBase = 10)\n  )\n\n\nx &lt;- Reference(ws, min_col=1, min_row=2, max_row=22)\ny &lt;- Reference(ws, min_col=2, min_row=2, max_row=22)\ns &lt;- Series(y, xvalues=x)\nchart1$append(s)\nchart2$append(s)\nchart3$append(s)\nchart4$append(s)\n\nws |&gt; add_chart(chart1, \"C1\")\nws |&gt; add_chart(chart2, \"I1\")\nws |&gt; add_chart(chart3, \"C15\")\nws |&gt; add_chart(chart4, \"I15\")\n\nwb |&gt; save_workbook(\"log.xlsx\")\n</code></pre> <p>This produces four charts that look something like this:</p> <p></p> <p>The four charts show the same data unscaled, scaled logarithmically in each axis and in both axes, with the logarithm base set to 10.</p>"},{"location":"vignettes/limits_and_scaling/#axis-orientation","title":"Axis Orientation","text":"<p>Axes can be displayed \u201cnormally\u201d or in reverse. Axis orientation is controlled by the scaling orientation property, which can have a value of either 'minMax' for normal orientation or 'maxMin' for reversed.</p> <pre><code>library(xlcharts)\n\norientation &lt;- data.frame(\n  \"T\" = c(1:100/16.0),\n  \"X\" = writexl::xl_formula(paste0(\"=$A$\", c(seq_along(c(1:100/16.0)) + 1), \"*COS($A$\", c(seq_along(c(1:100/16.0)) + 1), \")\")),\n  \"Y\" = writexl::xl_formula(paste0(\"=$A$\", c(seq_along(c(1:100/16.0)) + 1), \"*SIN($A$\", c(seq_along(c(1:100/16.0)) + 1), \")\"))\n)\n\nwrite_xlsx(orientation, \"orientation.xlsx\")\n\nwb &lt;- load_workbook(filename = \"orientation.xlsx\") \nws &lt;- wb |&gt; active()\n\nchart1 &lt;- ScatterChart(\n  title = \"Default Orientation\",\n  legend = NULL\n) |&gt; \n  x_axis(title = 'x') |&gt;\n  y_axis(title = 'y')\n\nchart2 &lt;- ScatterChart(\n  title = \"Flip X\",\n  legend = NULL\n) |&gt; \n    x_axis(\n    title = 'x',\n    scaling = Scaling(orientation = \"maxMin\")\n  ) |&gt;\n  y_axis(\n    title = 'y',\n    scaling = Scaling(orientation = \"minMax\")\n  )\n\nchart3 &lt;- ScatterChart(\n  title = \"Flip Y\",\n  legend = NULL\n) |&gt; \n    x_axis(\n    title = 'x',\n    scaling = Scaling(orientation = \"minMax\")\n  ) |&gt;\n  y_axis(\n    title = 'y',\n    scaling = Scaling(orientation = \"maxMin\")\n  )\n\nchart4 &lt;- ScatterChart(\n  title = \"Flip Both\",\n  legend = NULL\n) |&gt; \n    x_axis(\n    title = 'x',\n    scaling = Scaling(orientation = \"maxMin\")\n  ) |&gt;\n  y_axis(\n    title = 'y',\n    scaling = Scaling(orientation = \"maxMin\")\n  )\n\nx &lt;- Reference(ws, min_col=2, min_row=2, max_row=102)\ny &lt;- Reference(ws, min_col=3, min_row=2, max_row=102)\ns &lt;- Series(y, xvalues=x)\nchart1$append(s)\nchart2$append(s)\nchart3$append(s)\nchart4$append(s)\n\nws |&gt; add_chart(chart1, \"D1\")\nws |&gt; add_chart(chart2, \"J1\")\nws |&gt; add_chart(chart3, \"D15\")\nws |&gt; add_chart(chart4, \"J15\")\n\nwb |&gt; save_workbook(\"orientation.xlsx\")\n</code></pre> <p>This produces four charts with the axes in each possible combination of orientations that look something like this:</p> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/pattern/","title":"Adding Patterns","text":"<p>Whole data series and individual data points can be extensively styled through the graphicalProperties. Getting things just right may take some time.</p> <pre><code>library(xlcharts)\n\npattern &lt;- data.frame(\n  \"Sample\" = c(1,2,3,2,3,3,1,2)\n)\n\nwrite_xlsx(pattern, \"pattern.xlsx\")\n\nwb &lt;- load_workbook(filename = \"pattern.xlsx\") \nws &lt;- wb |&gt; active()\n\nc &lt;- BarChart(\n  title = \"Chart with patterns\"\n)\ndata &lt;- Reference(ws, min_col=1, min_row=1, max_row=8)\n\nc |&gt; add_data(data, titles_from_data=TRUE)\n\n# set a pattern for the whole series\nseries = c$series[[1]]\n\nfill &lt;- PatternFillProperties(\n  prst = \"pct5\",\n  foreground = ColorChoice(prstClr=\"red\"),\n  background = ColorChoice(prstClr=\"blue\")\n  )\n\nseries$graphicalProperties &lt;- GraphicalProperties(\n  pattFill = fill\n)\n\n# set a pattern for a 6th data point \n# (Python is 0-indexed)\npt &lt;- DataPoint(idx = 5)\n\npt$graphicalProperties$pattFill &lt;- PatternFillProperties(prst=\"ltHorz\")\n\nseries$data_points &lt;- list(pt)\n\nws |&gt; add_chart(c, \"C1\")\n\nwb |&gt; save_workbook(\"pattern.xlsx\")\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/pivot/","title":"Pivot Tables","text":"<p>openpyxl provides read-support for pivot tables so that they will be preserved in existing files. The specification for pivot tables, while extensive, is not very clear and it is not intended that client code should be able to create pivot tables. However, it should be possible to edit and manipulate existing pivot tables, eg. change their ranges or whether they should update automatically settings.</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/print_settings/","title":"Print Settings","text":"<p>openpyxl provides reasonably full support for print settings.</p>"},{"location":"vignettes/print_settings/#edit-print-options","title":"Edit Print Options","text":"<pre><code>library(xlcharts)\n\nwb &lt;- Workbook()\nws &lt;- wb$active\n\nws$print_options$horizontalCentered &lt;- TRUE\nws$print_options$verticalCentered &lt;- TRUE\n</code></pre>"},{"location":"vignettes/print_settings/#headers-and-footers","title":"Headers and Footers","text":"<p>Headers and footers use their own formatting language. This is fully supported when writing them but, due to the complexity and the possibility of nesting, only partially when reading them. There is support for the font, size and color for a left, centre/center, or right element. Granular control (highlighting individuals words) will require applying control codes manually.</p> <pre><code>ws$oddHeader$left$text = \"Page Number\"\nws$oddHeader$left$size = 14\nws$oddHeader$left$font = \"Tahoma,Bold\"\nws$oddHeader$left$color = \"CC3366\"\n</code></pre> <p>Also supported are evenHeader and evenFooter as well as firstHeader and firstFooter.</p>"},{"location":"vignettes/print_settings/#add-print-titles","title":"Add Print Titles","text":"<p>You can print titles on every page to ensure that the data is properly labelled.</p> <pre><code>ws$print_title_cols &lt;- 'A:B' # the first two cols\nws$print_title_rows &lt;- '1:1' # the first row\n</code></pre>"},{"location":"vignettes/print_settings/#add-a-print-area","title":"Add a Print Area","text":"<p>You can select a part of a worksheet as the only part that you want to print</p> <pre><code>ws$print_area &lt;- 'A1:F10'\n</code></pre>"},{"location":"vignettes/print_settings/#change-page-layout-and-size","title":"Change page layout and size","text":"<p>You can adjust the size and print orientation per sheet of a workbook.</p> <pre><code>ws$page_setup$orientation = ws$ORIENTATION_LANDSCAPE\nws$page_setup$paperSize = ws$PAPERSIZE_A5\n</code></pre> <p>The table size is stored internally as an integer, a number of alias variables are also available for common sizes (refer to PAPERSIZE_* in openpyxl.worksheet.worksheet ). If you need a non-standard size, a full list can be found by searching ECMA-376 pageSetup and setting that value as the paperSize.</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/protection/","title":"Protection","text":"<p>Warning</p> <p>Password protecting a workbook or worksheet only provides a quite basic level of security. The data is not encrypted, so can be modified by any number of freely available tools. In fact the specification states: \u201cWorksheet or workbook element protection should not be confused with file security. It is meant to make your workbook safe from unintentional modification, and cannot protect it from malicious modification.\u201d</p> <p>Openpyxl provides support for protecting a workbook and worksheet from modification. The Open XML \u201cLegacy Password Hash Algorithm\u201d is used to generate hashed password values unless another algorithm is explicitly configured.</p>"},{"location":"vignettes/protection/#workbook-protection","title":"Workbook Protection","text":"<p>To prevent other users from viewing hidden worksheets, adding, moving, deleting, or hiding worksheets, and renaming worksheets, you can protect the structure of your workbook with a password. The password can be set using the openpyxl.workbook.protection.WorkbookProtection.workbookPassword() property.</p> <pre><code>library(xlcharts)\n\nwb &lt;- Workbook()\n\nwb$security$workbookPassword &lt;- \"123\"\nwb$security$lockStructure &lt;- TRUE\n</code></pre> <p>Similarly removing change tracking and change history from a shared workbook can be prevented by setting another password. This password can be set using the openpyxl.workbook.protection.WorkbookProtection.revisionsPassword() property</p> <pre><code>wb$security$revisionsPassword &lt;- \"1234\"\n</code></pre> <p>Other properties on the openpyxl.workbook.protection.WorkbookProtection object control exactly what restrictions are in place, but these will only be enforced if the appropriate password is set.</p> <p>Specific setter functions are provided if you need to set the raw password value without using the default hashing algorithm - e.g.</p> <pre><code>hashed_password = \"abc\"\nwb$security$set_workbook_password(hashed_password, already_hashed=TRUE)\n</code></pre>"},{"location":"vignettes/protection/#worksheet-protection","title":"Worksheet Protection","text":"<p>Various aspects of a worksheet can also be locked by setting attributes on the openpyxl.worksheet.protection.SheetProtection object. Unlike workbook protection, sheet protection may be enabled with or without using a password. Sheet protection is enabled using the openpxyl.worksheet.protection.SheetProtection.sheet attribute or calling enable() or disable():</p> <pre><code>ws &lt;- wb$active\nws$protection$sheet &lt;- TRUE\nws$protection$enable()\n#ws$protection$disable()\n</code></pre> <p>If no password is specified, users can disable configured sheet protection without specifying a password. Otherwise they must supply a password to change configured protections. The password is set using the openpxyl.worksheet.protection.SheetProtection.password() property</p> <pre><code>ws &lt;- wb$active\nws$protection$password = \"123\"\n\nwb$save(\"protection.xlsx\")\n</code></pre> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/secondary/","title":"Adding a second axis","text":"<p>Adding a second axis actually involves creating a second chart that shares a common x-axis with the first chart but has a separate y-axis.</p> <pre><code>library(xlcharts)\n\nsecondary &lt;- data.frame(\n  \"1\" = c(\"Aliens\", \"Humans\"),\n  \"2\" = c(2, 10),\n  \"3\" = c(3, 40),\n  \"4\" = c(4, 50),\n  \"5\" = c(5, 20),\n  \"6\" = c(6, 10),\n  \"7\" = c(7, 50)\n)\n\nwrite_xlsx(secondary, \"secondary.xlsx\")\n\nwb &lt;- load_workbook(filename = \"secondary.xlsx\") \nws &lt;- wb |&gt; active()\n\nc1 &lt;- BarChart(\n  title = 'Survey results'\n) |&gt;\n  x_axis(title = \"Days\") |&gt;\n  y_axis(title = \"Aliens\",\n         majorGridlines = NULL)\n\nv1 &lt;- Reference(ws, min_col=1, min_row=2, max_col=7)\nc1 |&gt; add_data(v1, titles_from_data=TRUE, from_rows=TRUE)\n\n\n# Create a second chart\nc2 &lt;- LineChart() |&gt;\n  y_axis(title = \"Humans\", axId = 200)\nv2 &lt;- Reference(ws, min_col=1, min_row=3, max_col=7)\nc2 |&gt; add_data(v2, titles_from_data=TRUE, from_rows=TRUE)\n\n# Display y-axis of the second chart on the right by setting it to cross the x-axis at its maximum\nc1 |&gt; \n  y_axis(crosses = \"max\")\n\n# combine using iadd from the operator Python module\niadd(c1, c2)\n\nws |&gt; add_chart(c1, \"D5\")\n\nwb |&gt; save_workbook(\"secondary.xlsx\")\n</code></pre> <p>This produces a combined line and bar chart looking something like this:</p> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/simple_formulae/","title":"Simple Formulae","text":""},{"location":"vignettes/simple_formulae/#using-formulae","title":"Using formulae","text":"<p>Formulae may be parsed and modified as well.</p> <pre><code>library(xlcharts)\n\nwb &lt;- Workbook()\nws &lt;- wb$active\n# add a simple formula\nws[[\"A1\"]]$value &lt;- \"=SUM(1, 1)\"\nwb$save(\"formula.xlsx\")\n</code></pre> <p>Warning</p> <p>NB you must use the English name for a function and function arguments must be separated by commas and not other punctuation such as semi-colons.</p> <p>openpyxl never evaluates formula.</p> <p>If you\u2019re trying to use a formula that isn\u2019t known this could be because you\u2019re using a formula that was not included in the initial specification. Such formulae must be prefixed with _xlfn. to work.</p>"},{"location":"vignettes/simple_formulae/#special-formulae","title":"Special formulae","text":"<p>Openpyxl also supports two special kinds of formulae: Array Formulae and Data Table Formulae. Given the frequent use of \u201cdata tables\u201d within OOXML the latter are particularly confusing.</p> <p>In general, support for these kinds of formulae is limited to preserving them in Excel files but the implementation is complete.</p>"},{"location":"vignettes/simple_formulae/#array-formulae","title":"Array Formulae","text":"<p>Although array formulae are applied to a range of cells, they will only be visible for the top-left cell of the array. This can be confusing and a source of errors. To check for array formulae in a worksheet you can use the ws$array_formulae property which returns a dictionary of cells with array formulae definitions and the ranges they apply to.</p> <p>Creating your own array formulae is fairly straightforward</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\nws[[\"E2\"]]$value &lt;- ArrayFormula(\"E2:E11\", \"=SUM(C2:C11*D2:D11)\")\nwb$save(\"formula.xlsx\")\n</code></pre> <p>Note</p> <p>The top-left most cell of the array formula must be the cell you assign it to, otherwise you will get errors on workbook load.</p> <p>Note</p> <p>In Excel the formula will appear in all the cells in the range in curly brackets {} but you should never use these in your own formulae.</p>"},{"location":"vignettes/simple_formulae/#data-table-formulae","title":"Data Table Formulae","text":"<p>As with array formulae, data table formulae are applied to a range of cells. The table object themselves contain no formulae but only the definition of table: the cells covered and whether it is one dimensional or not, etc. For further information refer to the OOXML specification.</p> <p>To find out whether a worksheet has any data tables, use the ws$table_formulae property.</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/styles/","title":"Working with styles","text":""},{"location":"vignettes/styles/#introduction","title":"Introduction","text":"<p>Styles are used to change the look of your data while displayed on screen. They are also used to determine the formatting for numbers.</p> <p>Styles can be applied to the following aspects:</p> <ul> <li>font to set font size, color, underlining, etc.</li> <li>fill to set a pattern or color gradient</li> <li>border to set borders on a cell</li> <li>cell alignment</li> <li>protection</li> </ul> <p>The following are the default values:</p> <pre><code>library(xlcharts)\n\nfont &lt;- Font(\n  name = 'Calibri',\n  size = 11,\n  bold = FALSE,\n  italic = FALSE,\n  vertAlign = NULL,\n  underline = 'none',\n  strike = FALSE,\n  color = 'FF000000')\n\nfill &lt;- PatternFill(\n  fill_type = NULL,\n  start_color = 'FFFFFFFF',\n  end_color = 'FF000000')\n\nborder &lt;- Border(\n  left = Side(\n    border_style = NULL,\n    color='FF000000'),\n  right = Side(\n    border_style = NULL,\n    color = 'FF000000'),\n  top = Side(\n    border_style = NULL,\n    color = 'FF000000'),\n  bottom = Side(\n    border_style = NULL,\n    color = 'FF000000'),\n  diagonal = Side(\n    border_style = NULL,\n    color='FF000000'),\n  diagonal_direction = 0,\n  outline = Side(\n    border_style = NULL,\n    color='FF000000'),\n  vertical = Side(\n    border_style = NULL,\n    color = 'FF000000'),\n  horizontal = Side(\n    border_style = NULL,\n    color='FF000000')\n)\n\nalignment &lt;- Alignment(\n  horizontal = 'general',\n  vertical = 'bottom',\n  text_rotation = 0,\n  wrap_text = FALSE,\n  shrink_to_fit = FALSE,\n  indent = 0)\n\nnumber_format &lt;- 'General'\n\nprotection &lt;- Protection(\n  locked = TRUE,\n  hidden = FALSE\n)\n</code></pre>"},{"location":"vignettes/styles/#cell-styles-and-named-styles","title":"Cell Styles and Named Styles","text":"<p>There are two types of styles: cell styles and named styles, also known as style templates.</p>"},{"location":"vignettes/styles/#cell-styles","title":"Cell Styles","text":"<p>Cell styles are shared between objects and once they have been assigned they cannot be changed. This stops unwanted side-effects such as changing the style for lots of cells when only one changes.</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb |&gt; active()\n\na1 &lt;- ws[[\"A1\"]]\nd4 &lt;- ws[[\"D4\"]]\nft &lt;- Font(color = \"FF0000\")\na1$font &lt;- ft\nd4$font &lt;- ft\n\n#a1$font$italic = TRUE # is not allowed # doctest: +SKIP\n# If you want to change the color of a Font, you need to reassign it::\na1$font &lt;- Font(color = \"FF0000\", italic = TRUE) # the change only affects A1\na1$font\n</code></pre>"},{"location":"vignettes/styles/#copying-styles","title":"Copying styles","text":"<p>Styles can also be copied-</p> <pre><code>ft1 &lt;- Font(name='Arial', size=14)\nft2 &lt;- ft1\nft2$name &lt;- \"Tahoma\"\nft1$name\n</code></pre> <pre><code>ft2$name\n</code></pre> <pre><code>ft1$size\n</code></pre>"},{"location":"vignettes/styles/#colours","title":"Colours","text":"<p>Colours for fonts, backgrounds, borders, etc. can be set in three ways: indexed, aRGB or theme. Indexed colours are the legacy implementation and the colours themselves depend upon the index provided with the workbook or with the application default. Theme colours are useful for complementary shades of colours but also depend upon the theme being present in the workbook. It is, therefore, advisable to use aRGB colours. aRGB colours</p> <p>RGB colours are set using hexadecimal values for red, green and blue.</p> <pre><code>font &lt;- Font(color = \"FF0000\")\n</code></pre> <p>The alpha value refers in theory to the transparency of the colour but this is not relevant for cell styles. The default of 00 will prepended to any simple RGB value:</p> <pre><code>font &lt;- Font(color = \"00FF00\")\nfont$color$rgb\n</code></pre> <p>There is also support for legacy indexed colours as well as themes and tints.</p> <pre><code>c &lt;- Color(indexed = 32)\nc &lt;- Color(theme = 6, tint = 0.5)\n</code></pre>"},{"location":"vignettes/styles/#indexed-colours","title":"Indexed Colours","text":"<p>Standard Colours, see related OpenPyXl documentation.</p> <p>The indices 64 and 65 cannot be set and are reserved for the system foreground and background colours respectively.</p>"},{"location":"vignettes/styles/#applying-styles","title":"Applying Styles","text":"<p>Styles are applied directly to cells</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\nc &lt;- ws[['A1']]\nc$font &lt;- Font(size=12)\n</code></pre> <p>Styles can also applied to columns and rows but note that this applies only to cells created (in Excel) after the file is closed. If you want to apply styles to entire rows and columns then you must apply the style to each cell yourself. This is a restriction of the file format:</p> <pre><code>col &lt;- ws$column_dimensions[['A']]\ncol$font = Font(bold = TRUE)\nrow &lt;- ws$row_dimensions[[1]]\nrow$font &lt;- Font(underline = \"single\")\n</code></pre>"},{"location":"vignettes/styles/#styling-merged-cells","title":"Styling Merged Cells","text":"<p>The merged cell behaves similarly to other cell objects. Its value and format is defined in its top-left cell. In order to change the border of the whole merged cell, change the border of its top-left cell. The formatting is generated for the purpose of writing.</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\nws$merge_cells('B2:F4')\n\ntop_left_cell &lt;- ws[['B2']]\ntop_left_cell$value &lt;- \"My Cell\"\n\nthin &lt;- Side(border_style = \"thin\", color = \"000000\")\ndouble &lt;- Side(border_style = \"double\", color = \"ff0000\")\n\ntop_left_cell$border &lt;- Border(top=double, left=thin, right=thin, bottom=double)\ntop_left_cell$fill &lt;- PatternFill(\"solid\", fgColor=\"DDDDDD\")\ntop_left_cell$fill &lt;- GradientFill(stop = list(\"000000\", \"FFFFFF\"))\ntop_left_cell$font &lt;- Font(b = TRUE, color = \"FF0000\")\ntop_left_cell$alignment &lt;- Alignment(horizontal=\"center\", vertical=\"center\")\n\nwb |&gt; save_workbook(\"styled.xlsx\")\n</code></pre>"},{"location":"vignettes/styles/#using-number-formats","title":"Using number formats","text":"<p>You can specify the number format for cells, or for some instances (i.e. datetime) it will automatically format.</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb$active\n\n# set date\nws[['A1']]$value &lt;- as.Date(\"2010-07-21\")\nws[['A1']]$number_format\n</code></pre> <pre><code>ws[[\"A2\"]]$value &lt;- 0.123456\nws[[\"A2\"]]$number_format &lt;- \"0.00\" # Display to 2dp\n</code></pre>"},{"location":"vignettes/styles/#edit-page-setup","title":"Edit Page Setup","text":"<pre><code>wb = Workbook()\nws = wb$active\n\nws$page_setup$orientation = ws$ORIENTATION_LANDSCAPE\nws$page_setup$paperSize = ws$PAPERSIZE_TABLOID\nws$page_setup$fitToHeight = 0\nws$page_setup$fitToWidth = 1\n</code></pre>"},{"location":"vignettes/styles/#creating-a-named-style","title":"Creating a Named Style","text":"<p>In contrast to Cell Styles, Named Styles are mutable. They make sense when you want to apply formatting to lots of different cells at once. NB. once you have assigned a named style to a cell, additional changes to the style will not affect the cell.</p> <p>Once a named style has been registered with a workbook, it can be referred to simply by name.</p> <pre><code>highlight &lt;- NamedStyle(name=\"highlight\")\nhighlight$font = Font(bold = TRUE, size = 20)\nbd = Side(style='thick', color=\"000000\")\nhighlight$border = Border(left=bd, top=bd, right=bd, bottom=bd)\n</code></pre> <p>Once a named style has been created, it can be registered with the workbook:</p> <pre><code>wb$add_named_style(highlight)\n</code></pre> <p>But named styles will also be registered automatically the first time they are assigned to a cell:</p> <pre><code>ws[['A1']]$style = highlight\n</code></pre> <p>Once registered, assign the style using just the name:</p> <pre><code>ws[['D5']]$style = 'highlight'\n</code></pre>"},{"location":"vignettes/styles/#using-builtin-styles","title":"Using builtin styles","text":"<p>The specification includes some builtin styles which can also be used. Unfortunately, the names for these styles are stored in their localised forms. openpyxl will only recognise the English names and only exactly as written here. These are as follows:</p> <ul> <li>\"Normal\" # same as no style</li> </ul>"},{"location":"vignettes/styles/#number-formats","title":"Number formats","text":"<ul> <li>\"Comma\"</li> <li>\"Comma [0]\"</li> <li>\"Currency\"</li> <li>\"Currency [0]\"</li> <li>\"Percent\"</li> </ul>"},{"location":"vignettes/styles/#informative","title":"Informative","text":"<ul> <li>\"Calculation\"</li> <li>\"Total\"</li> <li>\"Note\"</li> <li>\"Warning Text\"</li> <li>\"Explanatory Text\"</li> </ul>"},{"location":"vignettes/styles/#text-styles","title":"Text styles","text":"<ul> <li>\"Title\"</li> <li>\"Headline 1\"</li> <li>\"Headline 2\"</li> <li>\"Headline 3\"</li> <li>\"Headline 4\"</li> <li>\"Hyperlink\"</li> <li>\"Followed Hyperlink\"</li> <li>\"Linked Cell\"</li> </ul>"},{"location":"vignettes/styles/#comparisons","title":"Comparisons","text":"<ul> <li>\"Input\"</li> <li>\"Output\"</li> <li>\"Check Cell\"</li> <li>\"Good\"</li> <li>\"Bad\"</li> <li>\"Neutral\"</li> </ul>"},{"location":"vignettes/styles/#highlights","title":"Highlights","text":"<ul> <li>\"Accent1\"</li> <li>\"20 % - Accent1\"</li> <li>\"40 % - Accent1\"</li> <li>\"60 % - Accent1\"</li> <li>\"Accent2\"</li> <li>\"20 % - Accent2\"</li> <li>\"40 % - Accent2\"</li> <li>\"60 % - Accent2\"</li> <li>\"Accent3\"</li> <li>\"20 % - Accent3\"</li> <li>\"40 % - Accent3\"</li> <li>\"60 % - Accent3\"</li> <li>\"Accent4\"</li> <li>\"20 % - Accent4\"</li> <li>\"40 % - Accent4\"</li> <li>\"60 % - Accent4\"</li> <li>\"Accent5\"</li> <li>\"20 % - Accent5\"</li> <li>\"40 % - Accent5\"</li> <li>\"60 % - Accent5\"</li> <li>\"Accent6\"</li> <li>\"20 % - Accent6\"</li> <li>\"40 % - Accent6\"</li> <li>\"60 % - Accent6\"</li> <li>\"Pandas\"</li> </ul> <p>For more information about the builtin styles please refer to the openpyxl.styles.builtins</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/validation/","title":"Validating cells","text":"<p>Data validators can be applied to ranges of cells but are not enforced or evaluated. Ranges do not have to be contiguous: eg. \u201cA1 B2:B5\u201d is contains A1 and the cells B2 to B5 but not A2 or B2.</p> <p>Examples</p> <pre><code>library(xlcharts)\n\n# Create the workbook and worksheet we'll be working with\nwb &lt;- Workbook()\nws &lt;- wb$active\n\n# Create a data-validation object with list validation\ndv = DataValidation(type=\"list\", formula1='\"Dog,Cat,Bat\"', allow_blank=TRUE)\n\n# Optionally set a custom error message\ndv$error ='Your entry is not in the list'\ndv$errorTitle = 'Invalid Entry'\n\n# Optionally set a custom prompt message\ndv$prompt = 'Please select from the list'\ndv$promptTitle = 'List Selection'\n\n# make input and error messages visible\ndv$showInputMessage &lt;- TRUE\ndv$showErrorMessage &lt;- TRUE\n\n# Add the data-validation object to the worksheet\nws$add_data_validation(dv)\n\n# Create some cells, and add them to the data-validation object\nc1 &lt;- ws[[\"A1\"]]\nc1$value &lt;- \"Dog\"\ndv$add(c1)\nc2 &lt;- ws[[\"A2\"]]\nc2$value &lt;- \"An invalid value\"\ndv$add(c2)\n\n# Or, apply the validation to a range of cells\ndv$add('B1:B1048576') # This is the same as for the whole of column B\n\n# Check cells in the validator\ndv$cells\n</code></pre> <pre><code>&lt;MultiCellRange [A1 A2 B1:B1048576]&gt;\n</code></pre> <p>Note</p> <p>Validations without any cell ranges will be ignored when saving a workbook.</p> <p>Note</p> <p>Excel and LibreOffice interpret the parameter showDropDown=True as the dropdown arrow should be hidden.</p>"},{"location":"vignettes/validation/#other-validation-examples","title":"Other validation examples","text":"<p>Any whole number:</p> <pre><code>dv &lt;- DataValidation(type=\"whole\")\n</code></pre> <p>Any whole number above 100:</p> <pre><code>dv &lt;- DataValidation(type=\"whole\",\n                    operator=\"greaterThan\",\n                    formula1=100)\n</code></pre> <p>Any decimal number:</p> <pre><code>dv &lt;- DataValidation(type=\"decimal\")\n</code></pre> <p>Any decimal number between 0 and 1:</p> <pre><code>dv &lt;- DataValidation(type=\"decimal\",\n                    operator=\"between\",\n                    formula1=0,\n                    formula2=1)\n</code></pre> <p>Any date:</p> <pre><code>dv &lt;- DataValidation(type=\"date\")\n</code></pre> <p>or time:</p> <pre><code>dv &lt;- DataValidation(type=\"time\")\n</code></pre> <p>Any string at most 15 characters:</p> <pre><code>dv &lt;- DataValidation(type=\"textLength\",\n                    operator=\"lessThanOrEqual\",\n                    formula1=15L)\n</code></pre> <p>Cell range validation:</p> <p>TODO: transpose to R. Any contribution welcomed!</p> <pre><code>&gt;&gt;&gt; from openpyxl.utils import quote_sheetname\n&gt;&gt;&gt; dv = DataValidation(type=\"list\",\n formula1=\"{0}!$B$1:$B$10\".format(quote_sheetname(sheetname))\n                      )\n</code></pre> <p>Custom rule:</p> <pre><code>dv = DataValidation(type=\"custom\",\n                    formula1=\"SOMEFORMULA\")\n</code></pre> <p>Note</p> <p>See http://www.contextures.com/xlDataVal07.html for custom rules</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/worksheet_properties/","title":"Additional Worksheet Properties","text":"<p>These are advanced properties for particular behaviours, the most used ones are the \u201cfitTopage\u201d page setup property and the tabColor that define the background color of the worksheet tab.</p>"},{"location":"vignettes/worksheet_properties/#available-properties-for-worksheets","title":"Available properties for worksheets","text":"<ul> <li>\u201cenableFormatConditionsCalculation\u201d</li> <li>\u201cfilterMode\u201d</li> <li>\u201cpublished\u201d</li> <li>\u201csyncHorizontal\u201d</li> <li>\u201csyncRef\u201d</li> <li>\u201csyncVertical\u201d</li> <li>\u201ctransitionEvaluation\u201d</li> <li>\u201ctransitionEntry\u201d</li> <li>\u201ctabColor\u201d</li> </ul>"},{"location":"vignettes/worksheet_properties/#available-fields-for-page-setup-properties","title":"Available fields for page setup properties","text":"<p>\u201cautoPageBreaks\u201d \u201cfitToPage\u201d</p>"},{"location":"vignettes/worksheet_properties/#available-fields-for-outlines","title":"Available fields for outlines","text":"<ul> <li>\u201capplyStyles\u201d</li> <li>\u201csummaryBelow\u201d</li> <li>\u201csummaryRight\u201d</li> <li>\u201cshowOutlineSymbols\u201d</li> </ul> <p>Search ECMA-376 \"pageSetup\" for more details.</p> <p>Note</p> <p>By default, outline properties are intitialized so you can directly modify each of their 4 attributes, while page setup properties don\u2019t. If you want modify the latter, you should first initialize a openpyxl.worksheet.properties.PageSetupProperties object with the required parameters. Once done, they can be directly modified by the routine later if needed.</p> <pre><code>library(xlcharts)\n\nwb &lt;- Workbook()\nws &lt;- wb$active\n\nwsprops &lt;- ws$sheet_properties\nwsprops$tabColor &lt;- \"1072BA\"\nwsprops$filterMode &lt;- FALSE\nwsprops$pageSetUpPr = PageSetupProperties(\n  fitToPage=TRUE, \n  autoPageBreaks = FALSE\n)\nwsprops$outlinePr$summaryBelow &lt;- FALSE\nwsprops$outlinePr$applyStyles &lt;- TRUE\nwsprops$pageSetUpPr$autoPageBreaks &lt;- TRUE\n</code></pre>"},{"location":"vignettes/worksheet_properties/#worksheet-views","title":"Worksheet Views","text":"<p>There are also several convenient properties defined as worksheet views. You can use ws$sheet_view to set sheet attributes such as zoom, show formulas or if the tab is selected.</p> <pre><code>wb &lt;- Workbook()\nws &lt;- wb.active\n\nws$sheet_view$zoomScale &lt;- 85 # Sets 85% zoom\nws$sheet_view$showFormulas &lt;- TRUE\nws$sheet_view$tabSelected &lt;- TRUE\n</code></pre> <p>For some reason <code>zoomScale</code> returns an error while the zoom indeed set to 85%.</p>"},{"location":"vignettes/worksheet_properties/#fold-outline","title":"Fold (outline)","text":"<pre><code>&gt;&gt;&gt; import openpyxl\n&gt;&gt;&gt; wb = openpyxl.Workbook()\n&gt;&gt;&gt; ws = wb.create_sheet()\n&gt;&gt;&gt; ws.column_dimensions.group('A','D', hidden=True)\n&gt;&gt;&gt; ws.row_dimensions.group(1,10, hidden=True)\n&gt;&gt;&gt; wb.save('group.xlsx')\n</code></pre> <p>TODO: translate into R. Any contribution welcomed!</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/worksheet_tables/","title":"Worksheet Tables","text":"<p>Worksheet tables are references to groups of cells. This makes certain operations such as styling the cells in a table easier.</p>"},{"location":"vignettes/worksheet_tables/#creating-a-table","title":"Creating a table","text":"<pre><code>library(xlcharts)\n\ntable &lt;- data.frame(\n  \"Fruit\" = c(\"Apples\", \"Pears\", \"Bananas\", \"Oranges\"),\n  \"2011\" = c(10000, 2000, 6000, 500),\n  \"2012\" = c(5000, 3000, 6000, 300),\n  \"2013\" = c(8000, 4000, 6500, 200),\n  \"2014\" = c(6000, 5000, 6000, 700)\n)\n\nwrite_xlsx(table, \"table.xlsx\")\n\nwb &lt;- load_workbook(\"table.xlsx\")\nws &lt;- wb$active\n\ntab = Table(displayName=\"Table1\", ref=\"A1:E5\")\n\n# Add a default style with striped rows and banded columns\nstyle &lt;- TableStyleInfo(\n  name = \"TableStyleMedium9\", \n  showFirstColumn = FALSE,\n  showLastColumn = FALSE,\n  showRowStripes = TRUE, \n  showColumnStripes = TRUE\n)\n\ntab$tableStyleInfo &lt;- style\n\n#Table must be added using ws.add_table() method to avoid duplicate names.\n#Using this method ensures table name is unque through out defined names and all other table name. \n\nws$add_table(tab)\nwb$save(\"table.xlsx\")\n</code></pre> <p>Table names must be unique within a workbook. By default tables are created with a header from the first row and filters for all the columns and table headers and column headings must always contain strings.</p> <p>Warning</p> <p>In write-only mode you must add column headings to tables manually and the values must always be the same as the values of the corresponding cells (ee below for an example of how to do this), otherwise Excel may consider the file invalid and remove the table.</p> <p>Styles are managed using <code>TableStyleInfo()</code>. This allows you to stripe rows or columns and apply the different colour schemes.</p>"},{"location":"vignettes/worksheet_tables/#working-with-tables","title":"Working with Tables","text":"<p>ws$tables is an object of all the tables in a particular worksheet:</p> <pre><code>ws$tables\n</code></pre> <p>Get Table by name or range</p> <pre><code>ws$tables[[\"Table1\"]]\n</code></pre> <p>Get table name and range of all tables in a worksheet</p> <p>The number of tables in a worksheet</p> <pre><code>length(ws$tables)\n</code></pre>"},{"location":"vignettes/worksheet_tables/#filters","title":"Filters","text":"<p>Filters will be added automatically to tables that contain header rows. It is not possible to create tables with header rows without filters.</p>"},{"location":"vignettes/worksheet_tables/#table-as-a-print-area","title":"Table as a Print Area","text":"<p>Excel can produce documents with the print area set to the table name. Openpyxl cannot, however, resolve such dynamic definitions and will raise a warning when trying to do so.</p> <p>If you need to handle this you can extract the range of the table and define the print area as the appropriate cell range.</p> <pre><code>table_range &lt;- ws$tables[\"Table1\"]\nws$print_area &lt;- table_range$Table1\n</code></pre> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/area/","title":"Area Charts","text":""},{"location":"vignettes/charts/area/#2d-area-charts","title":"2D Area Charts","text":"<p>Area charts are similar to line charts with the addition that the area underneath the plotted line is filled. Different variants are available by setting the grouping to \u201cstandard\u201d, \u201cstacked\u201d or \u201cpercentStacked\u201d; \u201cstandard\u201d is the default.</p> <pre><code>library(xlcharts)\n\narea &lt;- data.frame(\n  \"Number\" = c(2,3,4,5,6,7),\n  \"Batch 1\" = c(40,40,50,30,25,50),\n  \"Batch 2\" = c(30,25,30,10,5,10),\n  check.names = FALSE\n)\n\nwrite_xlsx(area, path = \"area.xlsx\")\n\nwb &lt;- load_workbook(filename = \"area.xlsx\")\nws &lt;- wb |&gt; active()\n\nchart &lt;- AreaChart(\n  title = \"Area Chart\",\n  style = 13\n) |&gt;\n  x_axis(title = \"Test\") |&gt;\n  y_axis(title = \"Percentage\")\n\ncats &lt;- Reference(ws, min_col=1, min_row=1, max_row=7)\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_col=3, max_row=7)\n\nchart |&gt; \n  add_data(data, titles_from_data = TRUE) |&gt; \n  set_categories(cats)\n\nws |&gt; add_chart(chart, \"A10\")\n\nsave_workbook(wb, \"area.xlsx\")\n</code></pre> <p></p>"},{"location":"vignettes/charts/area/#3d-area-charts","title":"3D Area Charts","text":"<p>You can also create 3D area charts.</p> <p>Warning</p> <p>3D charts are almost always inappropriately used, as interpretation is improved by turning them into regular 2D figures. Please avoid making 3D charts.</p> <pre><code>chart &lt;- AreaChart3D(\n  title = \"Area Chart\",\n  style = 13,\n  legend = NULL\n) |&gt;\n  x_axis(title = 'Test') |&gt;\n  y_axis(title = 'Percentage')\n\ncats &lt;- Reference(ws, min_col=1, min_row=1, max_row=7)\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_col=3, max_row=7)\n\nchart |&gt;\n  add_data(data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\n\nws |&gt; add_chart(chart, \"A10\")\n\nsave_workbook(wb, \"area3D.xlsx\")\n</code></pre> <p>This produces a simple 3D area chart where the third axis can be used to replace the legend:</p> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/bar/","title":"Bar and Column Charts","text":"<p>In bar charts values are plotted as either horizontal bars or vertical columns.</p>"},{"location":"vignettes/charts/bar/#vertical-horizontal-and-stacked-bar-charts","title":"Vertical, Horizontal and Stacked Bar Charts.","text":"<p>Note</p> <p>The following settings affect the different chart types. Switch between vertical and horizontal bar charts by setting type to \"col\"\" or \"bar\" respectively. When using stacked charts the overlap needs to be set to `100`. If bars are horizontal, x and y axes are reversed.</p> <pre><code>library(xlcharts)\n\nbar &lt;- data.frame(\n  \"Number\" = c(2,3,4,5,6,7),\n  \"Batch 1\" = c(10,40,50,20,10,50),\n  \"Batch 2\" = c(30,60,70,10,40,30)\n)\n\nwrite_xlsx(bar, path = \"bar.xlsx\")\n\nwb &lt;- load_workbook(filename = \"bar.xlsx\")\nws &lt;- active(wb)\n\nchart1 &lt;- BarChart(\n  type = \"col\",\n  style = 10,\n  title = \"Bar Chart\",\n  shape = 4\n) |&gt;\n  y_axis(title = \"Test number\") |&gt;\n  x_axis(title = \"Sample length (mm)\")\n\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=7, max_col=3)\ncats &lt;- Reference(ws, min_col=1, min_row=2, max_row=7)\n\nchart1 |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\n\nws |&gt; add_chart(chart1, \"A10\")\n</code></pre> <pre><code>chart2 &lt;- BarChart(\n  type = \"bar\",\n  style = 11,\n  title = \"Horizontal Bar Chart\",\n  shape = 4\n) |&gt;\n  y_axis(title = 'Test number') |&gt;\n  x_axis(title = 'Sample length (mm)')\n\nchart2 |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\n\nws |&gt; add_chart(chart2, \"G10\")\n</code></pre> <pre><code>chart3 &lt;- BarChart(\n  type = \"col\",\n  style = 12,\n  title = \"Stacked Chart\",\n  shape = 4,\n  grouping = \"stacked\",\n  overlap = 100\n) |&gt;\n  y_axis(title = 'Test number') |&gt;\n  x_axis(title = 'Sample length (mm)')\n\nchart3 |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\n\nws |&gt; add_chart(chart3, \"A27\")\n</code></pre> <pre><code>chart4 &lt;- BarChart(\n  type = \"bar\",\n  style = 13,\n  title = \"Percent Stacked Chart\",\n  shape = 4,\n  grouping = \"percentStacked\",\n  overlap = 100\n) |&gt;\n  y_axis(title = 'Test number') |&gt;\n  x_axis(title = 'Sample length (mm)')\n\nchart4 |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(cats)\n\nws |&gt; add_chart(chart4, \"G27\")\n</code></pre> <pre><code>save_workbook(wb, \"bar.xlsx\")\n</code></pre> <p>This will produce four charts illustrating the various possibilities.</p> <p></p>"},{"location":"vignettes/charts/bar/#3d-bar-charts","title":"3D Bar Charts","text":"<p>Warning</p> <p>3D charts are almost always inappropriately used, as interpretation is improved by turning them into regular 2D figures. Please avoid making 3D charts.</p> <p>This produces a simple 3D bar chart.</p> <pre><code>library(xlcharts)\n\nbar3d &lt;- data.frame(\n  \"Fruits\" = c(\"Apples\", \"Oranges\", \"Pears\"),\n  \"2013\" = c(5, 6, 8),\n  \"2014\" = c(4, 2, 3)\n)\n\nwrite_xlsx(bar3d, path = \"bar3d.xlsx\")\n\nwb &lt;- load_workbook(filename = \"bar3d.xlsx\")\nws &lt;- active(wb)\n\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_col=3, max_row=4)\ntitles &lt;- Reference(ws, min_col=1, min_row=2, max_row=4)\n\nchart &lt;- BarChart3D(\n  title = \"3D Bar Chart\"\n) |&gt;\n  add_data(data = data, titles_from_data = TRUE) |&gt;\n  set_categories(labels = titles)\n\nws |&gt; add_chart(chart, \"E5\")\n\nsave_workbook(wb, \"bar3d.xlsx\")\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/bubble/","title":"Bubble Charts","text":"<p>Bubble charts are similar to scatter charts but use a third dimension to determine the size of the bubbles. Charts can include multiple series.</p> <pre><code>library(xlcharts)\n\nbubble &lt;- data.frame(\n  \"Number of Products\" = c(14, 20, 18, 2, NA, 12, 15, 19, 25),\n  \"Sales in USD\" = c(12200, 60000, 24400, 32000, NA, 8200, 50000, 22400, 25000),\n  \"Market share\" = c(15, 33, 10, 41, NA, 18, 30, 15, 50),\n  check.names = FALSE\n)\n\nwrite_xlsx(bubble, \"bubble.xlsx\")\n\nwb &lt;- load_workbook(filename = \"bubble.xlsx\")\nws &lt;- wb |&gt; active()\n\nchart &lt;- BubbleChart(\n  style = 18 # use a preset style\n)\n\n# add the first series of data\nxvalues &lt;- Reference(ws, min_col=1, min_row=2, max_row=5)\nyvalues &lt;- Reference(ws, min_col=2, min_row=2, max_row=5)\nsize &lt;- Reference(ws, min_col=3, min_row=2, max_row=5)\nseries1 &lt;- Series(values=yvalues, xvalues=xvalues, zvalues=size, title=\"2013\")\n\nchart$append(series1)\n\n# add the second\nxvalues &lt;- Reference(ws, min_col=1, min_row=7, max_row=10)\nyvalues &lt;- Reference(ws, min_col=2, min_row=7, max_row=10)\nsize &lt;- Reference(ws, min_col=3, min_row=7, max_row=10)\nseries2 &lt;- Series(values=yvalues, xvalues=xvalues, zvalues=size, title=\"2014\")\n\nchart$append(series2)\n\n# place the chart starting in cell E1\nws |&gt; add_chart(chart, \"E1\")\n\nwb |&gt; save_workbook(\"bubble.xlsx\")\n</code></pre> <p>This will produce a bubble chart with two series and should look something like this:</p> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/doughnut/","title":"Doughnut Charts","text":"<p>Doughnut charts are similar to pie charts except that they use a ring instead of a circle. They can also plot several series of data as concentric rings.</p> <pre><code>library(xlcharts)\n\ndoughnut &lt;- data.frame(\n  \"Pie\" = c(\"Plain\", \"Jam\", \"Lime\", \"Chocolate\"),\n  \"2014\" = c(40, 2, 20, 30),\n  \"2015\" = c(50, 10, 30, 40),\n  check.names = FALSE\n)\n\nwrite_xlsx(doughnut, \"doughnut.xlsx\")\n\nwb &lt;- load_workbook(filename = \"doughnut.xlsx\")\nws &lt;- wb |&gt; active()\n\nchart &lt;- DoughnutChart(\n  title = \"Doughnuts sold by category\",\n  style = 26\n)\n\nlabels &lt;- Reference(ws, min_col=1, min_row=2, max_row=5)\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=5)\n\nchart |&gt; add_data(data, titles_from_data = TRUE)\nchart |&gt; set_categories(labels)\n\n# Cut the first slice out of the doughnut\nplain &lt;- DataPoint(idx = 0)\njam &lt;- DataPoint(idx = 1)\nlime &lt;- DataPoint(idx = 2)\nchocolate &lt;- DataPoint(idx = 3)\n\nslices &lt;- list(plain, jam, lime, chocolate)\n\nchart$series[[1]]$data_points &lt;- slices\n\nplain$graphicalProperties &lt;- GraphicalProperties(\n  solidFill = \"FAE1D0\"\n)\njam$graphicalProperties &lt;- GraphicalProperties(\n    solidFill = \"BB2244\"\n  )\nlime$graphicalProperties &lt;- GraphicalProperties(\n    solidFill = \"22DD22\"\n  )\nchocolate$graphicalProperties &lt;- GraphicalProperties(\n    solidFill = \"61210B\"\n  )\nchocolate[[\"explosion\"]] &lt;- 10L\n\nws |&gt; add_chart(chart, \"E1\")\n\n# Chart 2\nchart2 &lt;- DoughnutChart(\n  title = NULL,\n  style = 26\n)\n\nchart2 |&gt; add_data(data, titles_from_data = TRUE)\nchart2 |&gt; set_categories(labels)\n\n# Cut the first slice out of the doughnut\nplain &lt;- DataPoint(idx = 0)\njam &lt;- DataPoint(idx = 1)\nlime &lt;- DataPoint(idx = 2)\nchocolate &lt;- DataPoint(idx = 3)\n\nslices &lt;- list(plain, jam, lime, chocolate)\n\nchart2$series[[1]]$data_points &lt;- slices\n\nplain$graphicalProperties &lt;- GraphicalProperties(\n    solidFill = \"FAE1D0\"\n  )\njam$graphicalProperties &lt;- GraphicalProperties(\n    solidFill = \"BB2244\"\n  )\nlime$graphicalProperties &lt;- GraphicalProperties(\n    solidFill = \"22DD22\"\n  )\nchocolate$graphicalProperties &lt;- GraphicalProperties(\n    solidFill = \"61210B\"\n  )\nchocolate[[\"explosion\"]] &lt;- 10L\n\ndata2 &lt;- Reference(ws, min_col=3, min_row=1, max_row=5)\nseries2 &lt;- Series(data2, title_from_data = TRUE)\nseries2$data_points &lt;- slices\n\nchart2$append(series2)\n\nws |&gt; add_chart(chart2, \"E17\")\n\nwb |&gt; save_workbook(\"doughnut.xlsx\")\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/gauge/","title":"Gauge Charts","text":"<p>Gauge charts combine a pie chart and a doughnut chart to create a \u201cgauge\u201d. The first chart is a doughnut chart with four slices. The first three slices correspond to the colours of the gauge; the fourth slice, which is half of the doughnut, is made invisible.</p> <p>A pie chart containing three slices is added. The first and third slice are invisible so that the second slice can act as the needle on the gauge.</p> <p>The effects are done using the graphical properties of individual data points in a data series.</p> <pre><code>library(xlcharts)\n\ngauge &lt;- data.frame(\n  \"Donut\" = c(25, 50, 25, 100),\n  \"Pie\" = c(75, 1, 125, NA)\n)\n\nwrite_xlsx(gauge, \"gauge.xlsx\")\n\n# based on http://www.excel-easy.com/examples/gauge-chart.html\n\nwb &lt;- load_workbook(filename = \"gauge.xlsx\") \nws &lt;- wb |&gt; active()\n\n# First chart is a doughnut chart\nc1 &lt;- DoughnutChart(\n  firstSliceAng = 270, \n  holeSize = 50,\n  title = \"Code coverage\",\n  legend = NULL\n)\n\nref &lt;- Reference(ws, min_col=1, min_row=2, max_row=5)\ns1 &lt;- Series(ref, title_from_data=TRUE)\n\nslice_1 &lt;- DataPoint(idx = 0)\nslice_2 &lt;- DataPoint(idx = 1)\nslice_3 &lt;- DataPoint(idx = 2)\nslice_4 &lt;- DataPoint(idx = 3)\n\n\nslice_1$graphicalProperties &lt;- GraphicalProperties(solidFill = \"FF3300\") # red\nslice_2$graphicalProperties &lt;- GraphicalProperties(solidFill = \"FCF305\") # yellow\nslice_3$graphicalProperties &lt;- GraphicalProperties(solidFill = \"1FB714\") # green\nslice_4$graphicalProperties &lt;- GraphicalProperties(noFill = TRUE) # invisible\n\ns1$data_points &lt;- list(slice_1, slice_2, slice_3, slice_4)\nc1$series &lt;- list(s1)\n\n# Second chart is a pie chart\nc2 &lt;- PieChart(\n  firstSliceAng = 270,\n  legend = NULL\n)\n\nref &lt;- Reference(ws, min_col=2, min_row=2, max_col=2, max_row=4)\ns2 &lt;- Series(ref, title_from_data = FALSE)\n\nslice_1 &lt;- DataPoint(idx = 0)\nslice_2 &lt;- DataPoint(idx = 1)\nslice_3 &lt;- DataPoint(idx = 2)\n\nslice_1$graphicalProperties &lt;- GraphicalProperties(noFill = TRUE) # invisible\nslice_2$graphicalProperties &lt;- GraphicalProperties(solidFill =  \"000000\") # black needle\nslice_3$graphicalProperties &lt;- GraphicalProperties(noFill = TRUE) # invisible\n\ns2$data_points &lt;- list(slice_1, slice_2, slice_3)\nc2$series &lt;- list(s2)\n\n# combine using iadd from the operator Python module\niadd(c1, c2)\n\nws |&gt; add_chart(c1, anchor = \"D1\")\n\nwb |&gt; save_workbook(\"gauge.xlsx\")\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/line/","title":"Line Charts","text":""},{"location":"vignettes/charts/line/#three-kinds-of-line-charts","title":"Three kinds of line charts","text":"<p>Line charts allow data to be plotted against a fixed axis. They are similar to scatter charts, the main difference is that with line charts each data series is plotted against the same values. Different kinds of axes can be used for the secondary axes.</p> <p>Similar to bar charts there are three kinds of line charts: standard, stacked and percentStacked.</p> <pre><code>library(xlcharts)\n\nline &lt;- data.frame(\n  \"Date\" = as.Date(c(\"2015-09-01\", \"2015-09-02\", \"2015-09-03\", \n                     \"2015-09-04\", \"2015-09-05\", \"2015-09-06\")),\n  \"Batch 1\" = c(40, 40, 50, 30, 25, 20),\n  \"Batch 2\" = c(30, 25, 30, 25, 35, 40),\n  \"Batch 3\" = c(25, 30, 45, 40, 30, 35)\n)\n\nwrite_xlsx(line, \"line.xlsx\")\n\nwb &lt;- load_workbook(filename = \"line.xlsx\")\n\nws &lt;- wb |&gt; active()\n\nc1 &lt;- LineChart(\n  title = \"Line Chart\",\n  style = 13\n) |&gt;\n  y_axis(title = 'Size') |&gt;\n  x_axis(title = 'Test Number')\n\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_col=4, max_row=7)\n\nc1 |&gt; add_data(data, titles_from_data = TRUE)\n\n# Serie 1\ns1 &lt;- c1$series[[1]]\n\n# marker\ns1$marker &lt;- Marker(symbol = \"triangle\")\n\n# marker.graphicalProprieties\ns1$marker$graphicalProperties &lt;- GraphicalProperties(\n  solidFill = \"FF0000\",\n  line = LineProperties(solidFill = \"FF0000\")\n  )\n\n# graphicalProprieties.line\ns1$graphicalProperties &lt;- GraphicalProperties(\n  line = LineProperties(noFill = TRUE)\n)\n\n# Serie 2\ns2 &lt;- c1$series[[2]]\n\n# graphicalProprieties.line\ns2$graphicalProperties &lt;- GraphicalProperties(\n  line = LineProperties(\n    solidFill = \"00AAAA\",\n    dashStyle = \"sysDot\",\n    width = 100050\n    )\n  )\n\ns3 &lt;- c1$series[[3]]\ns3[[\"smooth\"]] &lt;- TRUE # Make the line smooth\n\nws |&gt; add_chart(c1, anchor = \"A10\")\n\n# Stacked Line Chart\nstacked &lt;- deepcopy(c1)\nstacked$grouping &lt;- \"stacked\"\nstacked$title &lt;- \"Stacked Line Chart\"\n\nws |&gt; add_chart(stacked, anchor = \"A27\")\n\n# Percent Stacked Line Chart\npercent_stacked &lt;- deepcopy(c1)\npercent_stacked$grouping &lt;- \"percentStacked\"\npercent_stacked$title &lt;- \"Percent Stacked Line Chart\"\n\nws |&gt; add_chart(percent_stacked, anchor = \"A44\")\n\n# Chart with date axis\nc2 &lt;- LineChart(\n  title = \"Date Axis\",\n  style = 12\n) |&gt;\n  y_axis(\n    title = \"Size\"#,\n    #crossAx = 500\n  ) |&gt;\n  x_axis(\n    number_format = 'd-mmm',\n    majorTimeUnit = \"days\",\n    title = \"Date\"\n  )\n\ndates &lt;- Reference(ws, min_col=1, min_row=2, max_row=7)\n\nc2 |&gt; \n  add_data(data, titles_from_data = TRUE) |&gt; \n  set_categories(dates)\n\nws |&gt; add_chart(c2, \"A61\")\n\nwb |&gt; save_workbook(\"line.xlsx\")\n</code></pre> <p></p>"},{"location":"vignettes/charts/line/#3d-line-charts","title":"3D Line Charts","text":"<p>In 3D line charts the third axis is the same as the legend for the series.</p> <p>Warning</p> <p>3D charts are almost always inappropriately used, as interpretation is improved by turning them into regular 2D figures. Please avoid making 3D charts.</p> <pre><code>wb &lt;- load_workbook(filename = \"line.xlsx\")\nws &lt;- wb |&gt; active()\n\nc1 &lt;- LineChart3D(\n  title = \"3D Line Chart\",\n  legend = NULL,\n  style = 15\n) |&gt;\n  y_axis(title = 'Size') |&gt;\n  x_axis(title = 'Test Number')\n\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_col=4, max_row=7)\n\nc1 |&gt; add_data(data, titles_from_data = TRUE)\n\nws |&gt; add_chart(c1, \"A10\")\n\nwb |&gt; save_workbook(\"line3D.xlsx\")\n\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/pareto/","title":"Pareto Charts","text":"<p>A Pareto chart is a type of chart that contains both bars and a line graph, where individual values are represented in descending order by bars, and the cumulative total is represented by the line. The chart is named for the Pareto principle, which, in turn, derives its name from Vilfredo Pareto, an Italian economist. </p> <p>You can find another example of two charts combined together in the following page: add a second axis.</p> <pre><code>library(xlcharts)\n\npareto &lt;- data.frame(\n  \"Variables\" = c(\"Number\", \"Percentage\"),\n  \"Traffic\" = c(60, 0.44),\n  \"Child care\" = c(40, 0.667),\n  \"Public Transport\" = c(20, 0.8),\n  \"Weather\" = c(15, 0.9),\n  \"Overslept\" = c(10, 0.967),\n  \"Emergency\" = c(1, 1), \n  check.names = FALSE\n)\n\nwrite_xlsx(pareto, \"pareto.xlsx\")\n\nwb &lt;- load_workbook(filename = \"pareto.xlsx\") \nws &lt;- wb |&gt; active()\n\nc1 &lt;- BarChart(\n  title = 'Reasons for lateness'\n) |&gt;\n  x_axis(title = \"Reasons\") |&gt;\n  y_axis(title = \"Number\",\n         majorGridlines = NULL #,\n         # scaling = Scaling(\n         #     min = 0,\n         #     max = 120\n         #   )\n         )\n\nv1 &lt;- Reference(ws, min_col = 1, min_row = 2, max_col = 7)\ntitles &lt;- Reference(ws, min_col = 2, min_row = 1, max_col = 7)\n\nc1 |&gt; add_data(v1, titles_from_data=TRUE, from_rows=TRUE) |&gt;\n  set_categories(labels = titles)\n\n# Create a second chart\n\nc2 &lt;- LineChart() |&gt;\n  y_axis(\n    title = \"Percentage\", \n    axId = 200,\n    number_format = '0%',\n    scaling = Scaling(\n      min = 0,\n      max = 1\n    )\n  )\n\nv2 &lt;- Reference(ws, min_col=1, min_row=3, max_col=7)\nc2 |&gt; add_data(v2, titles_from_data=TRUE, from_rows=TRUE)\n\n# Display y-axis of the second chart on the right by setting it to cross the x-axis at its maximum\nc1 |&gt; \n  y_axis(\n    crosses = \"max\"\n  )\n\n# combine using iadd from the operator Python module\niadd(c1, c2)\n\nws |&gt; add_chart(c1, \"D5\")\n\nwb |&gt; save_workbook(\"pareto.xlsx\")\n</code></pre> <p></p> <p>This page is an adaptation of the Adding a second axis page.</p>"},{"location":"vignettes/charts/pie/","title":"Pie Charts","text":""},{"location":"vignettes/charts/pie/#pie-chart-2d","title":"Pie Chart 2D","text":"<p>Pie charts plot data as slices of a circle with each slice representing the percentage of the whole. Slices are plotted in a clockwise direction with 0\u00b0 being at the top of the circle. Pie charts can only take a single series of data. The title of the chart will default to being the title of the series.</p> <pre><code>library(xlcharts)\n\npie_data &lt;- data.frame(\n  \"Pie\" = c(\"Apple\", \"Cherry\", \"Pumpkin\", \"Chocolate\"),\n  \"Sold\" = c(50, 30, 10, 40)\n)\npie_project_data &lt;- data.frame(\n  \"Page\" = c(\"Search\", \"Products\", \"Offers\", \"Sales\"),\n  \"View\" = c(95, 4, 0.5, 0.5)\n)\n\nwrite_xlsx(x = list(\n  \"Sheet1\" = pie_data, \n  \"Projection\" = pie_project_data\n  ), \n  path = \"pie.xlsx\")\n\nwb &lt;- load_workbook(filename = \"pie.xlsx\")\nws &lt;- wb |&gt; active()\n\npie &lt;- PieChart(\n  title = \"Pies sold by category\"\n)\nlabels &lt;- Reference(ws, min_col=1, min_row=2, max_row=5)\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=5)\npie |&gt; add_data(data, titles_from_data = TRUE)\npie |&gt; set_categories(labels)\n\n# Cut the first slice out of the pie\nslice &lt;- DataPoint(idx = 0, explosion = 20L)\n\npie$series[[1]]$data_points &lt;- list(slice)\n\nws |&gt; add_chart(pie, \"D1\")\n\n#ws &lt;- wb$create_sheet(title=\"Projection\")\nws &lt;- wb[[\"Projection\"]]\n\nprojected_pie &lt;- ProjectedPieChart(\n  type = \"pie\",\n  splitType = \"val\" # split by value\n)\n\nlabels &lt;- Reference(ws, min_col=1, min_row=2, max_row=5)\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=5)\n\nprojected_pie |&gt; add_data(data, titles_from_data = TRUE)\nprojected_pie |&gt; set_categories(labels)\n\nws |&gt; add_chart(projected_pie, \"A10\")\n\nprojected_bar &lt;- deepcopy(projected_pie)\nprojected_bar$type &lt;- \"bar\"\nprojected_bar$splitType &lt;- \"pos\"\n\nws |&gt; add_chart(projected_bar, \"A27\")\n\nwb |&gt; save_workbook(\"pie.xlsx\")\n</code></pre> <p></p>"},{"location":"vignettes/charts/pie/#projected-pie-charts","title":"Projected Pie Charts","text":"<p>Projected pie charts extract some slices from a pie chart and project them into a second pie or bar chart. This is useful when there are several smaller items in the data series. The chart can be split according to percent, val(ue) or pos(ition). If nothing is set then the application decides which to use. In addition custom splits can be defined.</p> <p></p>"},{"location":"vignettes/charts/pie/#3d-pie-charts","title":"3D Pie Charts","text":"<p>Pie charts can also be created with a 3D effect.</p> <p>Warning</p> <p>3D charts are almost always inappropriately used, as interpretation is improved by turning them into regular 2D figures. Please avoid making 3D charts.</p> <pre><code>library(xlcharts)\n\npie_data &lt;- data.frame(\n  \"Pie\" = c(\"Apple\", \"Cherry\", \"Pumpkin\", \"Chocolate\"),\n  \"Sold\" = c(50, 30, 10, 40)\n)\n\nwrite_xlsx(pie_data, path = \"pie3D.xlsx\")\n\nwb &lt;- load_workbook(filename = \"pie3D.xlsx\")\nws &lt;- wb |&gt; active()\n\npie3d = PieChart3D(\n  title = \"Pies sold by category\"\n)\nlabels &lt;- Reference(ws, min_col=1, min_row=2, max_row=5)\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=5)\npie3d |&gt; add_data(data, titles_from_data = TRUE)\npie3d |&gt; set_categories(labels)\n\nws |&gt; add_chart(pie3d, \"D1\")\n\nwb |&gt; save_workbook(\"pie3D.xlsx\")\n</code></pre> <p></p>"},{"location":"vignettes/charts/pie/#gradient-pie-charts","title":"Gradient Pie Charts","text":"<p>Pie charts can also be created with gradient series.</p> <pre><code>library(xlcharts)\n\npie_data &lt;- data.frame(\n  \"Pie\" = c(\"Apple\", \"Cherry\", \"Pumpkin\", \"Chocolate\"),\n  \"Sold\" = c(50, 30, 10, 40)\n)\n\nwrite_xlsx(pie_data, path = \"pie-gradient.xlsx\")\n\nwb &lt;- load_workbook(filename = \"pie-gradient.xlsx\")\nws &lt;- wb |&gt; active()\n\npie_gradient &lt;- PieChart(\n  title = \"Pies sold by category\"\n)\nlabels &lt;- Reference(ws, min_col=1, min_row=2, max_row=5)\ndata &lt;- Reference(ws, min_col=2, min_row=1, max_row=5)\npie_gradient |&gt; add_data(data, titles_from_data = TRUE)\npie_gradient |&gt; set_categories(labels)\n\n# Cut the first slice out of the pie and apply a gradient to it\nslice &lt;- DataPoint(\n    idx = 0,\n    explosion = 20,\n    spPr = GraphicalProperties(\n        gradFill = GradientFillProperties(\n            gsLst = list(\n                GradientStop(\n                    pos=0,\n                    prstClr='blue'\n                ),\n                GradientStop(\n                    pos=100000,\n                    schemeClr=SchemeColor(\n                        val='accent1',\n                        lumMod=30000,\n                        lumOff=70000\n                    )\n                )\n            )\n        )\n    )\n)\n\npie_gradient$series[[1]]$data_points &lt;- list(slice)\n\nws |&gt; add_chart(pie_gradient, \"D1\")\n\nsave_workbook(wb, \"pie-gradient.xlsx\")\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/radar/","title":"Radar Charts","text":"<p>Data that is arranged in columns or rows on a worksheet can be plotted in a radar chart. Radar charts compare the aggregate values of multiple data series. It is effectively a projection of an area chart on a circular x-axis.</p> <p>There are two types of radar chart: standard, where the area is marked with a line; and filled, where the whole area is filled. The additional type \u201cmarker\u201d has no effect. If markers are desired these can be set for the relevant series.</p> <pre><code>library(xlcharts)\n\nradar &lt;- data.frame(\n  \"Month\" = c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\", \"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"),\n  \"Bulbes\" = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 1500L, 5000L, 8500L, 3500L, 500L),\n  \"Seeds\" = c(2500L, 5500L, 9000L, 6500L, 3500L, 0L, 0L, 0L, 0L, 0L, 0L, 0L),\n  \"Flowers\" = c(500L,750L,1500L,2000L,5500L,7500L, 8500L,7000L,3500L,2500L,500L,100L),\n  \"Trees &amp; shrubs\" = c(0L,1500L,2500L,4000L, 3500L,1500L,800L,550L,2500L,6000L,5500L,3000L),\n  check.names = FALSE\n)\n\nwrite_xlsx(radar, \"radar.xlsx\")\n\nwb &lt;- load_workbook(filename = \"radar.xlsx\")\nws &lt;- wb |&gt; active()\n\nchart &lt;- RadarChart(\n  title = \"Garden Centre Sales\",\n  style = 26,\n  type = \"filled\",\n) |&gt;\n  y_axis(delete = TRUE)\n\nlabels &lt;- Reference(ws, min_col=1, min_row=2, max_row=13)\ndata &lt;- Reference(ws, min_col=2, max_col=5, min_row=1, max_row=13)\nchart |&gt; add_data(data, titles_from_data = TRUE)\nchart |&gt; set_categories(labels)\n\nws |&gt; add_chart(chart, \"A17\")\n\nwb |&gt; save_workbook(\"radar.xlsx\")\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/scatter/","title":"Scatter Charts","text":"<p>Scatter, or xy, charts are similar to some line charts. The main difference is that one series of values is plotted against another. This is useful where values are unordered.</p> <pre><code>library(xlcharts)\n\nscatter &lt;- data.frame(\n  \"Size\" = c(2,3,4,5,6,7),\n  \"Batch 1\" = c(40,40,50,30,25,20),\n  \"Batch 2\" = c(30,25,30,25,35,40), \n  check.names = FALSE\n)\n\nwrite_xlsx(scatter, \"scatter.xlsx\")\n\nwb &lt;- load_workbook(filename = \"scatter.xlsx\")\nws &lt;- wb |&gt; active()\n\nchart &lt;- ScatterChart(\n  title = \"Scatter Chart\",\n  style = 13\n) |&gt;\n  x_axis(title = 'Size') |&gt; \n  y_axis(title = 'Percentage')\n\nxvalues &lt;- Reference(ws, min_col=1, min_row=2, max_row=7)\n\nfor (i in c(2:3)) {\n  values &lt;- Reference(ws, min_col=i, min_row=1, max_row=7)\n  series &lt;- Series(values, xvalues, title_from_data=TRUE)\n  chart$append(series)\n}\n\nws |&gt; add_chart(chart, \"A10\")\n\nwb |&gt; save_workbook(\"scatter.xlsx\")\n</code></pre> <p></p> <p>Note</p> <p>The specification says that there are the following types of scatter charts: \u2018line\u2019, \u2018lineMarker\u2019, \u2018marker\u2019, \u2018smooth\u2019, \u2018smoothMarker\u2019. However, at least in Microsoft Excel, this is just a shortcut for other settings that otherwise have no effect. For consistency with line charts, the style for each series should be set manually.</p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/stock/","title":"Stock Charts","text":"<p>Data that is arranged in columns or rows in a specific order on a worksheet can be plotted in a stock chart. As its name implies, a stock chart is most often used to illustrate the fluctuation of stock prices. However, this chart may also be used for scientific data. For example, you could use a stock chart to indicate the fluctuation of daily or annual temperatures. You must organize your data in the correct order to create stock charts.</p> <p>The way stock chart data is organized in the worksheet is very important. For example, to create a simple high-low-close stock chart, you should arrange your data with High, Low, and Close entered as column headings, in that order.</p> <p>Although stock charts are a distinct type, the various types are just shortcuts for particular formatting options:</p> <ul> <li>high-low-close is essentially a line chart with no lines and the marker set to XYZ. It also sets hiLoLines to TRUE.</li> <li>open-high-low-close is the same as a high-low-close chart with the marker for each data point set to XZZ and upDownLines.</li> </ul> <p>Volume can be added by combining the stock chart with a bar chart for the volume.</p> <pre><code>library(xlcharts)\n\nstock &lt;- data.frame(\n  \"Date\" = c(\"2015-01-01\", \"2015-01-02\", \"2015-01-03\", \"2015-01-04\", \"2015-01-05\"),\n  \"Volume\" = c(20000, 10000, 15000, 2000, 12000),\n  \"Open\" = c(26.2, 25.45, 23.05, 22.42, 21.9),\n  \"High\" = c(27.20, 25.03, 24.46, 23.97, 23.65),\n  \"Low\" = c(23.49, 19.55, 20.03, 20.07, 19.50),\n  \"Close\" = c(25.45, 23.05, 22.45, 21.90, 21.51)\n)\n\nwrite_xlsx(stock, path = \"stock.xlsx\")\n\nwb &lt;- load_workbook(filename = \"stock.xlsx\")\nws &lt;- wb |&gt; active()\n\n# High-low-close\nc1 &lt;- StockChart(\n  title = \"High-low-close\",\n  hiLowLines = ChartLines()\n)\nlabels &lt;- Reference(ws, min_col=1, min_row=2, max_row=6)\ndata &lt;- Reference(ws, min_col=4, max_col=6, min_row=1, max_row=6)\nc1 |&gt; \n  add_data(data, titles_from_data = TRUE) |&gt;\n  set_categories(labels)\n\ns &lt;- c1$series\n\nfor(i in seq_along(s)) {\n  s[[i]]$graphicalProperties &lt;- GraphicalProperties(\n    line = LineProperties(\n      noFill = TRUE\n    )\n  )\n}\n\nfor(i in seq_along(s)) {\n  s[[i]]$marker &lt;- Marker(\n    symbol = \"dot\",\n    size = 5\n  )\n}\n\n# Excel is broken and needs a cache of values in order to display hiLoLines :-/\n# see: https://openpyxl.readthedocs.io/en/stable/charts/stock.html\nfor(i in 1:length(data)) {\n  pts &lt;- NumVal(idx=i)\n  cache &lt;- NumData(pt = list(pts))\n  c1$series[[1]]$val$numRef$numCache &lt;- cache\n}\n\nws |&gt; add_chart(c1, \"A10\")\n\n# Open-high-low-close\nc2 &lt;- StockChart()\ndata &lt;- Reference(ws, min_col=3, max_col=6, min_row=1, max_row=6)\nc2 |&gt;\n  add_data(data, titles_from_data=TRUE) |&gt;\n  set_categories(labels)\n\ns2 &lt;- c2$series\n\nfor(i in seq_along(s2)) {\n  s2[[i]]$graphicalProperties &lt;- GraphicalProperties(\n    line = LineProperties(\n      noFill = TRUE\n    )\n  )\n}\n\nfor(i in seq_along(s2)) {\n  s2[[i]]$marker &lt;- Marker(\n    symbol = \"dot\",\n    size = 5\n  )\n}\n\nc2$hiLowLines &lt;- ChartLines()\nc2$upDownBars &lt;- UpDownBars()\nc2$title &lt;- \"Open-high-low-close\"\n\n# add dummy cache\nc2$series[[1]]$val$numRef$numCache &lt;- cache\n\nws$add_chart(c2, \"G10\")\n\n# Create bar chart for volume\n\nbar = BarChart()\ndata = Reference(ws, min_col=2, min_row=1, max_row=6)\nbar |&gt; \n  add_data(data, titles_from_data=TRUE) |&gt; \n  set_categories(labels)\n\n\n# Volume-high-low-close\nb1 &lt;- deepcopy(bar)\nc3 &lt;- deepcopy(c1)\nc3 |&gt; \n  y_axis(\n    majorGridlines = NULL,\n    title = \"Price\",\n    axId = 20\n  )\n\nb1$z_axis &lt;- c3$y_axis\n\nb1|&gt; y_axis(crosses = \"max\")\n\n# combine using iadd from the operator Python module\niadd(b1, c3)\n\nws$add_chart(b1, \"A27\")\n\n## Volume-open-high-low-close\nb2 &lt;- deepcopy(bar)\nc4 &lt;- deepcopy(c2)\nc4 |&gt; \n  y_axis(\n    majorGridlines = NULL,\n    title = \"Price\",\n    axId = 20)\nb2$z_axis &lt;- c4$y_axis\nb2 |&gt; y_axis(crosses = \"max\")\n\n# combine using iadd from the operator Python module\niadd(b2, c4)\n\nws$add_chart(b2, \"G27\")\n\nsave_workbook(wb, \"stock.xlsx\")\n</code></pre> <p>Warning</p> <p>Due to a bug in Excel high-low lines will only be shown if at least one of the data series has some dummy values. This can be done with the following hack. </p> <pre><code>for(i in 1:length(data)) {\n  pts &lt;- NumVal(idx=i)\n  cache &lt;- NumData(pt = list(pts))\n  c1$series[[1]]$val$numRef$numCache &lt;- cache\n}\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"},{"location":"vignettes/charts/surface/","title":"Surface charts","text":"<p>Data that is arranged in columns or rows on a worksheet can be plotted in a surface chart. A surface chart is useful when you want to find optimum combinations between two sets of data. As in a topographic map, colors and patterns indicate areas that are in the same range of values.</p> <p>By default all surface charts are 3D. 2D wireframe and contour charts are created by setting the rotation and perspective.</p> <pre><code>library(xlcharts)\n\nset.seed(123)\n\nsurface &lt;- data.frame(\n  a = c(NA,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9),\n  b = sample(10,100, size = 10),\n  c = sample(10:300, size = 10),\n  d = sample(10:300, size = 10),\n  e = sample(10:200, size = 10),\n  f = sample(10:100, size = 10)\n)\n\nwrite_xlsx(surface, path = \"surface.xlsx\")\n\nwb &lt;- load_workbook(filename = \"surface.xlsx\")\nws &lt;- wb |&gt; active()\n\nc1 &lt;- SurfaceChart(\n  title = \"Contour\"\n)\nref &lt;- Reference(ws, min_col=2, max_col=6, min_row=2, max_row=11)\nlabels &lt;- Reference(ws, min_col=1, min_row=3, max_row=11)\n\nc1 |&gt; \n  add_data(ref, titles_from_data = TRUE) |&gt; \n  set_categories(labels)\n\nws |&gt; add_chart(c1, \"A12\")\n\n# wireframe\nc2 &lt;- SurfaceChart(\n  wireframe = TRUE,\n  title = \"2D Wireframe\"\n)\n\nc2 |&gt; \n  add_data(ref, titles_from_data = TRUE) |&gt; \n  set_categories(labels)\n\nws |&gt; add_chart(c2, \"G12\")\n\n# 3D Surface\nc3 &lt;- SurfaceChart3D(\n  title = \"Surface\"\n)\n\nc3 |&gt; \n  add_data(ref, titles_from_data = TRUE) |&gt; \n  set_categories(labels)\n\nws |&gt; add_chart(c3, \"A29\")\n\nc4 &lt;- SurfaceChart3D(\n  wireframe = TRUE,\n  title = \"3D Wireframe\"\n)\n\nc4 |&gt; \n  add_data(ref, titles_from_data = TRUE) |&gt; \n  set_categories(labels)\n\nws |&gt; add_chart(c4, \"G29\")\n\nwb |&gt; save_workbook(\"surface.xlsx\")\n</code></pre> <p></p> <p>This page is an R replica of the related OpenPyXL documentation page.</p>"}]}